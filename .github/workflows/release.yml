name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build project
        run: pnpm run build

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and create tag
        id: version
        run: |
          # Check if there are any changes since last tag
          if git describe --tags --exact-match HEAD 2>/dev/null; then
            echo "No new commits since last release, skipping..."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine version bump type based on commit messages
          BUMP_TYPE="patch"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          fi
          
          # Check for breaking changes or major version indicators
          if echo "$COMMITS" | grep -qiE "(BREAKING CHANGE|major:)"; then
            BUMP_TYPE="major"
          # Check for new features
          elif echo "$COMMITS" | grep -qiE "(feat:|feature:|minor:)"; then
            BUMP_TYPE="minor"
          fi
          
          echo "Bumping $BUMP_TYPE version"
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Commit version bump
        if: steps.version.outputs.skip != 'true'
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_version }}
          git push origin main --tags

      - name: Publish to npm
        if: steps.version.outputs.skip != 'true'
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version.outputs.skip != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false 