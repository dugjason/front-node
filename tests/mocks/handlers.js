/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import { faker } from "@faker-js/faker"
import { HttpResponse, http } from "msw"

faker.seed(1)

const baseURL = "https://api2.frontapp.com"
const MAX_ARRAY_LENGTH = 20

// Map to store counters for each API endpoint
const apiCounters = new Map()

const next = (apiKey) => {
  let currentCount = apiCounters.get(apiKey) ?? 0
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0
  }
  apiCounters.set(apiKey, currentCount + 1)
  return currentCount
}

export const handlers = [
  http.get(`${baseURL}/accounts`, async () => {
    const resultArray = [[getListAccounts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /accounts") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/accounts`, async () => {
    const resultArray = [[getCreateAccount201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /accounts") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/accounts/custom_fields`, async () => {
    const resultArray = [
      [getListAccountCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /accounts/custom_fields") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/accounts/:accountId`, async () => {
    const resultArray = [[getFetchAnAccount200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /accounts/:accountId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/accounts/:accountId`, async () => {
    const resultArray = [[getUpdateAccount200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /accounts/:accountId") % resultArray.length],
    )
  }),
  http.delete(`${baseURL}/accounts/:accountId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("delete /accounts/:accountId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/accounts/:accountId/contacts`, async () => {
    const resultArray = [[getListAccountContacts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /accounts/:accountId/contacts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/accounts/:accountId/contacts`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /accounts/:accountId/contacts") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/accounts/:accountId/contacts`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /accounts/:accountId/contacts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/analytics/exports`, async () => {
    const resultArray = [
      [getCreateAnalyticsExport201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("post /analytics/exports") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/analytics/exports/:exportId`, async () => {
    const resultArray = [[getGetAnalyticsExport200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /analytics/exports/:exportId") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/analytics/reports`, async () => {
    const resultArray = [
      [getCreateAnalyticsReport201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("post /analytics/reports") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/analytics/reports/:reportUid`, async () => {
    const resultArray = [[getGetAnalyticsReport200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /analytics/reports/:reportUid") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/applications/:applicationUid/events`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /applications/:applicationUid/events") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/channels`, async () => {
    const resultArray = [[getListChannels200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /channels") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/channels/:channelId`, async () => {
    const resultArray = [[getGetChannel200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /channels/:channelId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/channels/:channelId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /channels/:channelId") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/channels/:channelId/drafts`, async () => {
    const resultArray = [[getCreateDraft200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /channels/:channelId/drafts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/channels/:channelId/incoming_messages`, async () => {
    const resultArray = [
      [getReceiveCustomMessages202Response(), { status: 202 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /channels/:channelId/incoming_messages") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/channels/:channelId/messages`, async () => {
    const resultArray = [[getCreateMessage202Response(), { status: 202 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /channels/:channelId/messages") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/channels/:channelId/validate`, async () => {
    const resultArray = [[getValidateChannel202Response(), { status: 202 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /channels/:channelId/validate") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/comments/:commentId`, async () => {
    const resultArray = [[getGetComment200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /comments/:commentId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/comments/:commentId/`, async () => {
    const resultArray = [[getUpdateComment200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /comments/:commentId/") % resultArray.length],
    )
  }),
  http.get(
    `${baseURL}/comments/:commentId/download/:attachmentLinkId`,
    async () => {
      const resultArray = [
        [getDownloadAttachmentForAComment200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /comments/:commentId/download/:attachmentLinkId") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/comments/:commentId/mentions`, async () => {
    const resultArray = [[getListCommentMentions200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /comments/:commentId/mentions") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/comments/:commentId/replies`, async () => {
    const resultArray = [[getAddCommentReply201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /comments/:commentId/replies") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/company/rules`, async () => {
    const resultArray = [[getListAllCompanyRules200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /company/rules") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/company/statuses`, async () => {
    const resultArray = [
      [getListCompanyTicketStatuses200Response(), { status: 200 }],
      [undefined, { status: 404 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /company/statuses") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/company/statuses/:statusId`, async () => {
    const resultArray = [[getGetTicketStatusById200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /company/statuses/:statusId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/company/tags`, async () => {
    const resultArray = [[getListCompanyTags200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /company/tags") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/company/tags`, async () => {
    const resultArray = [[getCreateCompanyTag201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /company/tags") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/contact_groups`, async () => {
    const resultArray = [[getListGroups200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /contact_groups") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/contact_groups`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("post /contact_groups") % resultArray.length],
    )
  }),
  http.delete(`${baseURL}/contact_groups/:contactGroupId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /contact_groups/:contactGroupId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/contact_groups/:contactGroupId/contacts`, async () => {
    const resultArray = [[getListContactsInGroup200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /contact_groups/:contactGroupId/contacts") %
          resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/contact_groups/:contactGroupId/contacts`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /contact_groups/:contactGroupId/contacts") %
          resultArray.length
      ],
    )
  }),
  http.delete(
    `${baseURL}/contact_groups/:contactGroupId/contacts`,
    async () => {
      const resultArray = [[undefined, { status: 204 }]]

      return HttpResponse.json(
        ...resultArray[
          next("delete /contact_groups/:contactGroupId/contacts") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/contact_lists`, async () => {
    const resultArray = [[getListContactLists200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /contact_lists") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/contact_lists`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("post /contact_lists") % resultArray.length],
    )
  }),
  http.delete(`${baseURL}/contact_lists/:contactListId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /contact_lists/:contactListId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/contact_lists/:contactListId/contacts`, async () => {
    const resultArray = [
      [getListContactsInContactList200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /contact_lists/:contactListId/contacts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/contact_lists/:contactListId/contacts`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /contact_lists/:contactListId/contacts") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/contact_lists/:contactListId/contacts`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /contact_lists/:contactListId/contacts") %
          resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/contacts`, async () => {
    const resultArray = [[getListContacts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /contacts") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/contacts`, async () => {
    const resultArray = [[getCreateContact201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /contacts") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/contacts/custom_fields`, async () => {
    const resultArray = [
      [getListContactCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /contacts/custom_fields") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/contacts/merge`, async () => {
    const resultArray = [[getMergeContacts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("post /contacts/merge") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/contacts/:contactId`, async () => {
    const resultArray = [[getGetContact200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /contacts/:contactId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/contacts/:contactId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /contacts/:contactId") % resultArray.length],
    )
  }),
  http.delete(`${baseURL}/contacts/:contactId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("delete /contacts/:contactId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/contacts/:contactId/conversations`, async () => {
    const resultArray = [
      [getListContactConversations200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /contacts/:contactId/conversations") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/contacts/:contactId/handles`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /contacts/:contactId/handles") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/contacts/:contactId/handles`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /contacts/:contactId/handles") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/contacts/:contactId/notes`, async () => {
    const resultArray = [[getListNotes202Response(), { status: 202 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /contacts/:contactId/notes") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/contacts/:contactId/notes`, async () => {
    const resultArray = [[getAddNote201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /contacts/:contactId/notes") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations`, async () => {
    const resultArray = [[getListConversations200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /conversations") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/conversations`, async () => {
    const resultArray = [[getCreateConversation201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /conversations") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/conversations/custom_fields`, async () => {
    const resultArray = [
      [getListConversationCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/custom_fields") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/search/:query`, async () => {
    const resultArray = [[getSearchConversations200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/search/:query") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId`, async () => {
    const resultArray = [
      [getGetConversationById200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId") % resultArray.length
      ],
    )
  }),
  http.patch(`${baseURL}/conversations/:conversationId`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
      [undefined, { status: 400 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("patch /conversations/:conversationId") % resultArray.length
      ],
    )
  }),
  http.put(`${baseURL}/conversations/:conversationId/assignee`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("put /conversations/:conversationId/assignee") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId/comments`, async () => {
    const resultArray = [
      [getListConversationComments200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/comments") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/comments`, async () => {
    const resultArray = [
      [getAddComment201Response(), { status: 201 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/comments") %
          resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId/drafts`, async () => {
    const resultArray = [
      [getListConversationDrafts200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/drafts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/drafts`, async () => {
    const resultArray = [
      [getCreateDraftReply200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/drafts") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId/events`, async () => {
    const resultArray = [
      [getListConversationEvents200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/events") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId/followers`, async () => {
    const resultArray = [
      [getListConversationFollowers200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/followers") %
          resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/followers`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/followers") %
          resultArray.length
      ],
    )
  }),
  http.delete(
    `${baseURL}/conversations/:conversationId/followers`,
    async () => {
      const resultArray = [
        [undefined, { status: 204 }],
        [undefined, { status: 301 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("delete /conversations/:conversationId/followers") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/conversations/:conversationId/inboxes`, async () => {
    const resultArray = [
      [getListConversationInboxes200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/inboxes") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/links`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/links") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/conversations/:conversationId/links`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("delete /conversations/:conversationId/links") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/conversations/:conversationId/messages`, async () => {
    const resultArray = [
      [getListConversationMessages200Response(), { status: 200 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /conversations/:conversationId/messages") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/messages`, async () => {
    const resultArray = [
      [getCreateMessageReply202Response(), { status: 202 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/messages") %
          resultArray.length
      ],
    )
  }),
  http.patch(`${baseURL}/conversations/:conversationId/reminders`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("patch /conversations/:conversationId/reminders") %
          resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/conversations/:conversationId/tags`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /conversations/:conversationId/tags") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/conversations/:conversationId/tags`, async () => {
    const resultArray = [
      [undefined, { status: 204 }],
      [undefined, { status: 301 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("delete /conversations/:conversationId/tags") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/custom_fields`, async () => {
    const resultArray = [[getListCustomFields200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /custom_fields") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/download/:attachmentLinkId`, async () => {
    const resultArray = [[getDownloadAttachment200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /download/:attachmentLinkId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/drafts/:draftId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("delete /drafts/:draftId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/drafts/:messageId/`, async () => {
    const resultArray = [[getEditDraft200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /drafts/:messageId/") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/events`, async () => {
    const resultArray = [[getListEvents200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /events") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/events/:eventId`, async () => {
    const resultArray = [[getGetEvent200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /events/:eventId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/inboxes`, async () => {
    const resultArray = [[getListInboxes200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /inboxes") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/inboxes`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("post /inboxes") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/inboxes/custom_fields`, async () => {
    const resultArray = [
      [getListInboxCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /inboxes/custom_fields") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/inboxes/:inboxId`, async () => {
    const resultArray = [[getGetInbox200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /inboxes/:inboxId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/inboxes/:inboxId/channels`, async () => {
    const resultArray = [[getListInboxChannels200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /inboxes/:inboxId/channels") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/inboxes/:inboxId/channels`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /inboxes/:inboxId/channels") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/inboxes/:inboxId/conversations`, async () => {
    const resultArray = [
      [getListInboxConversations200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /inboxes/:inboxId/conversations") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/inboxes/:inboxId/imported_messages`, async () => {
    const resultArray = [[getImportInboxMessage202Response(), { status: 202 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /inboxes/:inboxId/imported_messages") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/inboxes/:inboxId/teammates`, async () => {
    const resultArray = [[getListInboxAccess200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /inboxes/:inboxId/teammates") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/inboxes/:inboxId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /inboxes/:inboxId/teammates") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/inboxes/:inboxId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /inboxes/:inboxId/teammates") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/knowledge_base_articles/:articleId`, async () => {
    const resultArray = [
      [getGetAKnowledgeBaseArticle200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /knowledge_base_articles/:articleId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/knowledge_base_articles/:articleId`, async () => {
    const resultArray = [[getDeleteAnArticle200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /knowledge_base_articles/:articleId") % resultArray.length
      ],
    )
  }),
  http.get(
    `${baseURL}/knowledge_base_articles/:articleId/content`,
    async () => {
      const resultArray = [
        [
          getGetKnowledgeBaseArticleWithContentInDefaultLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /knowledge_base_articles/:articleId/content") %
            resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/knowledge_base_articles/:articleId/content`,
    async () => {
      const resultArray = [
        [getUpdateArticleContentInDefaultLocale200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("patch /knowledge_base_articles/:articleId/content") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_base_articles/:articleId/download/:attachmentId`,
    async () => {
      const resultArray = [
        [getDownloadAttachmentFromAnArticle200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /knowledge_base_articles/:articleId/download/:attachmentId",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_base_articles/:articleId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [
          getGetKnowledgeBaseArticleWithContentInSpecifiedLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /knowledge_base_articles/:articleId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/knowledge_base_articles/:articleId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [
          getUpdateArticleContentInSpecifiedLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "patch /knowledge_base_articles/:articleId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/knowledge_base_categories/:categoryId`, async () => {
    const resultArray = [
      [getGetAKnowledgeBaseCategory200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /knowledge_base_categories/:categoryId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/knowledge_base_categories/:categoryId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /knowledge_base_categories/:categoryId") %
          resultArray.length
      ],
    )
  }),
  http.get(
    `${baseURL}/knowledge_base_categories/:categoryId/articles`,
    async () => {
      const resultArray = [
        [getListArticlesInACategory200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /knowledge_base_categories/:categoryId/articles") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_base_categories/:categoryId/content`,
    async () => {
      const resultArray = [
        [
          getGetKnowledgeBaseCategoryContentInDefaultLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /knowledge_base_categories/:categoryId/content") %
            resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/knowledge_base_categories/:categoryId/content`,
    async () => {
      const resultArray = [
        [
          getUpdateKnowledgeBaseCategoryInDefaultLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("patch /knowledge_base_categories/:categoryId/content") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_base_categories/:categoryId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [
          getGetKnowledgeBaseCategoryWithContentInSpecifiedLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /knowledge_base_categories/:categoryId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/knowledge_base_categories/:categoryId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [
          getUpdateKnowledgeBaseCategoryInSpecifiedLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "patch /knowledge_base_categories/:categoryId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/knowledge_bases`, async () => {
    const resultArray = [[getListKnowledgeBases200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /knowledge_bases") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/knowledge_bases`, async () => {
    const resultArray = [
      [getCreateAKnowledgeBase201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("post /knowledge_bases") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/knowledge_bases/:knowledgeBaseId`, async () => {
    const resultArray = [[getGetAKnowledgeBase200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /knowledge_bases/:knowledgeBaseId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/knowledge_bases/:knowledgeBaseId/articles`, async () => {
    const resultArray = [
      [getListArticlesInAKnowledgeBase200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /knowledge_bases/:knowledgeBaseId/articles") %
          resultArray.length
      ],
    )
  }),
  http.post(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/articles`,
    async () => {
      const resultArray = [
        [
          getCreateArticleInAKnowledgeBaseInDefaultLocale201Response(),
          { status: 201 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("post /knowledge_bases/:knowledgeBaseId/articles") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/categories`,
    async () => {
      const resultArray = [
        [getListCategoriesInAKnowledgeBase200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /knowledge_bases/:knowledgeBaseId/categories") %
            resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/categories`,
    async () => {
      const resultArray = [
        [
          getCreateKnowledgeBaseCategoryInDefaultLocale201Response(),
          { status: 201 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("post /knowledge_bases/:knowledgeBaseId/categories") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/knowledge_bases/:knowledgeBaseId/content`, async () => {
    const resultArray = [
      [
        getGetAKnowledgeBaseWithContentInDefaultLocale200Response(),
        { status: 200 },
      ],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /knowledge_bases/:knowledgeBaseId/content") %
          resultArray.length
      ],
    )
  }),
  http.patch(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/content`,
    async () => {
      const resultArray = [
        [getUpdateKnowledgeBaseInDefaultLocale200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("patch /knowledge_bases/:knowledgeBaseId/content") %
            resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/locales/:locale/articles`,
    async () => {
      const resultArray = [
        [
          getCreateArticleInAKnowledgeBaseInSpecifiedLocale201Response(),
          { status: 201 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "post /knowledge_bases/:knowledgeBaseId/locales/:locale/articles",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/locales/:locale/categories`,
    async () => {
      const resultArray = [
        [
          getCreateKnowledgeBaseCategoryInSpecifiedLocale201Response(),
          { status: 201 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "post /knowledge_bases/:knowledgeBaseId/locales/:locale/categories",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [
          getGetAKnowledgeBaseWithContentInSpecifiedLocale200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /knowledge_bases/:knowledgeBaseId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/knowledge_bases/:knowledgeBaseId/locales/:locale/content`,
    async () => {
      const resultArray = [
        [getUpdateKnowledgeBaseInSpecifiedLocale200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "patch /knowledge_bases/:knowledgeBaseId/locales/:locale/content",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/links`, async () => {
    const resultArray = [[getListLinks200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /links") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/links`, async () => {
    const resultArray = [[getCreateLink201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /links") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/links/custom_fields`, async () => {
    const resultArray = [
      [getListLinkCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /links/custom_fields") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/links/:linkId`, async () => {
    const resultArray = [[getGetLink200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /links/:linkId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/links/:linkId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /links/:linkId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/links/:linkId/conversations`, async () => {
    const resultArray = [
      [getListLinkConversations200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /links/:linkId/conversations") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/me`, async () => {
    const resultArray = [[getApiTokenDetails200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /me") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/message_template_folders`, async () => {
    const resultArray = [[getListFolders200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /message_template_folders") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/message_template_folders`, async () => {
    const resultArray = [[getCreateFolder201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /message_template_folders") % resultArray.length
      ],
    )
  }),
  http.get(
    `${baseURL}/message_template_folders/:messageTemplateFolderId`,
    async () => {
      const resultArray = [[getGetFolder200Response(), { status: 200 }]]

      return HttpResponse.json(
        ...resultArray[
          next("get /message_template_folders/:messageTemplateFolderId") %
            resultArray.length
        ],
      )
    },
  ),
  http.patch(
    `${baseURL}/message_template_folders/:messageTemplateFolderId`,
    async () => {
      const resultArray = [[getUpdateFolder200Response(), { status: 200 }]]

      return HttpResponse.json(
        ...resultArray[
          next("patch /message_template_folders/:messageTemplateFolderId") %
            resultArray.length
        ],
      )
    },
  ),
  http.delete(
    `${baseURL}/message_template_folders/:messageTemplateFolderId`,
    async () => {
      const resultArray = [[getDeleteFolder202Response(), { status: 202 }]]

      return HttpResponse.json(
        ...resultArray[
          next("delete /message_template_folders/:messageTemplateFolderId") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/message_template_folders/:messageTemplateFolderId/message_template_folders`,
    async () => {
      const resultArray = [[getGetChildFolders200Response(), { status: 200 }]]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /message_template_folders/:messageTemplateFolderId/message_template_folders",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/message_template_folders/:messageTemplateFolderId/message_template_folders`,
    async () => {
      const resultArray = [[getCreateChildFolder201Response(), { status: 201 }]]

      return HttpResponse.json(
        ...resultArray[
          next(
            "post /message_template_folders/:messageTemplateFolderId/message_template_folders",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/message_template_folders/:messageTemplateFolderId/message_templates`,
    async () => {
      const resultArray = [[getGetChildTemplates200Response(), { status: 200 }]]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /message_template_folders/:messageTemplateFolderId/message_templates",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/message_template_folders/:messageTemplateFolderId/message_templates`,
    async () => {
      const resultArray = [
        [getCreateChildTemplate201Response(), { status: 201 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "post /message_template_folders/:messageTemplateFolderId/message_templates",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/message_templates`, async () => {
    const resultArray = [
      [getListMessageTemplates200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /message_templates") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/message_templates`, async () => {
    const resultArray = [
      [getCreateMessageTemplate201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("post /message_templates") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/message_templates/:messageTemplateId`, async () => {
    const resultArray = [[getGetMessageTemplate200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /message_templates/:messageTemplateId") % resultArray.length
      ],
    )
  }),
  http.patch(`${baseURL}/message_templates/:messageTemplateId`, async () => {
    const resultArray = [
      [getUpdateMessageTemplate200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("patch /message_templates/:messageTemplateId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/message_templates/:messageTemplateId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /message_templates/:messageTemplateId") %
          resultArray.length
      ],
    )
  }),
  http.get(
    `${baseURL}/message_templates/:messageTemplateId/download/:attachmentLinkId`,
    async () => {
      const resultArray = [
        [
          getDownloadAttachmentForAMessageTemplate200Response(),
          { status: 200 },
        ],
      ]

      return HttpResponse.json(
        ...resultArray[
          next(
            "get /message_templates/:messageTemplateId/download/:attachmentLinkId",
          ) % resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/messages/:messageId`, async () => {
    const resultArray = [[getGetMessage200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /messages/:messageId") % resultArray.length],
    )
  }),
  http.get(
    `${baseURL}/messages/:messageId/download/:attachmentLinkId`,
    async () => {
      const resultArray = [
        [getDownloadAttachmentForAMessage200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /messages/:messageId/download/:attachmentLinkId") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/messages/:messageId/seen`, async () => {
    const resultArray = [
      [getGetMessageSeenStatus200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /messages/:messageId/seen") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/messages/:messageId/seen`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /messages/:messageId/seen") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/rules`, async () => {
    const resultArray = [[getListRules200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /rules") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/rules/:ruleId`, async () => {
    const resultArray = [[getGetRule200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /rules/:ruleId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/shifts`, async () => {
    const resultArray = [[getListShifts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /shifts") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/shifts`, async () => {
    const resultArray = [[getCreateShift201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /shifts") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/shifts/:shiftId`, async () => {
    const resultArray = [[getGetShift200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /shifts/:shiftId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/shifts/:shiftId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /shifts/:shiftId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/shifts/:shiftId/teammates`, async () => {
    const resultArray = [[getListShiftsTeammates200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /shifts/:shiftId/teammates") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/shifts/:shiftId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /shifts/:shiftId/teammates") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/shifts/:shiftId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /shifts/:shiftId/teammates") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/signatures/:signatureId`, async () => {
    const resultArray = [[getGetSignatures200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /signatures/:signatureId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/signatures/:signatureId`, async () => {
    const resultArray = [[getUpdateSignature200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("patch /signatures/:signatureId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/signatures/:signatureId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /signatures/:signatureId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/tags`, async () => {
    const resultArray = [[getListTags200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /tags") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/tags`, async () => {
    const resultArray = [[getCreateTag201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /tags") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/tags/:tagId`, async () => {
    const resultArray = [[getGetTag200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /tags/:tagId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/tags/:tagId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /tags/:tagId") % resultArray.length],
    )
  }),
  http.delete(`${baseURL}/tags/:tagId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("delete /tags/:tagId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/tags/:tagId/children`, async () => {
    const resultArray = [[getListTagChildren200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /tags/:tagId/children") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/tags/:tagId/children`, async () => {
    const resultArray = [[getCreateChildTag201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /tags/:tagId/children") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/tags/:tagId/conversations`, async () => {
    const resultArray = [
      [getListTaggedConversations200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /tags/:tagId/conversations") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammate_groups`, async () => {
    const resultArray = [
      [getListCompanyTeammateGroups200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /teammate_groups") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teammate_groups`, async () => {
    const resultArray = [
      [getCreateCompanyTeammateGroup201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("post /teammate_groups") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teammate_groups/:teammateGroupId`, async () => {
    const resultArray = [
      [getGetCompanyTeammateGroup200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammate_groups/:teammateGroupId") % resultArray.length
      ],
    )
  }),
  http.patch(`${baseURL}/teammate_groups/:teammateGroupId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("patch /teammate_groups/:teammateGroupId") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/teammate_groups/:teammateGroupId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /teammate_groups/:teammateGroupId") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammate_groups/:teammateGroupId/inboxes`, async () => {
    const resultArray = [
      [getListCompanyTeammateGroupTeamInboxes200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammate_groups/:teammateGroupId/inboxes") %
          resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammate_groups/:teammateGroupId/inboxes`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammate_groups/:teammateGroupId/inboxes") %
          resultArray.length
      ],
    )
  }),
  http.delete(
    `${baseURL}/teammate_groups/:teammateGroupId/inboxes`,
    async () => {
      const resultArray = [[undefined, { status: 204 }]]

      return HttpResponse.json(
        ...resultArray[
          next("delete /teammate_groups/:teammateGroupId/inboxes") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(
    `${baseURL}/teammate_groups/:teammateGroupId/teammates`,
    async () => {
      const resultArray = [
        [getListCompanyTeammateGroupTeammates200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /teammate_groups/:teammateGroupId/teammates") %
            resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/teammate_groups/:teammateGroupId/teammates`,
    async () => {
      const resultArray = [[undefined, { status: 204 }]]

      return HttpResponse.json(
        ...resultArray[
          next("post /teammate_groups/:teammateGroupId/teammates") %
            resultArray.length
        ],
      )
    },
  ),
  http.delete(
    `${baseURL}/teammate_groups/:teammateGroupId/teammates`,
    async () => {
      const resultArray = [[undefined, { status: 204 }]]

      return HttpResponse.json(
        ...resultArray[
          next("delete /teammate_groups/:teammateGroupId/teammates") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/teammate_groups/:teammateGroupId/teams`, async () => {
    const resultArray = [
      [getListCompanyTeammateGroupTeams200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammate_groups/:teammateGroupId/teams") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammate_groups/:teammateGroupId/teams`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammate_groups/:teammateGroupId/teams") %
          resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/teammate_groups/:teammateGroupId/teams`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /teammate_groups/:teammateGroupId/teams") %
          resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates`, async () => {
    const resultArray = [[getListTeammates200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teammates") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teammates/custom_fields`, async () => {
    const resultArray = [
      [getListTeammateCustomFields200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[next("get /teammates/custom_fields") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId`, async () => {
    const resultArray = [[getGetTeammate200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teammates/:teammateId") % resultArray.length],
    )
  }),
  http.patch(`${baseURL}/teammates/:teammateId`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("patch /teammates/:teammateId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/channels`, async () => {
    const resultArray = [
      [getListTeammateChannels200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/channels") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/contact_groups`, async () => {
    const resultArray = [[getListTeammateGroups200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/contact_groups") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/contact_groups`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/contact_groups") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/contact_lists`, async () => {
    const resultArray = [
      [getListTeammateContactLists200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/contact_lists") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/contact_lists`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/contact_lists") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/contacts`, async () => {
    const resultArray = [
      [getListTeammateContacts200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/contacts") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/contacts`, async () => {
    const resultArray = [
      [getCreateTeammateContact201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/contacts") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/conversations`, async () => {
    const resultArray = [
      [getListAssignedConversations200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/conversations") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/inboxes`, async () => {
    const resultArray = [[getListTeammateInboxes200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/inboxes") % resultArray.length
      ],
    )
  }),
  http.get(
    `${baseURL}/teammates/:teammateId/message_template_folders`,
    async () => {
      const resultArray = [
        [getListTeammateFolders200Response(), { status: 200 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("get /teammates/:teammateId/message_template_folders") %
            resultArray.length
        ],
      )
    },
  ),
  http.post(
    `${baseURL}/teammates/:teammateId/message_template_folders`,
    async () => {
      const resultArray = [
        [getCreateTeammateFolder201Response(), { status: 201 }],
      ]

      return HttpResponse.json(
        ...resultArray[
          next("post /teammates/:teammateId/message_template_folders") %
            resultArray.length
        ],
      )
    },
  ),
  http.get(`${baseURL}/teammates/:teammateId/message_templates`, async () => {
    const resultArray = [
      [getListTeammateMessageTemplates200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/message_templates") %
          resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/message_templates`, async () => {
    const resultArray = [
      [getCreateTeammateMessageTemplate201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/message_templates") %
          resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/rules`, async () => {
    const resultArray = [[getListTeammateRules200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/rules") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/shifts`, async () => {
    const resultArray = [[getListTeammateShifts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/shifts") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/signatures`, async () => {
    const resultArray = [
      [getListTeammateSignatures200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/signatures") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/signatures`, async () => {
    const resultArray = [
      [getCreateTeammateSignature201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/signatures") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teammates/:teammateId/tags`, async () => {
    const resultArray = [[getListTeammateTags200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teammates/:teammateId/tags") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teammates/:teammateId/tags`, async () => {
    const resultArray = [[getCreateTeammateTag201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teammates/:teammateId/tags") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams`, async () => {
    const resultArray = [[getListTeams200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId`, async () => {
    const resultArray = [[getGetTeam200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/channels`, async () => {
    const resultArray = [[getListTeamChannels200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/channels") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/contact_groups`, async () => {
    const resultArray = [[getListTeamGroups200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teams/:teamId/contact_groups") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/contact_groups`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/contact_groups") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/contact_lists`, async () => {
    const resultArray = [
      [getListTeamContactLists200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teams/:teamId/contact_lists") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/contact_lists`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/contact_lists") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/contacts`, async () => {
    const resultArray = [[getListTeamContacts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/contacts") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/contacts`, async () => {
    const resultArray = [[getCreateTeamContact201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /teams/:teamId/contacts") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/inboxes`, async () => {
    const resultArray = [[getListTeamInboxes200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/inboxes") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/inboxes`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[next("post /teams/:teamId/inboxes") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/message_template_folders`, async () => {
    const resultArray = [[getListTeamFolders200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teams/:teamId/message_template_folders") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/message_template_folders`, async () => {
    const resultArray = [[getCreateTeamFolder201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/message_template_folders") %
          resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/message_templates`, async () => {
    const resultArray = [
      [getListTeamMessageTemplates200Response(), { status: 200 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("get /teams/:teamId/message_templates") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/message_templates`, async () => {
    const resultArray = [
      [getCreateTeamMessageTemplate201Response(), { status: 201 }],
    ]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/message_templates") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/rules`, async () => {
    const resultArray = [[getListTeamRules200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/rules") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/shifts`, async () => {
    const resultArray = [[getListTeamShifts200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/shifts") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/shifts`, async () => {
    const resultArray = [[getCreateTeamShift201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /teams/:teamId/shifts") % resultArray.length],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/signatures`, async () => {
    const resultArray = [[getListTeamSignatures200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[
        next("get /teams/:teamId/signatures") % resultArray.length
      ],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/signatures`, async () => {
    const resultArray = [[getCreateTeamSignature201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/signatures") % resultArray.length
      ],
    )
  }),
  http.get(`${baseURL}/teams/:teamId/tags`, async () => {
    const resultArray = [[getListTeamTags200Response(), { status: 200 }]]

    return HttpResponse.json(
      ...resultArray[next("get /teams/:teamId/tags") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/tags`, async () => {
    const resultArray = [[getCreateTeamTag201Response(), { status: 201 }]]

    return HttpResponse.json(
      ...resultArray[next("post /teams/:teamId/tags") % resultArray.length],
    )
  }),
  http.post(`${baseURL}/teams/:teamId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("post /teams/:teamId/teammates") % resultArray.length
      ],
    )
  }),
  http.delete(`${baseURL}/teams/:teamId/teammates`, async () => {
    const resultArray = [[undefined, { status: 204 }]]

    return HttpResponse.json(
      ...resultArray[
        next("delete /teams/:teamId/teammates") % resultArray.length
      ],
    )
  }),
]

export function getListAccounts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/accounts?page_token=abae846b73ddd80f67fff73c491c41b8b0e74972f3a1079c3c8800416e06cf46",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/accounts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/accounts/acc_76",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/accounts/acc_76/contacts",
        },
      },
      id: "acc_76",
      name: "Dunder Mifflin, Inc.",
      logo_url:
        "https://yourCompany.api.frontapp.com/accounts/acc_aq/logo-1654309308278",
      description: "Limitless Paper in a Paperless World",
      domains: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["dundermifflininc.com", "limitlesspaper.com"]),
      external_id: 8739674733,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1622672452.363,
      updated_at: 1654309308.278,
    })),
  }
}

export function getCreateAccount201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/accounts/acc_76",
      related: {
        contacts:
          "https://yourCompany.api.frontapp.com/accounts/acc_76/contacts",
      },
    },
    id: "acc_76",
    name: "Dunder Mifflin, Inc.",
    logo_url:
      "https://yourCompany.api.frontapp.com/accounts/acc_aq/logo-1654309308278",
    description: "Limitless Paper in a Paperless World",
    domains: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["dundermifflininc.com", "limitlesspaper.com"]),
    external_id: 8739674733,
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListAccountCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getFetchAnAccount200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/accounts/acc_76",
      related: {
        contacts:
          "https://yourCompany.api.frontapp.com/accounts/acc_76/contacts",
      },
    },
    id: "acc_76",
    name: "Dunder Mifflin, Inc.",
    logo_url:
      "https://yourCompany.api.frontapp.com/accounts/acc_aq/logo-1654309308278",
    description: "Limitless Paper in a Paperless World",
    domains: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["dundermifflininc.com", "limitlesspaper.com"]),
    external_id: 8739674733,
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateAccount200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/accounts/acc_76",
      related: {
        contacts:
          "https://yourCompany.api.frontapp.com/accounts/acc_76/contacts",
      },
    },
    id: "acc_76",
    name: "Dunder Mifflin, Inc.",
    logo_url:
      "https://yourCompany.api.frontapp.com/accounts/acc_aq/logo-1654309308278",
    description: "Limitless Paper in a Paperless World",
    domains: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["dundermifflininc.com", "limitlesspaper.com"]),
    external_id: 8739674733,
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListAccountContacts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getCreateAnalyticsExport201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/analytics/exports/exp_o9y1a",
    },
    status: "running",
    progress: 20,
    url: "https://api.frontapp.com/analytics/exports/exp_o9y1a/download",
    filename: "export-messages-yourCompany-2023-07-19-212d-e55df0.csv",
    size: 26639,
    created_at: 1703103649.159,
    filters: faker.helpers.arrayElement([
      {
        tag_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        teammate_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        channel_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        inbox_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        team_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        account_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
    ]),
  }
}

export function getGetAnalyticsExport200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/analytics/exports/exp_o9y1a",
    },
    status: "running",
    progress: 20,
    url: "https://api.frontapp.com/analytics/exports/exp_o9y1a/download",
    filename: "export-messages-yourCompany-2023-07-19-212d-e55df0.csv",
    size: 26639,
    created_at: 1703103649.159,
    filters: faker.helpers.arrayElement([
      {
        tag_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        teammate_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        channel_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        inbox_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        team_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      {
        account_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
    ]),
  }
}

export function getCreateAnalyticsReport201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/analytics/reports/b45efa66237cc453252d9019449c7a64f5cfdb491b6c2c1d6df33c1050d60e33",
    },
    status: "done",
    progress: 100,
    metrics: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => null),
  }
}

export function getGetAnalyticsReport200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/analytics/reports/b45efa66237cc453252d9019449c7a64f5cfdb491b6c2c1d6df33c1050d60e33",
    },
    status: "done",
    progress: 100,
    metrics: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => null),
  }
}

export function getListChannels200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/channels",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/channels/cha_1gv4",
        related: {
          inbox: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
          owner: "https://yourCompany.api.frontapp.com/teams/jen_k30",
        },
      },
      id: "cha_1gv4",
      name: "Paper Sales Inbox",
      address: "sales@dundermifflin.com",
      types: "gmail",
      send_as: "sales@dundermifflin.com",
      settings: {
        undo_send_time: 15,
        all_teammates_can_reply: faker.datatype.boolean(),
      },
      is_private: faker.datatype.boolean(),
      is_valid: true,
    })),
  }
}

export function getGetChannel200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/channels/cha_1gv4",
      related: {
        inbox: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        owner: "https://yourCompany.api.frontapp.com/teams/jen_k30",
      },
    },
    id: "cha_1gv4",
    name: "Paper Sales Inbox",
    address: "sales@dundermifflin.com",
    types: "gmail",
    send_as: "sales@dundermifflin.com",
    settings: {
      undo_send_time: 15,
      all_teammates_can_reply: faker.datatype.boolean(),
    },
    is_private: faker.datatype.boolean(),
    is_valid: true,
  }
}

export function getCreateDraft200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
      related: {
        conversation:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        message_replied_to:
          "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
        message_seen:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
      },
    },
    id: "msg_1q15qmtq",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
    type: "email",
    is_inbound: faker.datatype.boolean(),
    draft_mode: "shared",
    error_type: faker.lorem.words(),
    version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
    created_at: 1701292639,
    subject: "Jim's pranks are getting out of hand",
    blurb: "It's high time we discuss the pranking culture in the office",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipients: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    })),
    body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
    text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    signature: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
    metadata: {
      intercom_url: "http://intercom.com",
      duration: 189,
      have_been_answered: faker.datatype.boolean(),
      external_id: "dkd84992kduo903",
      twitter_url: "https://twitter.com",
      is_retweet: true,
      have_been_retweeted: true,
      have_been_favorited: faker.datatype.boolean(),
      thread_ref: "t0930k9000-394",
      headers: {},
      chat_visitor_url: "https://yourCompany.com/products",
    },
  }
}

export function getReceiveCustomMessages202Response() {
  return {
    status: "accepted",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
  }
}

export function getCreateMessage202Response() {
  return {
    status: "accepted",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
  }
}

export function getValidateChannel202Response() {
  return {
    status: "accepted",
  }
}

export function getGetComment200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
        mentions:
          "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
      },
    },
    id: "com_1ywg3f2",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
    posted_at: 1698943401.378,
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_pinned: true,
  }
}

export function getUpdateComment200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
        mentions:
          "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
      },
    },
    id: "com_1ywg3f2",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
    posted_at: 1698943401.378,
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_pinned: true,
  }
}

export function getDownloadAttachmentForAComment200Response() {
  return {
    id: "fil_3q8a7mby",
    filename: "Andy_Anger_Management_Certificate.png",
    url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
    content_type: "image/png",
    size: 4405,
    metadata: {
      is_inline: true,
      cid: "526b45586d0e6b1c484afab63d1ef0be",
    },
  }
}

export function getListCommentMentions200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getAddCommentReply201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
        mentions:
          "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
      },
    },
    id: "com_1ywg3f2",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
    posted_at: 1698943401.378,
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_pinned: true,
  }
}

export function getListAllCompanyRules200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/rules",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
        related: {
          owner: faker.lorem.words(),
        },
      },
      id: "rul_58xhq",
      name: "Scranton new account workflow",
      actions: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => [
        "Assign to Pam",
        "Unassign from Michael",
        "Tag with Scranton is the Best Branch",
        "Tag with Michael is the Best Boss",
      ]),
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListCompanyTicketStatuses200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/company/statuses",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/company/statuses/sts_5z",
      },
      id: "sts_5z",
      name: "Open",
      category: "open",
      description: "New or currently being worked on",
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getGetTicketStatusById200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/company/statuses/sts_5z",
    },
    id: "sts_5z",
    name: "Open",
    category: "open",
    description: "New or currently being worked on",
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getListCompanyTags200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getCreateCompanyTag201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getListGroups200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListContactsInGroup200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getListContactLists200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListContactsInContactList200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getListContacts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getCreateContact201Response() {
  return {
    _links: {
      self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
      related: {
        notes:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
        conversations:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
        owner: faker.lorem.words(),
      },
    },
    id: "crd_3cgz4ge",
    name: "Dwight Schrute",
    description: "Assistant to the regional manager",
    avatar_url:
      "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
    groups: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    lists: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    handles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      handle: "dwight@limitlesspaper.com",
      source: "email",
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    is_private: true,
  }
}

export function getListContactCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getMergeContacts200Response() {
  return {
    _links: {
      self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
      related: {
        notes:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
        conversations:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
        owner: faker.lorem.words(),
      },
    },
    id: "crd_3cgz4ge",
    name: "Dwight Schrute",
    description: "Assistant to the regional manager",
    avatar_url:
      "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
    groups: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    lists: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    handles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      handle: "dwight@limitlesspaper.com",
      source: "email",
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    is_private: true,
  }
}

export function getGetContact200Response() {
  return {
    _links: {
      self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
      related: {
        notes:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
        conversations:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
        owner: faker.lorem.words(),
      },
    },
    id: "crd_3cgz4ge",
    name: "Dwight Schrute",
    description: "Assistant to the regional manager",
    avatar_url:
      "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
    groups: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    lists: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    handles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      handle: "dwight@limitlesspaper.com",
      source: "email",
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    is_private: true,
  }
}

export function getListContactConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getListNotes202Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts/crd_2okzojy/notes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      body: "Mrs. Allen is our most important client … because every client is our most important client.",
      created_at: 1701806790.536,
    })),
  }
}

export function getAddNote201Response() {
  return {
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    body: "Mrs. Allen is our most important client … because every client is our most important client.",
    created_at: 1701806790.536,
  }
}

export function getListConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getCreateConversation201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
      related: {
        events:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
        followers:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
        messages:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
        comments:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
        inboxes:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
        last_message:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
      },
    },
    id: "cnv_yo1kg5q",
    subject: "How to prank Dwight Schrute",
    status: "assigned",
    status_id: "sts_5x",
    status_category: "resolved",
    ticket_ids: ["TICKET-1"],
    assignee: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipient: {
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    },
    tags: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
      },
      id: "top_b2wpa",
      name: "JIRA-SCRAN-4567",
      type: "app_2f76b9ac738de158",
      external_url: "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    created_at: 1701292649.333,
    waiting_since: 1701292649.333,
    is_private: true,
    scheduled_reminders: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        },
      },
      created_at: 1701806790.536,
      scheduled_at: 1701874800,
      updated_at: 1701806790.536,
    })),
    metadata: {
      external_conversation_ids: ["JS3949", "JS9403"],
    },
  }
}

export function getListConversationCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getSearchConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations/search/:query:?page_token=d4d5f065c89f1284ea262fa6b19456239b0",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/search/:query:",
    },
    _total: 212,
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getGetConversationById200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
      related: {
        events:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
        followers:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
        messages:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
        comments:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
        inboxes:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
        last_message:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
      },
    },
    id: "cnv_yo1kg5q",
    subject: "How to prank Dwight Schrute",
    status: "assigned",
    status_id: "sts_5x",
    status_category: "resolved",
    ticket_ids: ["TICKET-1"],
    assignee: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipient: {
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    },
    tags: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
      },
      id: "top_b2wpa",
      name: "JIRA-SCRAN-4567",
      type: "app_2f76b9ac738de158",
      external_url: "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    created_at: 1701292649.333,
    waiting_since: 1701292649.333,
    is_private: true,
    scheduled_reminders: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        },
      },
      created_at: 1701806790.536,
      scheduled_at: 1701874800,
      updated_at: 1701806790.536,
    })),
    metadata: {
      external_conversation_ids: ["JS3949", "JS9403"],
    },
  }
}

export function getListConversationComments200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/comments",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
          mentions:
            "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
        },
      },
      id: "com_1ywg3f2",
      author: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
      posted_at: 1698943401.378,
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      is_pinned: true,
    })),
  }
}

export function getAddComment201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
        mentions:
          "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
      },
    },
    id: "com_1ywg3f2",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
    posted_at: 1698943401.378,
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_pinned: true,
  }
}

export function getListConversationDrafts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages?page_token=klsljs8023j09suidfjlsjiei00043lllwww998303dkef0g",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
        related: {
          conversation:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
          message_replied_to:
            "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
          message_seen:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
        },
      },
      id: "msg_1q15qmtq",
      message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
      type: "email",
      is_inbound: faker.datatype.boolean(),
      draft_mode: "shared",
      error_type: faker.lorem.words(),
      version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
      created_at: 1701292639,
      subject: "Jim's pranks are getting out of hand",
      blurb: "It's high time we discuss the pranking culture in the office",
      author: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipients: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      })),
      body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
      text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      signature: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
          related: {
            owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
          },
        },
        id: "sig_6rrv2",
        name: "Finer Things Club signature",
        body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
        sender_info: { "[object Object]": null },
        is_visible_for_all_teammate_channels: true,
        is_default: faker.datatype.boolean(),
        is_private: true,
        channel_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      metadata: {
        intercom_url: "http://intercom.com",
        duration: 189,
        have_been_answered: faker.datatype.boolean(),
        external_id: "dkd84992kduo903",
        twitter_url: "https://twitter.com",
        is_retweet: true,
        have_been_retweeted: true,
        have_been_favorited: faker.datatype.boolean(),
        thread_ref: "t0930k9000-394",
        headers: {},
        chat_visitor_url: "https://yourCompany.com/products",
      },
    })),
  }
}

export function getCreateDraftReply200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
      related: {
        conversation:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        message_replied_to:
          "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
        message_seen:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
      },
    },
    id: "msg_1q15qmtq",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
    type: "email",
    is_inbound: faker.datatype.boolean(),
    draft_mode: "shared",
    error_type: faker.lorem.words(),
    version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
    created_at: 1701292639,
    subject: "Jim's pranks are getting out of hand",
    blurb: "It's high time we discuss the pranking culture in the office",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipients: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    })),
    body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
    text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    signature: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
    metadata: {
      intercom_url: "http://intercom.com",
      duration: 189,
      have_been_answered: faker.datatype.boolean(),
      external_id: "dkd84992kduo903",
      twitter_url: "https://twitter.com",
      is_retweet: true,
      have_been_retweeted: true,
      have_been_favorited: faker.datatype.boolean(),
      thread_ref: "t0930k9000-394",
      headers: {},
      chat_visitor_url: "https://yourCompany.com/products",
    },
  }
}

export function getListConversationEvents200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/events?page_token=2d018a5809eb90d349bc08c52cb1f4987bef",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/events",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/events/evt_4ckcra8e",
      },
      id: "evt_4ckcra8e",
      type: "inbound",
      emitted_at: 1703102616,
      source: {
        _meta: {
          type: "inboxes",
        },
        data: faker.helpers.arrayElement([
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
              related: {
                owner: faker.lorem.words(),
              },
            },
            id: "rul_58xhq",
            name: "Scranton new account workflow",
            actions: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => [
              "Assign to Pam",
              "Unassign from Michael",
              "Tag with Scranton is the Best Branch",
              "Tag with Michael is the Best Boss",
            ]),
            is_private: faker.datatype.boolean(),
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => ({
            _links: {
              self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
              related: {
                teammates:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
                conversations:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
                channels:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
                owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
              },
            },
            id: "inb_1ix6",
            name: "The Dundies",
            is_private: faker.datatype.boolean(),
            is_public: true,
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          })),
        ]),
      },
      target: {
        _meta: {
          type: "inboxes",
        },
        data: faker.helpers.arrayElement([
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
              related: {
                teammates:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
                conversations:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
                channels:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
                owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
              },
            },
            id: "inb_1ix6",
            name: "The Dundies",
            is_private: faker.datatype.boolean(),
            is_public: true,
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
              related: {
                conversations:
                  "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
                owner:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
                parent_tag:
                  "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
                children:
                  "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
              },
            },
            id: "tag_2oxhvy",
            name: "Warehouse task",
            description: "Sitting on your biscuit, never having to risk it",
            highlight: faker.lorem.words(),
            is_private: faker.datatype.boolean(),
            is_visible_in_conversation_lists: true,
            created_at: 1682538996.583,
            updated_at: 1699575875.186,
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
              related: {
                conversations:
                  "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
                mentions:
                  "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
              },
            },
            id: "com_1ywg3f2",
            author: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
                related: {
                  inboxes:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                  conversations:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                  botSource:
                    "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
                },
              },
              id: "tea_6r55a",
              email: "michael.scott@dundermifflin.com",
              username: "PrisonMike",
              first_name: "Michael",
              last_name: "Scott",
              is_admin: true,
              is_available: faker.datatype.boolean(),
              is_blocked: faker.datatype.boolean(),
              type: faker.helpers.arrayElement([
                "user",
                "visitor",
                "rule",
                "macro",
                "API",
                "integration",
                "CSAT",
              ]),
              custom_fields: {
                city: "London, UK",
                isVIP: true,
                renewal_date: 1525417200,
                sla_time: 90,
                owner: "leela@planet-express.com",
                replyTo: "inb_55c8c149",
                "Job Title": "firefighter",
              },
            },
            body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
            posted_at: 1698943401.378,
            attachments: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              id: "fil_3q8a7mby",
              filename: "Andy_Anger_Management_Certificate.png",
              url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
              content_type: "image/png",
              size: 4405,
              metadata: {
                is_inline: true,
                cid: "526b45586d0e6b1c484afab63d1ef0be",
              },
            })),
            is_pinned: true,
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
              related: {
                conversation:
                  "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
                message_replied_to:
                  "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
                message_seen:
                  "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
              },
            },
            id: "msg_1q15qmtq",
            message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
            type: "email",
            is_inbound: faker.datatype.boolean(),
            draft_mode: "shared",
            error_type: faker.lorem.words(),
            version:
              "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
            created_at: 1701292639,
            subject: "Jim's pranks are getting out of hand",
            blurb:
              "It's high time we discuss the pranking culture in the office",
            author: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
                related: {
                  inboxes:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                  conversations:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                  botSource:
                    "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
                },
              },
              id: "tea_6r55a",
              email: "michael.scott@dundermifflin.com",
              username: "PrisonMike",
              first_name: "Michael",
              last_name: "Scott",
              is_admin: true,
              is_available: faker.datatype.boolean(),
              is_blocked: faker.datatype.boolean(),
              type: faker.helpers.arrayElement([
                "user",
                "visitor",
                "rule",
                "macro",
                "API",
                "integration",
                "CSAT",
              ]),
              custom_fields: {
                city: "London, UK",
                isVIP: true,
                renewal_date: 1525417200,
                sla_time: 90,
                owner: "leela@planet-express.com",
                replyTo: "inb_55c8c149",
                "Job Title": "firefighter",
              },
            },
            recipients: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              _links: {
                related: {
                  contact:
                    "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
                },
              },
              name: "Phyllis Lapin-Vance",
              handle: "purpleboss@limitlesspaper.com",
              role: "cc",
            })),
            body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
            text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
            attachments: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              id: "fil_3q8a7mby",
              filename: "Andy_Anger_Management_Certificate.png",
              url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
              content_type: "image/png",
              size: 4405,
              metadata: {
                is_inline: true,
                cid: "526b45586d0e6b1c484afab63d1ef0be",
              },
            })),
            signature: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
                related: {
                  owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
                },
              },
              id: "sig_6rrv2",
              name: "Finer Things Club signature",
              body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
              sender_info: { "[object Object]": null },
              is_visible_for_all_teammate_channels: true,
              is_default: faker.datatype.boolean(),
              is_private: true,
              channel_ids: [
                ...new Array(
                  faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
                ).keys(),
              ].map((_) => faker.lorem.words()),
            },
            metadata: {
              intercom_url: "http://intercom.com",
              duration: 189,
              have_been_answered: faker.datatype.boolean(),
              external_id: "dkd84992kduo903",
              twitter_url: "https://twitter.com",
              is_retweet: true,
              have_been_retweeted: true,
              have_been_favorited: faker.datatype.boolean(),
              thread_ref: "t0930k9000-394",
              headers: {},
              chat_visitor_url: "https://yourCompany.com/products",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
            },
            id: "top_b2wpa",
            name: "JIRA-SCRAN-4567",
            type: "app_2f76b9ac738de158",
            external_url:
              "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
        ]),
      },
      conversation: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
          related: {
            events:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
            followers:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
            messages:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
            comments:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
            inboxes:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
            last_message:
              "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
          },
        },
        id: "cnv_yo1kg5q",
        subject: "How to prank Dwight Schrute",
        status: "assigned",
        status_id: "sts_5x",
        status_category: "resolved",
        ticket_ids: ["TICKET-1"],
        assignee: {
          _links: {
            self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            related: {
              inboxes:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
              conversations:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
              botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
            },
          },
          id: "tea_6r55a",
          email: "michael.scott@dundermifflin.com",
          username: "PrisonMike",
          first_name: "Michael",
          last_name: "Scott",
          is_admin: true,
          is_available: faker.datatype.boolean(),
          is_blocked: faker.datatype.boolean(),
          type: faker.helpers.arrayElement([
            "user",
            "visitor",
            "rule",
            "macro",
            "API",
            "integration",
            "CSAT",
          ]),
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
        recipient: {
          _links: {
            related: {
              contact:
                "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
            },
          },
          name: "Phyllis Lapin-Vance",
          handle: "purpleboss@limitlesspaper.com",
          role: "cc",
        },
        tags: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
            related: {
              conversations:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
              owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
              parent_tag:
                "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
              children:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
            },
          },
          id: "tag_2oxhvy",
          name: "Warehouse task",
          description: "Sitting on your biscuit, never having to risk it",
          highlight: faker.lorem.words(),
          is_private: faker.datatype.boolean(),
          is_visible_in_conversation_lists: true,
          created_at: 1682538996.583,
          updated_at: 1699575875.186,
        })),
        links: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
          },
          id: "top_b2wpa",
          name: "JIRA-SCRAN-4567",
          type: "app_2f76b9ac738de158",
          external_url:
            "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        })),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
        created_at: 1701292649.333,
        waiting_since: 1701292649.333,
        is_private: true,
        scheduled_reminders: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            related: {
              owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            },
          },
          created_at: 1701806790.536,
          scheduled_at: 1701874800,
          updated_at: 1701806790.536,
        })),
        metadata: {
          external_conversation_ids: ["JS3949", "JS9403"],
        },
      },
    })),
  }
}

export function getListConversationFollowers200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListConversationInboxes200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListConversationMessages200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages?page_token=klsljs8023j09suidfjlsjiei00043lllwww998303dkef0g",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i/messages",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
        related: {
          conversation:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
          message_replied_to:
            "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
          message_seen:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
        },
      },
      id: "msg_1q15qmtq",
      message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
      type: "email",
      is_inbound: faker.datatype.boolean(),
      draft_mode: "shared",
      error_type: faker.lorem.words(),
      version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
      created_at: 1701292639,
      subject: "Jim's pranks are getting out of hand",
      blurb: "It's high time we discuss the pranking culture in the office",
      author: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipients: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      })),
      body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
      text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      signature: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
          related: {
            owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
          },
        },
        id: "sig_6rrv2",
        name: "Finer Things Club signature",
        body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
        sender_info: { "[object Object]": null },
        is_visible_for_all_teammate_channels: true,
        is_default: faker.datatype.boolean(),
        is_private: true,
        channel_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => faker.lorem.words()),
      },
      metadata: {
        intercom_url: "http://intercom.com",
        duration: 189,
        have_been_answered: faker.datatype.boolean(),
        external_id: "dkd84992kduo903",
        twitter_url: "https://twitter.com",
        is_retweet: true,
        have_been_retweeted: true,
        have_been_favorited: faker.datatype.boolean(),
        thread_ref: "t0930k9000-394",
        headers: {},
        chat_visitor_url: "https://yourCompany.com/products",
      },
    })),
  }
}

export function getCreateMessageReply202Response() {
  return {
    status: "accepted",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
  }
}

export function getListCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getDownloadAttachment200Response() {
  return {
    id: "fil_3q8a7mby",
    filename: "Andy_Anger_Management_Certificate.png",
    url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
    content_type: "image/png",
    size: 4405,
    metadata: {
      is_inline: true,
      cid: "526b45586d0e6b1c484afab63d1ef0be",
    },
  }
}

export function getEditDraft200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
      related: {
        conversation:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        message_replied_to:
          "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
        message_seen:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
      },
    },
    id: "msg_1q15qmtq",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
    type: "email",
    is_inbound: faker.datatype.boolean(),
    draft_mode: "shared",
    error_type: faker.lorem.words(),
    version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
    created_at: 1701292639,
    subject: "Jim's pranks are getting out of hand",
    blurb: "It's high time we discuss the pranking culture in the office",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipients: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    })),
    body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
    text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    signature: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
    metadata: {
      intercom_url: "http://intercom.com",
      duration: 189,
      have_been_answered: faker.datatype.boolean(),
      external_id: "dkd84992kduo903",
      twitter_url: "https://twitter.com",
      is_retweet: true,
      have_been_retweeted: true,
      have_been_favorited: faker.datatype.boolean(),
      thread_ref: "t0930k9000-394",
      headers: {},
      chat_visitor_url: "https://yourCompany.com/products",
    },
  }
}

export function getListEvents200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/events?page_token=2d018a5809eb90d349bc08c52cb1f4987bef",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/events",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/events/evt_4ckcra8e",
      },
      id: "evt_4ckcra8e",
      type: "inbound",
      emitted_at: 1703102616,
      source: {
        _meta: {
          type: "inboxes",
        },
        data: faker.helpers.arrayElement([
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
              related: {
                owner: faker.lorem.words(),
              },
            },
            id: "rul_58xhq",
            name: "Scranton new account workflow",
            actions: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => [
              "Assign to Pam",
              "Unassign from Michael",
              "Tag with Scranton is the Best Branch",
              "Tag with Michael is the Best Boss",
            ]),
            is_private: faker.datatype.boolean(),
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => ({
            _links: {
              self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
              related: {
                teammates:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
                conversations:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
                channels:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
                owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
              },
            },
            id: "inb_1ix6",
            name: "The Dundies",
            is_private: faker.datatype.boolean(),
            is_public: true,
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          })),
        ]),
      },
      target: {
        _meta: {
          type: "inboxes",
        },
        data: faker.helpers.arrayElement([
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
              related: {
                teammates:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
                conversations:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
                channels:
                  "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
                owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
              },
            },
            id: "inb_1ix6",
            name: "The Dundies",
            is_private: faker.datatype.boolean(),
            is_public: true,
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
              related: {
                conversations:
                  "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
                owner:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
                parent_tag:
                  "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
                children:
                  "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
              },
            },
            id: "tag_2oxhvy",
            name: "Warehouse task",
            description: "Sitting on your biscuit, never having to risk it",
            highlight: faker.lorem.words(),
            is_private: faker.datatype.boolean(),
            is_visible_in_conversation_lists: true,
            created_at: 1682538996.583,
            updated_at: 1699575875.186,
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
              related: {
                conversations:
                  "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
                mentions:
                  "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
              },
            },
            id: "com_1ywg3f2",
            author: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
                related: {
                  inboxes:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                  conversations:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                  botSource:
                    "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
                },
              },
              id: "tea_6r55a",
              email: "michael.scott@dundermifflin.com",
              username: "PrisonMike",
              first_name: "Michael",
              last_name: "Scott",
              is_admin: true,
              is_available: faker.datatype.boolean(),
              is_blocked: faker.datatype.boolean(),
              type: faker.helpers.arrayElement([
                "user",
                "visitor",
                "rule",
                "macro",
                "API",
                "integration",
                "CSAT",
              ]),
              custom_fields: {
                city: "London, UK",
                isVIP: true,
                renewal_date: 1525417200,
                sla_time: 90,
                owner: "leela@planet-express.com",
                replyTo: "inb_55c8c149",
                "Job Title": "firefighter",
              },
            },
            body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
            posted_at: 1698943401.378,
            attachments: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              id: "fil_3q8a7mby",
              filename: "Andy_Anger_Management_Certificate.png",
              url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
              content_type: "image/png",
              size: 4405,
              metadata: {
                is_inline: true,
                cid: "526b45586d0e6b1c484afab63d1ef0be",
              },
            })),
            is_pinned: true,
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
              related: {
                conversation:
                  "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
                message_replied_to:
                  "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
                message_seen:
                  "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
              },
            },
            id: "msg_1q15qmtq",
            message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
            type: "email",
            is_inbound: faker.datatype.boolean(),
            draft_mode: "shared",
            error_type: faker.lorem.words(),
            version:
              "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
            created_at: 1701292639,
            subject: "Jim's pranks are getting out of hand",
            blurb:
              "It's high time we discuss the pranking culture in the office",
            author: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
                related: {
                  inboxes:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                  conversations:
                    "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                  botSource:
                    "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
                },
              },
              id: "tea_6r55a",
              email: "michael.scott@dundermifflin.com",
              username: "PrisonMike",
              first_name: "Michael",
              last_name: "Scott",
              is_admin: true,
              is_available: faker.datatype.boolean(),
              is_blocked: faker.datatype.boolean(),
              type: faker.helpers.arrayElement([
                "user",
                "visitor",
                "rule",
                "macro",
                "API",
                "integration",
                "CSAT",
              ]),
              custom_fields: {
                city: "London, UK",
                isVIP: true,
                renewal_date: 1525417200,
                sla_time: 90,
                owner: "leela@planet-express.com",
                replyTo: "inb_55c8c149",
                "Job Title": "firefighter",
              },
            },
            recipients: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              _links: {
                related: {
                  contact:
                    "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
                },
              },
              name: "Phyllis Lapin-Vance",
              handle: "purpleboss@limitlesspaper.com",
              role: "cc",
            })),
            body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
            text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
            attachments: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => ({
              id: "fil_3q8a7mby",
              filename: "Andy_Anger_Management_Certificate.png",
              url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
              content_type: "image/png",
              size: 4405,
              metadata: {
                is_inline: true,
                cid: "526b45586d0e6b1c484afab63d1ef0be",
              },
            })),
            signature: {
              _links: {
                self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
                related: {
                  owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
                },
              },
              id: "sig_6rrv2",
              name: "Finer Things Club signature",
              body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
              sender_info: { "[object Object]": null },
              is_visible_for_all_teammate_channels: true,
              is_default: faker.datatype.boolean(),
              is_private: true,
              channel_ids: [
                ...new Array(
                  faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
                ).keys(),
              ].map((_) => faker.lorem.words()),
            },
            metadata: {
              intercom_url: "http://intercom.com",
              duration: 189,
              have_been_answered: faker.datatype.boolean(),
              external_id: "dkd84992kduo903",
              twitter_url: "https://twitter.com",
              is_retweet: true,
              have_been_retweeted: true,
              have_been_favorited: faker.datatype.boolean(),
              thread_ref: "t0930k9000-394",
              headers: {},
              chat_visitor_url: "https://yourCompany.com/products",
            },
          },
          {
            _links: {
              self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
            },
            id: "top_b2wpa",
            name: "JIRA-SCRAN-4567",
            type: "app_2f76b9ac738de158",
            external_url:
              "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
        ]),
      },
      conversation: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
          related: {
            events:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
            followers:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
            messages:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
            comments:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
            inboxes:
              "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
            last_message:
              "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
          },
        },
        id: "cnv_yo1kg5q",
        subject: "How to prank Dwight Schrute",
        status: "assigned",
        status_id: "sts_5x",
        status_category: "resolved",
        ticket_ids: ["TICKET-1"],
        assignee: {
          _links: {
            self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            related: {
              inboxes:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
              conversations:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
              botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
            },
          },
          id: "tea_6r55a",
          email: "michael.scott@dundermifflin.com",
          username: "PrisonMike",
          first_name: "Michael",
          last_name: "Scott",
          is_admin: true,
          is_available: faker.datatype.boolean(),
          is_blocked: faker.datatype.boolean(),
          type: faker.helpers.arrayElement([
            "user",
            "visitor",
            "rule",
            "macro",
            "API",
            "integration",
            "CSAT",
          ]),
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
        recipient: {
          _links: {
            related: {
              contact:
                "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
            },
          },
          name: "Phyllis Lapin-Vance",
          handle: "purpleboss@limitlesspaper.com",
          role: "cc",
        },
        tags: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
            related: {
              conversations:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
              owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
              parent_tag:
                "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
              children:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
            },
          },
          id: "tag_2oxhvy",
          name: "Warehouse task",
          description: "Sitting on your biscuit, never having to risk it",
          highlight: faker.lorem.words(),
          is_private: faker.datatype.boolean(),
          is_visible_in_conversation_lists: true,
          created_at: 1682538996.583,
          updated_at: 1699575875.186,
        })),
        links: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
          },
          id: "top_b2wpa",
          name: "JIRA-SCRAN-4567",
          type: "app_2f76b9ac738de158",
          external_url:
            "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        })),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
        created_at: 1701292649.333,
        waiting_since: 1701292649.333,
        is_private: true,
        scheduled_reminders: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            related: {
              owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            },
          },
          created_at: 1701806790.536,
          scheduled_at: 1701874800,
          updated_at: 1701806790.536,
        })),
        metadata: {
          external_conversation_ids: ["JS3949", "JS9403"],
        },
      },
    })),
  }
}

export function getGetEvent200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/events/evt_4ckcra8e",
    },
    id: "evt_4ckcra8e",
    type: "inbound",
    emitted_at: 1703102616,
    source: {
      _meta: {
        type: "inboxes",
      },
      data: faker.helpers.arrayElement([
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
            related: {
              owner: faker.lorem.words(),
            },
          },
          id: "rul_58xhq",
          name: "Scranton new account workflow",
          actions: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => [
            "Assign to Pam",
            "Unassign from Michael",
            "Tag with Scranton is the Best Branch",
            "Tag with Michael is the Best Boss",
          ]),
          is_private: faker.datatype.boolean(),
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            related: {
              inboxes:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
              conversations:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
              botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
            },
          },
          id: "tea_6r55a",
          email: "michael.scott@dundermifflin.com",
          username: "PrisonMike",
          first_name: "Michael",
          last_name: "Scott",
          is_admin: true,
          is_available: faker.datatype.boolean(),
          is_blocked: faker.datatype.boolean(),
          type: faker.helpers.arrayElement([
            "user",
            "visitor",
            "rule",
            "macro",
            "API",
            "integration",
            "CSAT",
          ]),
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
        [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
          ).keys(),
        ].map((_) => ({
          _links: {
            self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
            related: {
              teammates:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
              conversations:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
              channels:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
              owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
            },
          },
          id: "inb_1ix6",
          name: "The Dundies",
          is_private: faker.datatype.boolean(),
          is_public: true,
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        })),
      ]),
    },
    target: {
      _meta: {
        type: "inboxes",
      },
      data: faker.helpers.arrayElement([
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
            related: {
              inboxes:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
              conversations:
                "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
              botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
            },
          },
          id: "tea_6r55a",
          email: "michael.scott@dundermifflin.com",
          username: "PrisonMike",
          first_name: "Michael",
          last_name: "Scott",
          is_admin: true,
          is_available: faker.datatype.boolean(),
          is_blocked: faker.datatype.boolean(),
          type: faker.helpers.arrayElement([
            "user",
            "visitor",
            "rule",
            "macro",
            "API",
            "integration",
            "CSAT",
          ]),
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
            related: {
              teammates:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
              conversations:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
              channels:
                "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
              owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
            },
          },
          id: "inb_1ix6",
          name: "The Dundies",
          is_private: faker.datatype.boolean(),
          is_public: true,
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
            related: {
              conversations:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
              owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
              parent_tag:
                "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
              children:
                "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
            },
          },
          id: "tag_2oxhvy",
          name: "Warehouse task",
          description: "Sitting on your biscuit, never having to risk it",
          highlight: faker.lorem.words(),
          is_private: faker.datatype.boolean(),
          is_visible_in_conversation_lists: true,
          created_at: 1682538996.583,
          updated_at: 1699575875.186,
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2",
            related: {
              conversations:
                "https://yourCompany.api.frontapp.com/conversations/cnv_y4xb93i",
              mentions:
                "https://yourCompany.api.frontapp.com/comments/com_1ywg3f2/mentions",
            },
          },
          id: "com_1ywg3f2",
          author: {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          body: "Sometimes I'll start a sentence and I don't even know where it's going. I just hope I find it along the way.",
          posted_at: 1698943401.378,
          attachments: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => ({
            id: "fil_3q8a7mby",
            filename: "Andy_Anger_Management_Certificate.png",
            url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
            content_type: "image/png",
            size: 4405,
            metadata: {
              is_inline: true,
              cid: "526b45586d0e6b1c484afab63d1ef0be",
            },
          })),
          is_pinned: true,
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
            related: {
              conversation:
                "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
              message_replied_to:
                "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
              message_seen:
                "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
            },
          },
          id: "msg_1q15qmtq",
          message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
          type: "email",
          is_inbound: faker.datatype.boolean(),
          draft_mode: "shared",
          error_type: faker.lorem.words(),
          version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
          created_at: 1701292639,
          subject: "Jim's pranks are getting out of hand",
          blurb: "It's high time we discuss the pranking culture in the office",
          author: {
            _links: {
              self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
              related: {
                inboxes:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
                conversations:
                  "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
                botSource:
                  "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
              },
            },
            id: "tea_6r55a",
            email: "michael.scott@dundermifflin.com",
            username: "PrisonMike",
            first_name: "Michael",
            last_name: "Scott",
            is_admin: true,
            is_available: faker.datatype.boolean(),
            is_blocked: faker.datatype.boolean(),
            type: faker.helpers.arrayElement([
              "user",
              "visitor",
              "rule",
              "macro",
              "API",
              "integration",
              "CSAT",
            ]),
            custom_fields: {
              city: "London, UK",
              isVIP: true,
              renewal_date: 1525417200,
              sla_time: 90,
              owner: "leela@planet-express.com",
              replyTo: "inb_55c8c149",
              "Job Title": "firefighter",
            },
          },
          recipients: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => ({
            _links: {
              related: {
                contact:
                  "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
              },
            },
            name: "Phyllis Lapin-Vance",
            handle: "purpleboss@limitlesspaper.com",
            role: "cc",
          })),
          body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
          text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
          attachments: [
            ...new Array(
              faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
            ).keys(),
          ].map((_) => ({
            id: "fil_3q8a7mby",
            filename: "Andy_Anger_Management_Certificate.png",
            url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
            content_type: "image/png",
            size: 4405,
            metadata: {
              is_inline: true,
              cid: "526b45586d0e6b1c484afab63d1ef0be",
            },
          })),
          signature: {
            _links: {
              self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
              related: {
                owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
              },
            },
            id: "sig_6rrv2",
            name: "Finer Things Club signature",
            body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
            sender_info: { "[object Object]": null },
            is_visible_for_all_teammate_channels: true,
            is_default: faker.datatype.boolean(),
            is_private: true,
            channel_ids: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
              ).keys(),
            ].map((_) => faker.lorem.words()),
          },
          metadata: {
            intercom_url: "http://intercom.com",
            duration: 189,
            have_been_answered: faker.datatype.boolean(),
            external_id: "dkd84992kduo903",
            twitter_url: "https://twitter.com",
            is_retweet: true,
            have_been_retweeted: true,
            have_been_favorited: faker.datatype.boolean(),
            thread_ref: "t0930k9000-394",
            headers: {},
            chat_visitor_url: "https://yourCompany.com/products",
          },
        },
        {
          _links: {
            self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
          },
          id: "top_b2wpa",
          name: "JIRA-SCRAN-4567",
          type: "app_2f76b9ac738de158",
          external_url:
            "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
          custom_fields: {
            city: "London, UK",
            isVIP: true,
            renewal_date: 1525417200,
            sla_time: 90,
            owner: "leela@planet-express.com",
            replyTo: "inb_55c8c149",
            "Job Title": "firefighter",
          },
        },
      ]),
    },
    conversation: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    },
  }
}

export function getListInboxes200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListInboxCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getGetInbox200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
        conversations:
          "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
        channels:
          "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
        owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
      },
    },
    id: "inb_1ix6",
    name: "The Dundies",
    is_private: faker.datatype.boolean(),
    is_public: true,
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
  }
}

export function getListInboxChannels200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/channels",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/channels/cha_1gv4",
        related: {
          inbox: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
          owner: "https://yourCompany.api.frontapp.com/teams/jen_k30",
        },
      },
      id: "cha_1gv4",
      name: "Paper Sales Inbox",
      address: "sales@dundermifflin.com",
      types: "gmail",
      send_as: "sales@dundermifflin.com",
      settings: {
        undo_send_time: 15,
        all_teammates_can_reply: faker.datatype.boolean(),
      },
      is_private: faker.datatype.boolean(),
      is_valid: true,
    })),
  }
}

export function getListInboxConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getImportInboxMessage202Response() {
  return {
    status: "accepted",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
  }
}

export function getListInboxAccess200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getGetAKnowledgeBaseArticle200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        content:
          "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12/content",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    locales: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["en", "es"]),
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getDeleteAnArticle200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        content:
          "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12/content",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    locales: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["en", "es"]),
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetKnowledgeBaseArticleWithContentInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateArticleContentInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getDownloadAttachmentFromAnArticle200Response() {
  return {
    id: "fil_3q8a7mby",
    filename: "Andy_Anger_Management_Certificate.png",
    url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
    content_type: "image/png",
    size: 4405,
    metadata: {
      is_inline: true,
      cid: "526b45586d0e6b1c484afab63d1ef0be",
    },
  }
}

export function getGetKnowledgeBaseArticleWithContentInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateArticleContentInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetAKnowledgeBaseCategory200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    slug: "/categories/2",
    is_hidden: faker.datatype.boolean(),
    locales: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["en", "es"]),
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListArticlesInACategory200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles?page_token=134287aba8eaa55cf366400c63300a75bab0c",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
        related: {
          knowledge_base:
            "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
          category:
            "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
          content:
            "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12/content",
        },
      },
      id: "kba_12",
      slug: "/articles/5",
      locales: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["en", "es"]),
      created_at: 1622672452.363,
      updated_at: 1654309308.278,
    })),
  }
}

export function getGetKnowledgeBaseCategoryContentInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateKnowledgeBaseCategoryInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetKnowledgeBaseCategoryWithContentInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateKnowledgeBaseCategoryInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListKnowledgeBases200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        related: {
          articles:
            "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
          categories:
            "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
        },
      },
      id: "knb_12",
      type: "internal",
      locales: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["en", "es"]),
      created_at: 1622672452.363,
      updated_at: 1654309308.278,
    })),
  }
}

export function getCreateAKnowledgeBase201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    name: "Company Help Center",
    status: "unpublished",
    type: "internal",
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetAKnowledgeBase200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    type: "internal",
    locales: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["en", "es"]),
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListArticlesInAKnowledgeBase200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles?page_token=134287aba8eaa55cf366400c63300a75bab0c",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/articles",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
        related: {
          knowledge_base:
            "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
          category:
            "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
          content:
            "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12/content",
        },
      },
      id: "kba_12",
      slug: "/articles/5",
      locales: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["en", "es"]),
      created_at: 1622672452.363,
      updated_at: 1654309308.278,
    })),
  }
}

export function getCreateArticleInAKnowledgeBaseInDefaultLocale201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListCategoriesInAKnowledgeBase200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/categories?page_token=134287aba8eaa55cf366400c63300a75bab0c",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_1/categories",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
        related: {
          knowledge_base:
            "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
          parent_category:
            "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
          articles:
            "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
        },
      },
      id: "kbc_12",
      slug: "/categories/2",
      is_hidden: faker.datatype.boolean(),
      locales: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["en", "es"]),
      created_at: 1622672452.363,
      updated_at: 1654309308.278,
    })),
  }
}

export function getCreateKnowledgeBaseCategoryInDefaultLocale201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetAKnowledgeBaseWithContentInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    name: "Company Help Center",
    status: "unpublished",
    type: "internal",
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateKnowledgeBaseInDefaultLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    name: "Company Help Center",
    status: "unpublished",
    type: "internal",
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getCreateArticleInAKnowledgeBaseInSpecifiedLocale201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_articles/kba_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        category:
          "https://yourCompany.api.frontapp.com/knowledge_base_category/kbc_12",
        last_editor: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      },
    },
    id: "kba_12",
    slug: "/articles/5",
    name: "Billing 101",
    status: "published",
    keywords: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["billing", "returns"]),
    content: "<h1>How to process a return</h1><p>To process a return...</p>",
    locale: "en",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    last_edited_at: 1622672452.363,
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getCreateKnowledgeBaseCategoryInSpecifiedLocale201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12",
      related: {
        knowledge_base:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
        parent_category:
          "https://yourCompany.api.frontapp.com/knowledge_base_catgories/kbc_10",
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_base_categories/kbc_12/articles",
      },
    },
    id: "kbc_12",
    name: "Getting started",
    description: "How to get started in Front",
    is_hidden: faker.datatype.boolean(),
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getGetAKnowledgeBaseWithContentInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    name: "Company Help Center",
    status: "unpublished",
    type: "internal",
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getUpdateKnowledgeBaseInSpecifiedLocale200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12",
      related: {
        articles:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/articles",
        categories:
          "https://yourCompany.api.frontapp.com/knowledge_bases/knb_12/categories",
      },
    },
    id: "knb_12",
    name: "Company Help Center",
    status: "unpublished",
    type: "internal",
    locale: "en",
    created_at: 1622672452.363,
    updated_at: 1654309308.278,
  }
}

export function getListLinks200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/links?page_token=4fcb1f8ca11971c5da59c21ea686fd50",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/links",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
      },
      id: "top_b2wpa",
      name: "JIRA-SCRAN-4567",
      type: "app_2f76b9ac738de158",
      external_url: "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getCreateLink201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
    },
    id: "top_b2wpa",
    name: "JIRA-SCRAN-4567",
    type: "app_2f76b9ac738de158",
    external_url: "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
  }
}

export function getListLinkCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getGetLink200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
    },
    id: "top_b2wpa",
    name: "JIRA-SCRAN-4567",
    type: "app_2f76b9ac738de158",
    external_url: "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
  }
}

export function getListLinkConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getApiTokenDetails200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/me",
    },
    id: "cmp_k30",
    name: "Dunder Mifflin Paper Company, Inc.",
  }
}

export function getListFolders200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
          child_folders:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
          child_answers:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
        },
      },
      id: "rsf_g2",
      name: "Complaints to Toby (or about Toby)",
      created_at: 1680300342.904,
      updated_at: 1688668654.501,
    })),
  }
}

export function getCreateFolder201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getGetFolder200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getUpdateFolder200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getDeleteFolder202Response() {
  return {
    status: "accepted",
    message_template_folder_id: "rsf_g2",
  }
}

export function getGetChildFolders200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
          child_folders:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
          child_answers:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
        },
      },
      id: "rsf_g2",
      name: "Complaints to Toby (or about Toby)",
      created_at: 1680300342.904,
      updated_at: 1688668654.501,
    })),
  }
}

export function getCreateChildFolder201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getGetChildTemplates200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
          child_folders:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
          child_answers:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
        },
      },
      id: "rsf_g2",
      name: "Complaints to Toby (or about Toby)",
      created_at: 1680300342.904,
      updated_at: 1688668654.501,
    })),
  }
}

export function getCreateChildTemplate201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListMessageTemplates200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_templates?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_templates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        },
      },
      id: "rsp_16yc",
      name: "Pam wedding planning complaint",
      subject: "Work time being used for wedding planning",
      body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      is_available_for_all_inboxes: true,
      inbox_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    })),
  }
}

export function getCreateMessageTemplate201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getGetMessageTemplate200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getUpdateMessageTemplate200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getDownloadAttachmentForAMessageTemplate200Response() {
  return {
    id: "fil_3q8a7mby",
    filename: "Andy_Anger_Management_Certificate.png",
    url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
    content_type: "image/png",
    size: 4405,
    metadata: {
      is_inline: true,
      cid: "526b45586d0e6b1c484afab63d1ef0be",
    },
  }
}

export function getGetMessage200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq",
      related: {
        conversation:
          "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        message_replied_to:
          "https://yourCompany.api.frontapp.com/messages/msg_2y67qldq",
        message_seen:
          "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq/seen",
      },
    },
    id: "msg_1q15qmtq",
    message_uid: "1eab543f84a0785f7b6b8967cck18f4d",
    type: "email",
    is_inbound: faker.datatype.boolean(),
    draft_mode: "shared",
    error_type: faker.lorem.words(),
    version: "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c",
    created_at: 1701292639,
    subject: "Jim's pranks are getting out of hand",
    blurb: "It's high time we discuss the pranking culture in the office",
    author: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    },
    recipients: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        related: {
          contact: "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
        },
      },
      name: "Phyllis Lapin-Vance",
      handle: "purpleboss@limitlesspaper.com",
      role: "cc",
    })),
    body: "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>",
    text: "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.",
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    signature: {
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    },
    metadata: {
      intercom_url: "http://intercom.com",
      duration: 189,
      have_been_answered: faker.datatype.boolean(),
      external_id: "dkd84992kduo903",
      twitter_url: "https://twitter.com",
      is_retweet: true,
      have_been_retweeted: true,
      have_been_favorited: faker.datatype.boolean(),
      thread_ref: "t0930k9000-394",
      headers: {},
      chat_visitor_url: "https://yourCompany.com/products",
    },
  }
}

export function getDownloadAttachmentForAMessage200Response() {
  return {
    id: "fil_3q8a7mby",
    filename: "Andy_Anger_Management_Certificate.png",
    url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
    content_type: "image/png",
    size: 4405,
    metadata: {
      is_inline: true,
      cid: "526b45586d0e6b1c484afab63d1ef0be",
    },
  }
}

export function getGetMessageSeenStatus200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen?page_token=jk7893fgeet644abnn39",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym/seen",
        related: {
          message: "https://yourCompany.api.frontapp.com/messages/msg_1p4lvjym",
        },
      },
      first_seen_at: 1701298738269,
      seen_by: {
        handle: "dwight@limitlesspaper.com",
        source: "email",
      },
    })),
  }
}

export function getListRules200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/rules",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
        related: {
          owner: faker.lorem.words(),
        },
      },
      id: "rul_58xhq",
      name: "Scranton new account workflow",
      actions: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => [
        "Assign to Pam",
        "Unassign from Michael",
        "Tag with Scranton is the Best Branch",
        "Tag with Michael is the Best Boss",
      ]),
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getGetRule200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
      related: {
        owner: faker.lorem.words(),
      },
    },
    id: "rul_58xhq",
    name: "Scranton new account workflow",
    actions: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => [
      "Assign to Pam",
      "Unassign from Michael",
      "Tag with Scranton is the Best Branch",
      "Tag with Michael is the Best Boss",
    ]),
    is_private: faker.datatype.boolean(),
  }
}

export function getListShifts200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
        },
      },
      id: "shf_1bri",
      name: "Scranton Business Park shifts",
      color: "green",
      timezone: "America/New_York",
      times: {
        mon: {
          start: "09:00",
          end: "17:00",
        },
        tue: {
          start: "09:00",
          end: "17:00",
        },
        wed: {
          start: "09:00",
          end: "17:00",
        },
        thu: {
          start: "09:00",
          end: "17:00",
        },
        fri: {
          start: "09:00",
          end: "17:00",
        },
        sat: {
          start: "09:00",
          end: "17:00",
        },
        sun: {
          start: "09:00",
          end: "17:00",
        },
      },
      created_at: 1606943265.298,
      updated_at: 1701878404.43,
    })),
  }
}

export function getCreateShift201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
        owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
      },
    },
    id: "shf_1bri",
    name: "Scranton Business Park shifts",
    color: "green",
    timezone: "America/New_York",
    times: {
      mon: {
        start: "09:00",
        end: "17:00",
      },
      tue: {
        start: "09:00",
        end: "17:00",
      },
      wed: {
        start: "09:00",
        end: "17:00",
      },
      thu: {
        start: "09:00",
        end: "17:00",
      },
      fri: {
        start: "09:00",
        end: "17:00",
      },
      sat: {
        start: "09:00",
        end: "17:00",
      },
      sun: {
        start: "09:00",
        end: "17:00",
      },
    },
    created_at: 1606943265.298,
    updated_at: 1701878404.43,
  }
}

export function getGetShift200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
        owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
      },
    },
    id: "shf_1bri",
    name: "Scranton Business Park shifts",
    color: "green",
    timezone: "America/New_York",
    times: {
      mon: {
        start: "09:00",
        end: "17:00",
      },
      tue: {
        start: "09:00",
        end: "17:00",
      },
      wed: {
        start: "09:00",
        end: "17:00",
      },
      thu: {
        start: "09:00",
        end: "17:00",
      },
      fri: {
        start: "09:00",
        end: "17:00",
      },
      sat: {
        start: "09:00",
        end: "17:00",
      },
      sun: {
        start: "09:00",
        end: "17:00",
      },
    },
    created_at: 1606943265.298,
    updated_at: 1701878404.43,
  }
}

export function getListShiftsTeammates200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getGetSignatures200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
      },
    },
    id: "sig_6rrv2",
    name: "Finer Things Club signature",
    body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
    sender_info: { "[object Object]": null },
    is_visible_for_all_teammate_channels: true,
    is_default: faker.datatype.boolean(),
    is_private: true,
    channel_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getUpdateSignature200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
      },
    },
    id: "sig_6rrv2",
    name: "Finer Things Club signature",
    body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
    sender_info: { "[object Object]": null },
    is_visible_for_all_teammate_channels: true,
    is_default: faker.datatype.boolean(),
    is_private: true,
    channel_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListTags200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getCreateTag201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getGetTag200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getListTagChildren200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getCreateChildTag201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getListTaggedConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getListCompanyTeammateGroups200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammate_groups",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammate_groups/cir_123",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teammates",
          teams:
            "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teams",
          inboxes:
            "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/inboxes",
        },
      },
      id: "cir_123",
      name: "Sales team",
      description: "Best sales team ever",
      is_managed_by_scim: faker.datatype.boolean(),
      permissions: {
        contacts: {
          access: "contact_lists",
          contact_list_ids: ["grp_1", "grp_2"],
        },
      },
    })),
  }
}

export function getCreateCompanyTeammateGroup201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammate_groups/cir_123",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teammates",
        teams:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teams",
        inboxes:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/inboxes",
      },
    },
    id: "cir_123",
    name: "Sales team",
    description: "Best sales team ever",
    is_managed_by_scim: faker.datatype.boolean(),
    permissions: {
      contacts: {
        access: "contact_lists",
        contact_list_ids: ["grp_1", "grp_2"],
      },
    },
  }
}

export function getGetCompanyTeammateGroup200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammate_groups/cir_123",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teammates",
        teams:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/teams",
        inboxes:
          "https://yourCompany.api.frontapp.com/teammate_groups/cir_123/inboxes",
      },
    },
    id: "cir_123",
    name: "Sales team",
    description: "Best sales team ever",
    is_managed_by_scim: faker.datatype.boolean(),
    permissions: {
      contacts: {
        access: "contact_lists",
        contact_list_ids: ["grp_1", "grp_2"],
      },
    },
  }
}

export function getListCompanyTeammateGroupTeamInboxes200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListCompanyTeammateGroupTeammates200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListCompanyTeammateGroupTeams200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teams",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teams/tim_aqsa",
      },
      id: "tim_aqsa",
      name: "Stanley's crossword puzzle team",
    })),
  }
}

export function getListTeammates200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListTeammateCustomFields200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/custom_fields",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/custom_fields/fld_co0e",
      },
      id: "fld_co0e",
      name: "Customer plan",
      description: "The billing plan of the customer",
      type: "enum",
      values: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        value: "Enterprise",
        label: "Customer plan",
      })),
    })),
  }
}

export function getGetTeammate200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
      related: {
        inboxes:
          "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
        conversations:
          "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
        botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
      },
    },
    id: "tea_6r55a",
    email: "michael.scott@dundermifflin.com",
    username: "PrisonMike",
    first_name: "Michael",
    last_name: "Scott",
    is_admin: true,
    is_available: faker.datatype.boolean(),
    is_blocked: faker.datatype.boolean(),
    type: faker.helpers.arrayElement([
      "user",
      "visitor",
      "rule",
      "macro",
      "API",
      "integration",
      "CSAT",
    ]),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
  }
}

export function getListTeammateChannels200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/channels",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/channels/cha_1gv4",
        related: {
          inbox: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
          owner: "https://yourCompany.api.frontapp.com/teams/jen_k30",
        },
      },
      id: "cha_1gv4",
      name: "Paper Sales Inbox",
      address: "sales@dundermifflin.com",
      types: "gmail",
      send_as: "sales@dundermifflin.com",
      settings: {
        undo_send_time: 15,
        all_teammates_can_reply: faker.datatype.boolean(),
      },
      is_private: faker.datatype.boolean(),
      is_valid: true,
    })),
  }
}

export function getListTeammateGroups200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeammateContactLists200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeammateContacts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getCreateTeammateContact201Response() {
  return {
    _links: {
      self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
      related: {
        notes:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
        conversations:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
        owner: faker.lorem.words(),
      },
    },
    id: "crd_3cgz4ge",
    name: "Dwight Schrute",
    description: "Assistant to the regional manager",
    avatar_url:
      "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
    groups: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    lists: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    handles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      handle: "dwight@limitlesspaper.com",
      source: "email",
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    is_private: true,
  }
}

export function getListAssignedConversations200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/conversations?page_token=ce787da6f075740cf187d926f5e9f612bc7875763a8dd37d5",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/conversations",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q",
        related: {
          events:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/events",
          followers:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/followers",
          messages:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/messages",
          comments:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/comments",
          inboxes:
            "https://yourCompany.api.frontapp.com/conversations/cnv_yo1kg5q/inboxes",
          last_message:
            "https://yourCompany.api.frontapp.com/messages/msg_1q15qmtq?referer=conversation",
        },
      },
      id: "cnv_yo1kg5q",
      subject: "How to prank Dwight Schrute",
      status: "assigned",
      status_id: "sts_5x",
      status_category: "resolved",
      ticket_ids: ["TICKET-1"],
      assignee: {
        _links: {
          self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          related: {
            inboxes:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
            conversations:
              "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
            botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
          },
        },
        id: "tea_6r55a",
        email: "michael.scott@dundermifflin.com",
        username: "PrisonMike",
        first_name: "Michael",
        last_name: "Scott",
        is_admin: true,
        is_available: faker.datatype.boolean(),
        is_blocked: faker.datatype.boolean(),
        type: faker.helpers.arrayElement([
          "user",
          "visitor",
          "rule",
          "macro",
          "API",
          "integration",
          "CSAT",
        ]),
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      },
      recipient: {
        _links: {
          related: {
            contact:
              "https://yourCompany.api.frontapp.com/contacts/crd_2njtoem",
          },
        },
        name: "Phyllis Lapin-Vance",
        handle: "purpleboss@limitlesspaper.com",
        role: "cc",
      },
      tags: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
          related: {
            conversations:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
            parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
            children:
              "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
          },
        },
        id: "tag_2oxhvy",
        name: "Warehouse task",
        description: "Sitting on your biscuit, never having to risk it",
        highlight: faker.lorem.words(),
        is_private: faker.datatype.boolean(),
        is_visible_in_conversation_lists: true,
        created_at: 1682538996.583,
        updated_at: 1699575875.186,
      })),
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/links/top_b2wpa",
        },
        id: "top_b2wpa",
        name: "JIRA-SCRAN-4567",
        type: "app_2f76b9ac738de158",
        external_url:
          "https://dundermifflin.atlassian.net/browse/PB-SCRAN-4567",
        custom_fields: {
          city: "London, UK",
          isVIP: true,
          renewal_date: 1525417200,
          sla_time: 90,
          owner: "leela@planet-express.com",
          replyTo: "inb_55c8c149",
          "Job Title": "firefighter",
        },
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      created_at: 1701292649.333,
      waiting_since: 1701292649.333,
      is_private: true,
      scheduled_reminders: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          related: {
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
          },
        },
        created_at: 1701806790.536,
        scheduled_at: 1701874800,
        updated_at: 1701806790.536,
      })),
      metadata: {
        external_conversation_ids: ["JS3949", "JS9403"],
      },
    })),
  }
}

export function getListTeammateInboxes200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListTeammateFolders200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
          child_folders:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
          child_answers:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
        },
      },
      id: "rsf_g2",
      name: "Complaints to Toby (or about Toby)",
      created_at: 1680300342.904,
      updated_at: 1688668654.501,
    })),
  }
}

export function getCreateTeammateFolder201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getListTeammateMessageTemplates200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_templates?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_templates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        },
      },
      id: "rsp_16yc",
      name: "Pam wedding planning complaint",
      subject: "Work time being used for wedding planning",
      body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      is_available_for_all_inboxes: true,
      inbox_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    })),
  }
}

export function getCreateTeammateMessageTemplate201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListTeammateRules200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/rules",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
        related: {
          owner: faker.lorem.words(),
        },
      },
      id: "rul_58xhq",
      name: "Scranton new account workflow",
      actions: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => [
        "Assign to Pam",
        "Unassign from Michael",
        "Tag with Scranton is the Best Branch",
        "Tag with Michael is the Best Boss",
      ]),
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeammateShifts200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
        },
      },
      id: "shf_1bri",
      name: "Scranton Business Park shifts",
      color: "green",
      timezone: "America/New_York",
      times: {
        mon: {
          start: "09:00",
          end: "17:00",
        },
        tue: {
          start: "09:00",
          end: "17:00",
        },
        wed: {
          start: "09:00",
          end: "17:00",
        },
        thu: {
          start: "09:00",
          end: "17:00",
        },
        fri: {
          start: "09:00",
          end: "17:00",
        },
        sat: {
          start: "09:00",
          end: "17:00",
        },
        sun: {
          start: "09:00",
          end: "17:00",
        },
      },
      created_at: 1606943265.298,
      updated_at: 1701878404.43,
    })),
  }
}

export function getListTeammateSignatures200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/signatures?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    })),
  }
}

export function getCreateTeammateSignature201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
      },
    },
    id: "sig_6rrv2",
    name: "Finer Things Club signature",
    body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
    sender_info: { "[object Object]": null },
    is_visible_for_all_teammate_channels: true,
    is_default: faker.datatype.boolean(),
    is_private: true,
    channel_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListTeammateTags200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getCreateTeammateTag201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}

export function getListTeams200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teams",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teams/tim_aqsa",
      },
      id: "tim_aqsa",
      name: "Stanley's crossword puzzle team",
    })),
  }
}

export function getGetTeam200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/teams/tim_aqsa",
    },
    id: "tim_aqsa",
    name: "Stanley's crossword puzzle team",
    inboxes: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
    members: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/teammates/tea_6r55a",
        related: {
          inboxes:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/inboxes",
          conversations:
            "https://yourCompany.api.frontapp.com/teammates/tea_6r55a/conversations",
          botSource: "https://yourCompany.api.frontapp.com/rules/rul_6r55a",
        },
      },
      id: "tea_6r55a",
      email: "michael.scott@dundermifflin.com",
      username: "PrisonMike",
      first_name: "Michael",
      last_name: "Scott",
      is_admin: true,
      is_available: faker.datatype.boolean(),
      is_blocked: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([
        "user",
        "visitor",
        "rule",
        "macro",
        "API",
        "integration",
        "CSAT",
      ]),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListTeamChannels200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/channels",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/channels/cha_1gv4",
        related: {
          inbox: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
          owner: "https://yourCompany.api.frontapp.com/teams/jen_k30",
        },
      },
      id: "cha_1gv4",
      name: "Paper Sales Inbox",
      address: "sales@dundermifflin.com",
      types: "gmail",
      send_as: "sales@dundermifflin.com",
      settings: {
        undo_send_time: 15,
        all_teammates_can_reply: faker.datatype.boolean(),
      },
      is_private: faker.datatype.boolean(),
      is_valid: true,
    })),
  }
}

export function getListTeamGroups200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeamContactLists200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/contact_lists",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeamContacts200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/contacts?page_token=e0b5767cb0f1100743d46f67fcd765caac2ed",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/contacts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
        related: {
          notes:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
          conversations:
            "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
          owner: faker.lorem.words(),
        },
      },
      id: "crd_3cgz4ge",
      name: "Dwight Schrute",
      description: "Assistant to the regional manager",
      avatar_url:
        "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
      links: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
      groups: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      lists: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        _links: {
          self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
          related: {
            contacts:
              "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
            owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
          },
        },
        id: "grp_3j342",
        name: "Party Planning Committee",
        is_private: faker.datatype.boolean(),
      })),
      handles: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        handle: "dwight@limitlesspaper.com",
        source: "email",
      })),
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
      is_private: true,
    })),
  }
}

export function getCreateTeamContact201Response() {
  return {
    _links: {
      self: 'https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge"',
      related: {
        notes:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/notes",
        conversations:
          "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/conversations",
        owner: faker.lorem.words(),
      },
    },
    id: "crd_3cgz4ge",
    name: "Dwight Schrute",
    description: "Assistant to the regional manager",
    avatar_url:
      "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707",
    links: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ["https://shrutefarms.com", "https://eatyourbeets.com"]),
    groups: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    lists: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342",
        related: {
          contacts:
            "https://yourCompany.api.frontapp.com/contact_lists/grp_3j342/contacts",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_e35u",
        },
      },
      id: "grp_3j342",
      name: "Party Planning Committee",
      is_private: faker.datatype.boolean(),
    })),
    handles: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      handle: "dwight@limitlesspaper.com",
      source: "email",
    })),
    custom_fields: {
      city: "London, UK",
      isVIP: true,
      renewal_date: 1525417200,
      sla_time: 90,
      owner: "leela@planet-express.com",
      replyTo: "inb_55c8c149",
      "Job Title": "firefighter",
    },
    is_private: true,
  }
}

export function getListTeamInboxes200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/inboxes",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/teammates",
          conversations:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/conversations",
          channels:
            "https://yourCompany.api.frontapp.com/inboxes/inb_1ix6/channels",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "inb_1ix6",
      name: "The Dundies",
      is_private: faker.datatype.boolean(),
      is_public: true,
      custom_fields: {
        city: "London, UK",
        isVIP: true,
        renewal_date: 1525417200,
        sla_time: 90,
        owner: "leela@planet-express.com",
        replyTo: "inb_55c8c149",
        "Job Title": "firefighter",
      },
    })),
  }
}

export function getListTeamFolders200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_template_folders?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
          child_folders:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
          child_answers:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
        },
      },
      id: "rsf_g2",
      name: "Complaints to Toby (or about Toby)",
      created_at: 1680300342.904,
      updated_at: 1688668654.501,
    })),
  }
}

export function getCreateTeamFolder201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g1",
        child_folders:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_template_folders",
        child_answers:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2/message_templates",
      },
    },
    id: "rsf_g2",
    name: "Complaints to Toby (or about Toby)",
    created_at: 1680300342.904,
    updated_at: 1688668654.501,
  }
}

export function getListTeamMessageTemplates200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/message_templates?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/message_templates",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
          parent_folder:
            "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
        },
      },
      id: "rsp_16yc",
      name: "Pam wedding planning complaint",
      subject: "Work time being used for wedding planning",
      body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
      attachments: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        id: "fil_3q8a7mby",
        filename: "Andy_Anger_Management_Certificate.png",
        url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
        content_type: "image/png",
        size: 4405,
        metadata: {
          is_inline: true,
          cid: "526b45586d0e6b1c484afab63d1ef0be",
        },
      })),
      is_available_for_all_inboxes: true,
      inbox_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    })),
  }
}

export function getCreateTeamMessageTemplate201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/responses/rsp_16yc",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_s47",
        parent_folder:
          "https://yourCompany.api.frontapp.com/message_template_folders/rsf_g2",
      },
    },
    id: "rsp_16yc",
    name: "Pam wedding planning complaint",
    subject: "Work time being used for wedding planning",
    body: '<div><p>Pam is spending time planning her <span style="color:red;">wedding</span> at the office. This message <b>WAS NOT</b> sent by Angela.</p></div>\n',
    attachments: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "fil_3q8a7mby",
      filename: "Andy_Anger_Management_Certificate.png",
      url: "https://yourCompany.api.frontapp.com/download/fil_3q8a7mby",
      content_type: "image/png",
      size: 4405,
      metadata: {
        is_inline: true,
        cid: "526b45586d0e6b1c484afab63d1ef0be",
      },
    })),
    is_available_for_all_inboxes: true,
    inbox_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListTeamRules200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/rules",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/rules/rul_58xhq",
        related: {
          owner: faker.lorem.words(),
        },
      },
      id: "rul_58xhq",
      name: "Scranton new account workflow",
      actions: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => [
        "Assign to Pam",
        "Unassign from Michael",
        "Tag with Scranton is the Best Branch",
        "Tag with Michael is the Best Boss",
      ]),
      is_private: faker.datatype.boolean(),
    })),
  }
}

export function getListTeamShifts200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
        related: {
          teammates:
            "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
          owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
        },
      },
      id: "shf_1bri",
      name: "Scranton Business Park shifts",
      color: "green",
      timezone: "America/New_York",
      times: {
        mon: {
          start: "09:00",
          end: "17:00",
        },
        tue: {
          start: "09:00",
          end: "17:00",
        },
        wed: {
          start: "09:00",
          end: "17:00",
        },
        thu: {
          start: "09:00",
          end: "17:00",
        },
        fri: {
          start: "09:00",
          end: "17:00",
        },
        sat: {
          start: "09:00",
          end: "17:00",
        },
        sun: {
          start: "09:00",
          end: "17:00",
        },
      },
      created_at: 1606943265.298,
      updated_at: 1701878404.43,
    })),
  }
}

export function getCreateTeamShift201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/shifts/shf_1bri",
      related: {
        teammates:
          "https://yourCompany.api.frontapp.com/shifts/shf_1bri/teammates",
        owner: "https://yourCompany.api.frontapp.com/teams/tim_4kxji",
      },
    },
    id: "shf_1bri",
    name: "Scranton Business Park shifts",
    color: "green",
    timezone: "America/New_York",
    times: {
      mon: {
        start: "09:00",
        end: "17:00",
      },
      tue: {
        start: "09:00",
        end: "17:00",
      },
      wed: {
        start: "09:00",
        end: "17:00",
      },
      thu: {
        start: "09:00",
        end: "17:00",
      },
      fri: {
        start: "09:00",
        end: "17:00",
      },
      sat: {
        start: "09:00",
        end: "17:00",
      },
      sun: {
        start: "09:00",
        end: "17:00",
      },
    },
    created_at: 1606943265.298,
    updated_at: 1701878404.43,
  }
}

export function getListTeamSignatures200Response() {
  return {
    _pagination: {
      next: "https://yourCompany.api.frontapp.com/signatures?page_token=9fa92a7f385fd7be43f7153055b30e6d",
    },
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
        related: {
          owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
        },
      },
      id: "sig_6rrv2",
      name: "Finer Things Club signature",
      body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
      sender_info: { "[object Object]": null },
      is_visible_for_all_teammate_channels: true,
      is_default: faker.datatype.boolean(),
      is_private: true,
      channel_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => faker.lorem.words()),
    })),
  }
}

export function getCreateTeamSignature201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/signatures/sig_6rrv2",
      related: {
        owner: "https://yourCompany.api.frontapp.com/teams/tim_k30",
      },
    },
    id: "sig_6rrv2",
    name: "Finer Things Club signature",
    body: "<div>—<br />{{user.name}}<br />No paper, no plastic, and no work talk allowed<br /></div>",
    sender_info: { "[object Object]": null },
    is_visible_for_all_teammate_channels: true,
    is_default: faker.datatype.boolean(),
    is_private: true,
    channel_ids: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
  }
}

export function getListTeamTags200Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags",
    },
    _results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      _links: {
        self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
        related: {
          conversations:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
          owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
          parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
          children:
            "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
        },
      },
      id: "tag_2oxhvy",
      name: "Warehouse task",
      description: "Sitting on your biscuit, never having to risk it",
      highlight: faker.lorem.words(),
      is_private: faker.datatype.boolean(),
      is_visible_in_conversation_lists: true,
      created_at: 1682538996.583,
      updated_at: 1699575875.186,
    })),
  }
}

export function getCreateTeamTag201Response() {
  return {
    _links: {
      self: "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy",
      related: {
        conversations:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/conversations",
        owner: "https://yourCompany.api.frontapp.com/teammates/tea_6jydq",
        parent_tag: "https://yourCompany.api.frontapp.com/tags/tag_3h07ym",
        children:
          "https://yourCompany.api.frontapp.com/tags/tag_2oxhvy/children",
      },
    },
    id: "tag_2oxhvy",
    name: "Warehouse task",
    description: "Sitting on your biscuit, never having to risk it",
    highlight: faker.lorem.words(),
    is_private: faker.datatype.boolean(),
    is_visible_in_conversation_lists: true,
    created_at: 1682538996.583,
    updated_at: 1699575875.186,
  }
}
