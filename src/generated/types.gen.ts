// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    /**
     * Name of the Account
     */
    name?: string;
    /**
     * Account description
     */
    description?: string;
    /**
     * List of domains associated with the Account
     */
    domains?: Array<string>;
    /**
     * ID of the Account in an external system
     */
    external_id?: string;
    custom_fields?: CustomFieldParameter;
};

export type AccountIds = {
    account_ids: Array<ResourceId>;
};

export type AccountPatch = {
    /**
     * Name of the Account
     */
    name?: string;
    /**
     * Account description
     */
    description?: string;
    /**
     * List of domains associated with the Account
     */
    domains?: Array<string>;
    custom_fields?: CustomFieldParameter;
};

export type AccountResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to contacts associated to the account
             */
            contacts?: string;
        };
    };
    /**
     * Unique identifier of the account
     */
    id?: string;
    /**
     * Account name
     */
    name?: string;
    /**
     * URL of the Account's logo
     */
    logo_url?: string;
    /**
     * Account Description
     */
    description?: string;
    /**
     * List of domains associated to the Account
     */
    domains?: Array<string>;
    /**
     * ID of the Account in an External system, such as your backoffice system or CRM
     */
    external_id?: string;
    custom_fields?: CustomFieldParameter;
    /**
     * Timestamp when the account was created
     */
    created_at?: number;
    /**
     * Timestamp when the account was updated
     */
    updated_at?: number;
};

export type AddContactsToList = {
    /**
     * List of IDs of the contacts to add in the requested contact list. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    contact_ids: Array<ResourceId>;
};

export const AnalyticsActivitiesColumns = {
    ACTIVITY_ID: 'Activity ID',
    TYPE: 'Type',
    SOURCE: 'Source',
    MESSAGE_ID: 'Message ID',
    CONVERSATION_ID: 'Conversation ID',
    TICKET_IDS: 'Ticket IDs',
    SEGMENT: 'Segment',
    SEGMENT_START: 'Segment start',
    SEGMENT_END: 'Segment end',
    DIRECTION: 'Direction',
    STATUS: 'Status',
    STATUS_AT_ACTIVITY_TIME: 'Status at activity time',
    INBOX: 'Inbox',
    INBOX_API_ID: 'Inbox API ID',
    INBOX_AT_ACTIVITY_TIME: 'Inbox at activity time',
    INBOX_API_I_DS_AT_ACTIVITY_TIME: 'Inbox API IDs at activity time',
    PREVIOUS_INBOX_IDS: 'Previous inbox IDs',
    MESSAGE_DATE: 'Message date',
    AUTOREPLY: 'Autoreply',
    REACTION_TIME: 'Reaction time',
    TOTAL_REPLY_TIME: 'Total reply time',
    HANDLE_TIME: 'Handle time',
    RESPONSE_TIME: 'Response time',
    STAGE_RESOLUTION_TIME: 'Stage resolution time',
    REPLIES_TO_RESOLUTION: 'Replies to resolution',
    TICKET_RESOLUTION_TIME: 'Ticket resolution time',
    TICKET_REPLIES_TO_RESOLUTION: 'Ticket replies to resolution',
    ATTRIBUTED_TO: 'Attributed to',
    ASSIGNEE: 'Assignee',
    AUTHOR: 'Author',
    CONTACT_NAME: 'Contact name',
    CONTACT_HANDLE: 'Contact handle',
    ACCOUNT_NAMES: 'Account names',
    FROM: 'From',
    TO: 'To',
    CC: 'Cc',
    BCC: 'Bcc',
    EXTRACT: 'Extract',
    TAGS: 'Tags',
    TAG_API_IDS: 'Tag API IDs',
    TAGS_AT_ACTIVITY_TIME: 'Tags at activity time',
    TAG_API_I_DS_AT_ACTIVITY_TIME: 'Tag API IDs at activity time',
    TAG_APPLICATION_DURATION: 'Tag application duration',
    ACTIVITY_API_ID: 'Activity API ID',
    MESSAGE_API_ID: 'Message API ID',
    COMMENT_API_ID: 'Comment API ID',
    CONVERSATION_API_ID: 'Conversation API ID',
    MESSAGE_ORIGINAL_ID: 'Message original ID',
    NEW_CONVERSATION: 'New Conversation',
    FIRST_RESPONSE: 'First response',
    BUSINESS_HOURS: 'Business hours',
    SUBJECT: 'Subject',
    ACCOUNT_NAME: 'Account name',
    SURVEY_RATING: 'Survey rating',
    SURVEY_COMMENT: 'Survey comment',
    SEGMENT_CLOSED: 'Segment closed',
    SEGMENT_CONTAINS_MESSAGES: 'Segment contains messages',
    LAST_SEGMENT_ACTIVITY: 'Last segment activity',
    ADDED_TAG: 'Added tag',
    ADDED_TAG_API_ID: 'Added tag API ID',
    REMOVED_TAG: 'Removed tag',
    REMOVED_TAG_API_ID: 'Removed tag API ID',
    SEGMENT_CUMULATIVE_TEAMMATES: 'Segment cumulative teammates'
} as const;

export type AnalyticsActivitiesColumns = typeof AnalyticsActivitiesColumns[keyof typeof AnalyticsActivitiesColumns];

export type AnalyticsActivitiesExportsColumns = {
    /**
     * List of the columns to include in the export.
     *
     */
    columns: Array<AnalyticsActivitiesColumns>;
};

export type AnalyticsExportRequest = (({
    type: 'messages';
} & AnalyticsMessagesExportColumns) | ({
    type: 'events';
} & AnalyticsActivitiesExportsColumns)) & {
    /**
     * The type of export to create. The type you specify determines which columns are available for the export.
     */
    type: 'messages' | 'events';
    /**
     * Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day.
     */
    start: number;
    /**
     * End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day.
     */
    end: number;
    /**
     * [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC.
     */
    timezone?: string;
    filters?: AnalyticsFilters;
};

export type AnalyticsExportResponse = {
    _links?: {
        /**
         * Link to analytics export
         */
        self?: string;
    };
    /**
     * Status of the analytics
     */
    status?: 'running' | 'done' | 'too_big' | 'failed';
    /**
     * Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
     */
    progress?: number;
    /**
     * The URL from which the export data can be downloaded. Only displays after you make a GET request to the link included in the POST response.
     */
    url?: string;
    /**
     * The filename of the export with extension included. Only displays after you make a GET request to the link included in the POST response.
     */
    filename?: string;
    /**
     * Size (in bytes) of the export data. Only displays after you make a GET request to the link included in the POST response.
     */
    size?: number;
    /**
     * Timestamp (in seconds) at which the export was requested.
     */
    created_at?: number;
    filters?: AnalyticsFilters;
};

/**
 * Resources to compute the analytics for. Defaults to all.
 */
export type AnalyticsFilters = TagIds | TeammateIds | ChannelIds | InboxIds | TeamIds | AccountIds;

export const AnalyticsMessagesColumns = {
    MESSAGE_ID: 'Message ID',
    CONVERSATION_ID: 'Conversation ID',
    TICKET_IDS: 'Ticket IDs',
    SEGMENT: 'Segment',
    DIRECTION: 'Direction',
    STATUS: 'Status',
    INBOX: 'Inbox',
    INBOX_API_ID: 'Inbox API ID',
    INBOX_AT_ACTIVITY_TIME: 'Inbox at activity time',
    INBOX_API_I_DS_AT_ACTIVITY_TIME: 'Inbox API IDs at activity time',
    MESSAGE_DATE: 'Message date',
    AUTOREPLY: 'Autoreply',
    REACTION_TIME: 'Reaction time',
    TOTAL_REPLY_TIME: 'Total reply time',
    HANDLE_TIME: 'Handle time',
    RESPONSE_TIME: 'Response time',
    ATTRIBUTED_TO: 'Attributed to',
    ASSIGNEE: 'Assignee',
    AUTHOR: 'Author',
    CONTACT_NAME: 'Contact name',
    CONTACT_HANDLE: 'Contact handle',
    ACCOUNT_NAMES: 'Account names',
    FROM: 'From',
    TO: 'To',
    CC: 'Cc',
    BCC: 'Bcc',
    EXTRACT: 'Extract',
    TAGS: 'Tags',
    TAG_API_IDS: 'Tag API IDs',
    MESSAGE_API_ID: 'Message API ID',
    CONVERSATION_API_ID: 'Conversation API ID',
    NEW_CONVERSATION: 'New Conversation',
    FIRST_RESPONSE: 'First response',
    BUSINESS_HOURS: 'Business hours',
    SUBJECT: 'Subject',
    SEGMENT_START: 'Segment start',
    SEGMENT_END: 'Segment end',
    SEGMENT_CLOSED: 'Segment closed',
    LAST_SEGMENT_ACTIVITY: 'Last segment activity',
    SEGMENT_CUMULATIVE_TEAMMATES: 'Segment cumulative teammates'
} as const;

export type AnalyticsMessagesColumns = typeof AnalyticsMessagesColumns[keyof typeof AnalyticsMessagesColumns];

export type AnalyticsMessagesExportColumns = {
    /**
     * List of the columns to include in the export.
     *
     */
    columns: Array<AnalyticsMessagesColumns>;
};

export const AnalyticsMetricId = {
    AVG_CSAT_SURVEY_RESPONSE: 'avg_csat_survey_response',
    AVG_FIRST_RESPONSE_TIME: 'avg_first_response_time',
    AVG_HANDLE_TIME: 'avg_handle_time',
    AVG_REPLIES_TO_RESOLUTION: 'avg_replies_to_resolution',
    AVG_RESOLUTION_TIME: 'avg_resolution_time',
    AVG_RESPONSE_TIME: 'avg_response_time',
    AVG_SLA_BREACH_TIME: 'avg_sla_breach_time',
    AVG_TOTAL_REPLY_TIME: 'avg_total_reply_time',
    NEW_SEGMENTS_COUNT: 'new_segments_count',
    NUM_ACTIVE_SEGMENTS_FULL: 'num_active_segments_full',
    NUM_ARCHIVED_SEGMENTS: 'num_archived_segments',
    NUM_ARCHIVED_SEGMENTS_WITH_REPLY: 'num_archived_segments_with_reply',
    NUM_CSAT_SURVEY_RESPONSE: 'num_csat_survey_response',
    NUM_MESSAGES_RECEIVED: 'num_messages_received',
    NUM_MESSAGES_SENT: 'num_messages_sent',
    NUM_SLA_BREACH: 'num_sla_breach',
    PCT_CSAT_SURVEY_SATISFACTION: 'pct_csat_survey_satisfaction',
    PCT_RESOLVED_ON_FIRST_REPLY: 'pct_resolved_on_first_reply',
    PCT_TAGGED_CONVERSATIONS: 'pct_tagged_conversations',
    NUM_CLOSED_SEGMENTS: 'num_closed_segments',
    NUM_OPEN_SEGMENTS_START: 'num_open_segments_start',
    NUM_OPEN_SEGMENTS_END: 'num_open_segments_end',
    NUM_RESOLVED_SEGMENTS: 'num_resolved_segments',
    NUM_UNRESOLVED_ACTIVE_SEGMENTS: 'num_unresolved_active_segments',
    NUM_WORKLOAD_SEGMENTS: 'num_workload_segments'
} as const;

export type AnalyticsMetricId = typeof AnalyticsMetricId[keyof typeof AnalyticsMetricId];

export type AnalyticsReportRequest = {
    /**
     * Start time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded down to the start of the day.
     */
    start: number;
    /**
     * End time of the data to include in the export (seconds since 1970-01-01T00:00:00+00). Will be rounded up to the end of the day.
     */
    end: number;
    /**
     * [IANA name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the timezone to format the dates with. If omitted, the export will use Etc/UTC.
     */
    timezone?: string;
    filters?: AnalyticsFilters;
    /**
     * List of the metrics required.
     */
    metrics: Array<AnalyticsMetricId>;
};

export type AnalyticsReportResponse = {
    _links?: {
        /**
         * Link to analytics job.
         */
        self?: string;
    };
    /**
     * Status of the report.
     */
    status?: 'running' | 'done' | 'failed';
    /**
     * Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
     */
    progress?: number;
    /**
     * The metrics computed for the report.
     */
    metrics?: Array<AnalyticsScalar>;
};

export type AnalyticsScalar = {
    id?: AnalyticsMetricId;
    type?: AnalyticsScalarType;
    value?: AnalyticsScalarValue;
};

export const AnalyticsScalarType = {
    NUMBER: 'number',
    PERCENTAGE: 'percentage',
    STRING: 'string',
    DURATION: 'duration'
} as const;

export type AnalyticsScalarType = typeof AnalyticsScalarType[keyof typeof AnalyticsScalarType];

export type AnalyticsScalarValue = {
    id?: AnalyticsMetricId;
    type?: AnalyticsScalarType;
    /**
     * The value of a scalar metric.
     */
    value?: number | string | {
        label?: string;
        resource?: {
            id?: number;
            _links?: {
                /**
                 * Link to a resource.
                 */
                self?: string;
            };
        };
    };
};

export type AppEvent = {
    /**
     * The type of event this application should handle
     */
    event_type: string;
    /**
     * Identifier for the app object to which the event is related. Either an ID or an external link is required.
     * If both are provided, the ID will be favored.
     *
     */
    app_object: {
        /**
         * ID of the app object
         */
        id?: string;
        /**
         * External link of the app object
         */
        ext_link?: string;
    };
};

export type Attachment = {
    /**
     * The unique identifier of the attachment.
     */
    id: string;
    /**
     * Name of the attached file
     */
    filename: string;
    /**
     * URL to download the attached file
     */
    url: string;
    /**
     * Content type of the attached file in [MIME format](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types). Note that some attachments types may not be supported.
     */
    content_type: string;
    /**
     * Size (in byte) of the attached file
     */
    size: number;
    /**
     * Attachment metadata
     */
    metadata: {
        /**
         * Whether or not the attachment is part of the message body
         */
        is_inline?: boolean;
        /**
         * Unique identifier used to link an attachment to where it is used in the message body
         */
        cid?: string;
    };
};

export type ChannelIds = {
    channel_ids: Array<ResourceId>;
};

export type ChannelResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to channel inbox
             */
            inbox?: string;
            /**
             * Link to channel owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier for the channel
     */
    id?: string;
    /**
     * The name of the channel
     */
    name?: string;
    /**
     * Address receiving the messages
     */
    address?: string;
    /**
     * Type of the channel
     */
    types?: 'custom' | 'facebook' | 'gmail' | 'google_play' | 'imap' | 'intercom' | 'form' | 'office365' | 'layer_anon' | 'smtp' | 'talkdesk' | 'truly' | 'twilio' | 'twilio_whatsapp' | 'twitter' | 'twitter_dm' | 'yalo_wha' | 'front_chat' | 'front_mail';
    /**
     * Address which appears as the sender for messages sent from Front
     */
    send_as?: string;
    /**
     * Channel settings
     */
    settings?: {
        /**
         * The time (measured in seconds) that users have to undo a send operation in the channel.
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /**
         * Whether teammates without inbox access can reply on this channel. Only present for shared channels; omitted for private channels.
         */
        all_teammates_can_reply?: boolean;
    };
    /**
     * Whether or not the channel is individual
     */
    is_private?: boolean;
    /**
     * Whether or not the channel configuration is valid
     */
    is_valid?: boolean;
};

export type CommentResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to comment's conversation
             */
            conversations?: string;
            /**
             * Link to comment mentions
             */
            mentions?: string;
        };
    };
    /**
     * Unique identifier of the comment
     */
    id?: string;
    author?: TeammateResponse;
    /**
     * Content of the comment
     */
    body?: string;
    /**
     * Date at which the comment was posted
     */
    posted_at?: number;
    /**
     * List of files attached to the comment
     */
    attachments?: Array<Attachment>;
    /**
     * Whether or not the comment is pinned in its conversation
     */
    is_pinned?: boolean;
};

export type Contact = {
    /**
     * Contact name
     */
    name?: string;
    /**
     * Contact description
     */
    description?: string;
    /**
     * Binary data of avatar. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    avatar?: Blob | File;
    /**
     * List of all the links of the contact
     */
    links?: Array<string>;
    /**
     * List of all the group names the contact belongs to. It will automatically create missing groups. ⚠️ Deprecated. Use `list_names` instead.
     */
    group_names?: Array<string>;
    /**
     * List of all the contact list names the contact belongs to. It will automatically create missing groups
     */
    list_names?: Array<string>;
    custom_fields?: CustomFieldParameter;
};

export type ContactHandle = {
    /**
     * Handle used to reach the contact.
     */
    handle: string;
    /**
     * Source of the handle. Can be `email`, `phone`, `twitter`, `facebook`, `intercom`, `front_chat`, or `custom`.
     */
    source: 'twitter' | 'email' | 'phone' | 'facebook' | 'intercom' | 'front_chat' | 'custom';
};

export type ContactIds = {
    /**
     * The contact IDs to include. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    contact_ids: Array<ResourceId>;
};

export type ContactListResponses = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to contact list contacts
             */
            contacts?: string;
            /**
             * Link to list owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier of the list
     */
    id?: string;
    /**
     * Name of the list
     */
    name?: string;
    /**
     * Whether or not the contact is individual
     */
    is_private?: boolean;
};

export type ContactNoteResponses = {
    author?: TeammateResponse;
    /**
     * Content of the note
     */
    body?: string;
    /**
     * Date at which the note have been created
     */
    created_at?: number;
};

export type ContactResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to contact notes
             */
            notes?: string;
            /**
             * Link to contact conversations
             */
            conversations?: string;
            /**
             * Link to contact owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier of the contact
     */
    id?: string;
    /**
     * Contact name
     */
    name?: string;
    /**
     * Contact description
     */
    description?: string;
    /**
     * URL of the contact's avatar
     */
    avatar_url?: string;
    /**
     * List of all the links of the contact
     */
    links?: Array<string>;
    /**
     * List of the groups the contact belongs to. ⚠️ Deprecated. use `lists` instead.
     * @deprecated
     */
    groups?: Array<ContactListResponses>;
    /**
     * List of the contact lists the contact belongs to.
     */
    lists?: Array<ContactListResponses>;
    /**
     * List of the handles and sources with which the contact is reachable.
     */
    handles?: Array<ContactHandle>;
    custom_fields?: CustomFieldParameter;
    /**
     * Whether or not the contact is individual
     */
    is_private?: boolean;
};

export type ConversationResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to conversation events
             */
            events?: string;
            /**
             * Link to conversation followers
             */
            followers?: string;
            /**
             * Link to conversation messages
             */
            messages?: string;
            /**
             * Link to conversation comments
             */
            comments?: string;
            /**
             * Link to conversation inboxes
             */
            inboxes?: string;
            /**
             * Link to last message of the conversation
             */
            last_message?: string;
        };
    };
    /**
     * Unique identifier of the conversation
     */
    id?: string;
    /**
     * Subject of the message for email message
     */
    subject?: string;
    /**
     * Status of the conversation
     */
    status?: 'archived' | 'unassigned' | 'deleted' | 'assigned';
    /**
     * Unique identifier of the conversation status category, only present if ticketing is enabled
     */
    status_id?: string;
    /**
     * Status category of the conversation
     */
    status_category?: 'open' | 'waiting' | 'resolved';
    /**
     * List of ticket ids associated with the conversation
     */
    ticket_ids?: Array<string>;
    assignee?: TeammateResponse;
    recipient?: RecipientResponse;
    /**
     * List of the tags for this conversation
     */
    tags?: Array<TagResponse>;
    /**
     * List of the links for this conversation
     */
    links?: Array<LinkResponse>;
    custom_fields?: CustomFieldParameter;
    /**
     * Timestamp at which the conversation have been created.
     */
    created_at?: number;
    /**
     * Timestamp of the oldest unreplied message.
     */
    waiting_since?: number;
    /**
     * Whether or not the conversation is private
     */
    is_private?: boolean;
    /**
     * List of scheduled (non-expired and non-canceled) reminders for this conversation
     */
    scheduled_reminders?: Array<Reminder>;
    /**
     * Optional metadata about the conversation
     */
    metadata?: {
        /**
         * List of external_ids for partner channel associated with the conversation. Only present for partner channel token authenticated requests.
         */
        external_conversation_ids?: Array<string>;
    };
};

export type CreateChannel = {
    /**
     * Name of the channel
     */
    name?: string;
    /**
     * Settings of the channel
     */
    settings?: {
        /**
         * The time (measured in seconds) that users have to undo a send operation in the channel.
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /**
         * Whether teammates without inbox access can reply on this channel. Only allowed for shared channels.
         */
        all_teammates_can_reply?: boolean;
        /**
         * The webhook URL outbound messages should be sent to. Only allowed for "custom" type channels.
         */
        webhook_url?: string;
        /**
         * The SID of the Twilio channel. Only allowed for "twilio" type channels.
         */
        sid?: string;
        /**
         * The auth token for the Twilio account. Only allowed for "twilio" type channels.
         */
        auth_token?: string;
    };
    /**
     * Type of the channel
     */
    type: 'custom' | 'smtp' | 'twilio';
    /**
     * Sending address of your channel. Required for SMTP and Twilio channels.
     */
    send_as?: string;
};

export type CreateComment = {
    /**
     * ID of the teammate creating the comment. Alternatively, you can supply the author as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). If omitted, will post as the API Token or OAuth client of the requester.
     */
    author_id?: string;
    /**
     * Content of the comment. Can include markdown formatting.
     */
    body: string;
    /**
     * Whether or not the comment is pinned in its conversation.
     */
    is_pinned?: boolean;
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    attachments?: Array<Blob | File>;
};

export type CreateContact = Contact & {
    /**
     * List of the handles for this contact. Each handle object should include `handle` and `source` fields.
     */
    handles: Array<ContactHandle>;
};

export type CreateContactList = {
    /**
     * Name of the contact list
     */
    name: string;
};

export type CreateContactNote = {
    /**
     * ID of teammate creating the note
     */
    author_id: string;
    /**
     * Content of the note
     */
    body: string;
};

export type CreateConversation = {
    /**
     * Conversation type
     */
    type: 'discussion';
    /**
     * Inbox ID for the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both).
     */
    inbox_id?: string;
    /**
     * Teammates to add to the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both).
     */
    teammate_ids?: Array<string>;
    /**
     * Subject of the conversation
     */
    subject: string;
    /**
     * Details for the starter comment
     */
    comment: {
        /**
         * ID of the teammate creating the comment. If omitted, will post as the API Token or OAuth client of the requester.
         */
        author_id?: string;
        /**
         * Content of the comment
         */
        body: string;
        /**
         * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).
         */
        attachments?: Array<Blob | File>;
    };
    custom_fields?: CustomFieldParameter;
};

export type CreateDraft = {
    /**
     * ID of the teammate on behalf of whom the draft will be created. Alternatively, you can supply the author ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). If omitted, will post as the API Token or Application making the request.
     */
    author_id?: string;
    /**
     * List of recipient handles who will receive the message once the draft is sent
     */
    to?: Array<string>;
    /**
     * List of recipient handles who will receive a copy of the message once the draft is sent
     */
    cc?: Array<string>;
    /**
     * List of the recipient handles who will receive a blind copy of the message once the draft is sent
     */
    bcc?: Array<string>;
    /**
     * Subject of the draft.
     */
    subject?: string;
    /**
     * Body of the draft
     */
    body: string;
    /**
     * Body for the quote that the message is referencing. Only available on email channels.
     */
    quote_body?: string;
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB.
     */
    attachments?: Array<Blob | File>;
    /**
     * Mode of the draft to create. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
     */
    mode?: 'private' | 'shared';
    /**
     * ID of the signature to attach to this draft. If null, no signature is attached.
     */
    signature_id?: string;
    /**
     * Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false;
     */
    should_add_default_signature?: boolean;
};

export type CreateInbox = {
    /**
     * The name of the inbox
     */
    name: string;
    /**
     * An array of teammate IDs that should have access to the inbox. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    teammate_ids?: Array<ResourceId>;
};

/**
 * A link is used to connect a Front conversation to an external resource.
 */
export type CreateLink = {
    /**
     * Name of the link. If none is specified, the external_url is used as a default
     */
    name?: string;
    /**
     * Underlying identifying url of the link
     */
    external_url?: string;
    /**
     * The string that application object configurations will match on to update a specific application object. For example, if you've configured an application object to match on ORDER-{Digits}, and you want to specifically update the application objects for ORDER-777 to retrieve the latest information from external systems, send "ORDER-777". Repeat for other specific identifiers, such as "ORDER-435".
     */
    pattern?: string;
};

/**
 * A message template that is used for pre-written responses
 */
export type CreateMessageTemplateAsChild = {
    /**
     * Name of the message template
     */
    name: string;
    /**
     * Subject of the message template.
     */
    subject?: string;
    /**
     * Body of the message template. You can supply HTML with inline CSS to structure and style your template.
     */
    body: string;
    /**
     * The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty.
     */
    inbox_ids?: Array<string>;
};

/**
 * A message template folder that is used to store message templates or other folders.
 */
export type CreateMessageTemplateFolder = {
    /**
     * Name of the message template folder
     */
    name: string;
    /**
     * ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
     */
    parent_folder_id?: string;
};

/**
 * A message template folder that is used to store message templates or other folders.
 */
export type CreateMessageTemplateFolderAsChild = {
    /**
     * Name of the message template folder
     */
    name: string;
};

/**
 * A message template that is used for pre-written responses
 */
export type CreatePrivateMessageTemplate = {
    /**
     * Name of the message template
     */
    name: string;
    /**
     * Subject of the message template.
     */
    subject?: string;
    /**
     * Body of the message template. You can supply HTML with inline CSS to structure and style your template.
     */
    body: string;
    /**
     * ID of the message template folder to place this message template in
     */
    folder_id?: string;
};

/**
 * A signature that can be used to sign messages.
 */
export type CreatePrivateSignature = {
    /**
     * Name of the signature
     */
    name: string;
    /**
     * Sender info of the signature that will appear in the From line of emails sent.
     */
    sender_info?: string;
    /**
     * Body of the signature
     */
    body: string;
    /**
     * If true, the signature will be set as the default signature for the teammate.
     */
    is_default?: boolean;
    /**
     * The specific channels this signature is available in. If omitted or null, the signature will be available in all channels the teammate has access to. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    channel_ids?: Array<string>;
};

/**
 * A message template that is used for pre-written responses
 */
export type CreateSharedMessageTemplate = {
    /**
     * Name of the message template
     */
    name: string;
    /**
     * Subject of the message template.
     */
    subject?: string;
    /**
     * Body of the message template. You can supply HTML with inline CSS to structure and style your template.
     */
    body: string;
    /**
     * ID of the message template folder to place this message template in
     */
    folder_id?: string;
    /**
     * The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty.
     */
    inbox_ids?: Array<string>;
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    attachments?: Array<Blob | File>;
};

/**
 * A signature that can be used to sign messages.
 */
export type CreateSharedSignature = {
    /**
     * Name of the signature
     */
    name: string;
    /**
     * Sender info of the signature that will appear in the From line of emails sent.
     */
    sender_info?: string;
    /**
     * Body of the signature
     */
    body: string;
    /**
     * Whether or not the signature is visible in all individual channels for teammates in the given team.
     */
    is_visible_for_all_teammate_channels?: boolean;
    /**
     * If true, the signature will be set as the default signature for the team.
     */
    is_default?: boolean;
    /**
     * The specific channels this signature is available in. If omitted or null, the signature will be available in all channels the team has access to. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    channel_ids?: Array<string>;
};

export type CreateShift = {
    /**
     * Name of the shift
     */
    name: string;
    /**
     * Color of the shift
     */
    color: 'black' | 'grey' | 'pink' | 'purple' | 'blue' | 'teal' | 'green' | 'yellow' | 'orange' | 'red';
    /**
     * A timezone name as defined in the IANA tz database
     */
    timezone: string;
    times: ShiftIntervals;
    /**
     * List of all the teammate ids who will be part of this shift. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    teammate_ids: Array<ResourceId>;
};

/**
 * A tag is a label that can be used to classify conversations.
 */
export type CreateTag = {
    /**
     * Name of the tag
     */
    name: string;
    /**
     * Description of the tag
     */
    description?: string;
    /**
     * Highlight color of the tag.
     */
    highlight?: 'grey' | 'pink' | 'red' | 'orange' | 'yellow' | 'green' | 'light-blue' | 'blue' | 'purple';
    /**
     * Whether the tag is visible in conversation lists.
     */
    is_visible_in_conversation_lists?: boolean;
};

export type CreateTeammateGroup = {
    /**
     * Name of the teammate group
     */
    name: string;
    /**
     * Description of the teammate group
     */
    description?: string;
    /**
     * Permissions for the teammate group
     */
    permissions?: {
        /**
         * Permissions for accessing contact lists. This only applies if shared contacts permissions are enabled.
         */
        contacts?: {
            /**
             * One of 'all', 'contact_groups', 'contact_lists', or 'none'.
             */
            access: string;
            /**
             * List of contact group ids. Can only be specified if access is set to 'contact_groups'. ⚠️ Deprecated. Use access 'contact_lists' and 'contact_list_ids' instead.
             * @deprecated
             */
            contact_group_ids?: Array<string>;
            /**
             * List of contact list ids. Can only be specified if access is set to 'contact_lists'.
             */
            contact_list_ids?: Array<string>;
        };
    };
};

/**
 * An object whose key is the `name` property defined for the custom field in the Front UI. The value of the key must use the same `type` specified for the custom field, as described in https://dev.frontapp.com/reference/custom-fields
 */
export type CustomFieldParameter = {
    [key: string]: unknown;
};

export type CustomFieldResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique identifier of the custom field
     */
    id: string;
    /**
     * Name of the custom field
     */
    name: string;
    /**
     * Description of the custom field
     */
    description: string;
    /**
     * Type of the custom field
     */
    type: 'string' | 'boolean' | 'datetime' | 'number' | 'teammate' | 'inbox' | 'enum';
    /**
     * List of possible values for a custom field of type `enum`.
     */
    values?: Array<{
        /**
         * Value of the custom field
         */
        value?: string;
        /**
         * Human readable label for the value
         */
        label?: string;
    }>;
};

export type CustomMessage = {
    /**
     * Data of the sender
     */
    sender: {
        /**
         * ID of the contact in Front corresponding to the sender
         */
        contact_id?: string;
        /**
         * Name of the sender
         */
        name?: string;
        /**
         * Handle of the sender. It can be any string used to uniquely identify the sender. **Important:** When sending a phone number, include a country code preceded by a plus (+) sign. For example, +33 for France. If you do not send a country code or include a plus sign, Front will normalize your phone number to the USA (+1).
         */
        handle: string;
    };
    /**
     * Subject of the message
     */
    subject?: string;
    /**
     * Body of the message
     */
    body: string;
    /**
     * Format of the message body. Can be `markdown` (default) or `html`.
     */
    body_format?: 'html' | 'markdown';
    metadata?: {
        /**
         * Reference which will be used to thread messages. If omitted, Front threads by sender instead. This reference is unique to custom channels. If you supply a reference generated by another endpoint, the message will not thread into the same conversation.
         */
        thread_ref?: string;
        /**
         * Custom object where any internal information can be stored
         */
        headers?: {
            [key: string]: unknown;
        };
    };
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    attachments?: Array<Blob | File>;
};

export type DeleteContactHandle = ContactHandle & {
    /**
     * Force the deletetion of the contact if the handle is the last one
     */
    force?: boolean;
};

export type DeleteDraft = {
    /**
     * Version of the draft
     */
    version: string;
};

export type EditDraft = ReplyDraft & {
    /**
     * Version of the draft
     */
    version?: string;
    /**
     * Mode of the draft to update. Can only be 'shared' (draft is visible to all teammates with access to the conversation).
     */
    mode?: 'shared';
};

/**
 * An event is created every time something interesting is happening in Front.
 */
export type EventResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique identifier of the event
     */
    id?: string;
    /**
     * Type of event
     */
    type?: 'assign' | 'unassign' | 'archive' | 'reopen' | 'trash' | 'restore' | 'reminder' | 'comment' | 'mention' | 'inbound' | 'outbound' | 'out_reply' | 'move' | 'forward' | 'tag' | 'untag' | 'sending_error' | 'message_bounce_error' | 'conversations_merged' | 'link_added' | 'link_removed' | 'custom_field_updated';
    /**
     * Date at which the event has been emitted
     */
    emitted_at?: number;
    /**
     * Event source
     */
    source?: {
        /**
         * Metadata about the resource
         */
        _meta?: {
            /**
             * Type of resource
             */
            type?: 'api' | 'oauth_client' | 'rule' | 'teammate' | 'imap' | 'gmail' | 'reminder' | 'inboxes' | 'recipient';
        };
        /**
         * The resource which triggered the event
         */
        data?: RuleResponse | TeammateResponse | Array<InboxResponse>;
    };
    /**
     * Partial representation (type & id) of the event's target
     */
    target?: {
        /**
         * Metadata about the resource
         */
        _meta?: {
            /**
             * Type of resource
             */
            type?: 'teammate' | 'inboxes' | 'message' | 'comment' | 'tag' | 'deleted_conversation_ids' | 'link' | 'custom_field';
        };
        /**
         * The resource which received the event
         */
        data?: TeammateResponse | InboxResponse | TagResponse | CommentResponse | MessageResponse | LinkResponse;
    };
    conversation?: ConversationResponse;
};

export type IdentityResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique ID of company
     */
    id?: number;
    /**
     * Name of company
     */
    name?: string;
};

export type ImportMessage = {
    /**
     * Data of the sender
     */
    sender: {
        /**
         * ID of the teammate who is the author of the message. Ignored if the message is inbound.
         */
        author_id?: string;
        /**
         * Name of the sender
         */
        name?: string;
        /**
         * Handle of the sender. It can be any string used to uniquely identify the sender. **Important:** When sending a phone number, include a country code preceded by a plus (+) sign. For example, +33 for France. If you do not send a country code or include a plus sign, Front will normalize your phone number to the USA (+1).
         */
        handle: string;
    };
    /**
     * List of the recipient handles who will receive this message
     */
    to: Array<string>;
    /**
     * List of the recipient handles who will receive a copy of this message
     */
    cc?: Array<string>;
    /**
     * List of the recipient handles who will receive a blind copy of this message
     */
    bcc?: Array<string>;
    /**
     * Subject of the message
     */
    subject?: string;
    /**
     * Body of the message
     */
    body: string;
    /**
     * Format of the message body. Can be `markdown` (default) or `html`, and can only be specified for `email` type.
     */
    body_format?: 'html' | 'markdown';
    /**
     * External identifier of the message. Front won't import two messages with the same external ID.
     */
    external_id: string;
    /**
     * Date at which the message as been sent or received.
     */
    created_at: number;
    /**
     * Type of the message to import. Default is `email`.
     */
    type?: 'email' | 'sms' | 'intercom' | 'custom';
    /**
     * ID of the teammate who will be assigned to the conversation.
     */
    assignee_id?: string;
    /**
     * List of tag names to add to the conversation
     */
    tags?: Array<string>;
    /**
     * If supplied, Front will thread this message into conversation with the given ID. Note that including this parameter nullifies the `thread_ref` parameter _completely_.
     */
    conversation_id?: string;
    metadata: {
        /**
         * Reference which will be used to thread messages. If omitted, Front threads by sender instead. This reference is unique to importing historical messages. If you supply a reference generated by another endpoint, the message will not thread into the same conversation.
         */
        thread_ref?: string;
        /**
         * Determines if message is received (inbound) or sent (outbound) by you.
         */
        is_inbound: boolean;
        /**
         * Determines if message is archived after import.
         */
        is_archived?: boolean;
        /**
         * Determines if rules should be skipped. `true` by default.
         */
        should_skip_rules?: boolean;
    };
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    attachments?: Array<Blob | File>;
};

export type InboxIds = {
    inbox_ids: Array<ResourceId>;
};

export type InboxResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to inbox teammates
             */
            teammates?: string;
            /**
             * Link to inbox conversations
             */
            conversations?: string;
            /**
             * Link to inbox channels
             */
            channels?: string;
            /**
             * Link to inbox owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier for the inbox
     */
    id?: string;
    /**
     * Name of the inbox
     */
    name?: string;
    /**
     * Whether or not the inbox is individual
     */
    is_private?: boolean;
    /**
     * Whether or not the inbox is available to all members of a team by default
     */
    is_public?: boolean;
    custom_fields?: CustomFieldParameter;
};

export type KnowledgeBaseArticleCreate = {
    /**
     * ID of the category this article belongs to
     */
    category_id?: string;
    /**
     * Teammate ID of the article author
     */
    author_id?: string;
    /**
     * Subject of the article
     */
    subject?: string;
    /**
     * HTML content of the article
     */
    content?: string;
    /**
     * Article status
     */
    status?: 'draft' | 'published';
};

export type KnowledgeBaseArticlePatch = {
    /**
     * Teammate ID of the article author
     */
    author_id?: string;
    /**
     * Subject of the article
     */
    subject?: string;
    /**
     * HTML content of the article
     */
    content?: string;
    /**
     * Article status
     */
    status?: 'draft' | 'published';
};

export type KnowledgeBaseArticleResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to the article's knowledge base
             */
            knowledge_base?: string;
            /**
             * Link to the article's category
             */
            category?: string;
            /**
             * Link to the article's last editor
             */
            last_editor?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base article
     */
    id: string;
    /**
     * URL slug of the article. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/articles/5
     */
    slug: string;
    /**
     * Name of the article
     */
    name: string;
    /**
     * Status of the article
     */
    status: string;
    /**
     * Article keywords
     */
    keywords: Array<string>;
    /**
     * Article HTML content
     */
    content: string;
    /**
     * Locale of the article
     */
    locale: string;
    /**
     * List of files attached to the article
     */
    attachments: Array<Attachment>;
    /**
     * Timestamp when the article was last edited
     */
    last_edited_at?: number;
    /**
     * Timestamp when the article was created
     */
    created_at?: number;
    /**
     * Timestamp when the article was updated
     */
    updated_at?: number;
};

export type KnowledgeBaseArticleSlimResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to the article's knowledge base
             */
            knowledge_base?: string;
            /**
             * Link to the article's category
             */
            category?: string | null;
            /**
             * Link to the article's content
             */
            content?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base article
     */
    id: string;
    /**
     * URL slug of the article. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/articles/5
     */
    slug: string;
    /**
     * List of the locales the article supports
     */
    locales: Array<string>;
    /**
     * Timestamp when the article was created
     */
    created_at?: number;
    /**
     * Timestamp when the article was updated
     */
    updated_at?: number;
};

export type KnowledgeBaseCategoryCreate = {
    /**
     * ID of the parent category
     */
    parent_category_id?: string;
    /**
     * Name of the knowledge base category
     */
    name: string;
    /**
     * Description of the knowledge base category
     */
    description?: string;
};

export type KnowledgeBaseCategoryPatch = {
    /**
     * Name of the knowledge base category
     */
    name?: string;
    /**
     * Description of the knowledge base category
     */
    description?: string;
};

export type KnowledgeBaseCategoryResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to the category's knowledge base
             */
            knowledge_base?: string;
            /**
             * Link to the category's parent
             */
            parent_category?: string | null;
            /**
             * Link to articles in this category
             */
            articles?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base category
     */
    id: string;
    /**
     * Category name
     */
    name: string | null;
    /**
     * Description of the category
     */
    description: string | null;
    /**
     * Is the category hidden
     */
    is_hidden: boolean;
    /**
     * Locale of this category
     */
    locale: 'fr' | 'en';
    /**
     * Timestamp when the category was created
     */
    created_at?: number;
    /**
     * Timestamp when the category was updated
     */
    updated_at?: number;
};

export type KnowledgeBaseCategorySlimResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to the category's knowledge base
             */
            knowledge_base?: string;
            /**
             * Link to the category's parent
             */
            parent_category?: string | null;
            /**
             * Link to articles in this category
             */
            articles?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base category
     */
    id: string;
    /**
     * URL slug of the category. Construct the full URL using the template of protocol/knowledge base domain/locale/slug, such as https://yourDomain.com/en/categories/2
     */
    slug: string;
    /**
     * Is the category hidden from navigation and breadcrumbs (topics are accessed as direct links)
     */
    is_hidden: boolean;
    /**
     * List of the locales the category supports
     */
    locales: Array<string>;
    /**
     * Timestamp when the category was created
     */
    created_at?: number;
    /**
     * Timestamp when the category was updated
     */
    updated_at?: number;
};

export type KnowledgeBaseCreate = {
    /**
     * Name of the knowledge base
     */
    name: string;
    /**
     * Determines if the knowledge base is publicly available or private only to your company
     */
    type?: 'internal' | 'external';
};

export type KnowledgeBasePatch = {
    /**
     * Name of the knowledge base
     */
    name?: string;
};

export type KnowledgeBaseResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to articles associated to the knowledge base
             */
            articles?: string;
            /**
             * Link to categories associated to the knowledge base
             */
            categories?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base
     */
    id: string;
    /**
     * Knowledge base name
     */
    name: string;
    /**
     * Status of the KB
     */
    status: 'published' | 'unpublished';
    /**
     * Type of the KB
     */
    type: 'internal' | 'external';
    /**
     * Locale of this requested KB
     */
    locale: 'fr' | 'en';
    /**
     * Timestamp when the knowledge base was created
     */
    created_at?: number;
    /**
     * Timestamp when the knowledge base was updated
     */
    updated_at?: number;
};

export type KnowledgeBaseSlimResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to articles associated to the knowledge base
             */
            articles?: string;
            /**
             * Link to categories associated to the knowledge base
             */
            categories?: string;
        };
    };
    /**
     * Unique identifier of the knowledge base
     */
    id: string;
    /**
     * Type of the KB
     */
    type: 'internal' | 'external';
    /**
     * List of the KB's possible locales
     */
    locales: Array<string>;
    /**
     * Timestamp when the knowledge base was created
     */
    created_at?: number;
    /**
     * Timestamp when the knowledge base was updated
     */
    updated_at?: number;
};

/**
 * A link used to connect a Front conversation to an external resource.
 */
export type LinkResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique identifier of the link
     */
    id: string;
    /**
     * Display name of the link
     */
    name: string;
    /**
     * Type of the link. Typically associated with the underlying link provider (if known)
     */
    type: string;
    /**
     * Underlying identifying external URL of the link
     */
    external_url: string;
    custom_fields: CustomFieldParameter;
};

export type MergeContacts = {
    /**
     * Optional contact ID to merge the other contacts into.
     */
    target_contact_id?: string;
    /**
     * Array of all the contact IDs of the contacts to be merged.  If a target contact id is provided and that contact id is not in this array, the length of this array must be between 1 and 49.  If no target contact id is provided or it is contained in this array, the length must be between 2 and 50.
     */
    contact_ids: Array<string>;
};

export type MessageResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to message conversation
             */
            conversation?: string;
            /**
             * Link to message this message replied to
             */
            message_replied_to?: string;
            /**
             * Link to message seen information
             */
            message_seen?: string;
        };
    };
    /**
     * Unique identifier of the message
     */
    id?: string;
    /**
     * Secondary unique identifier of a message. Generated by Front on message creation. Learn more at about the [message UID](https://dev.frontapp.com/reference/messages#creating-a-new-message).
     */
    message_uid?: string;
    /**
     * Type of the message
     */
    type?: 'call' | 'custom' | 'email' | 'facebook' | 'front_chat' | 'googleplay' | 'intercom' | 'internal' | 'phone-call' | 'sms' | 'tweet' | 'tweet_dm' | 'whatsapp' | 'yalo_wha';
    /**
     * Whether or not the message has been received or sent
     */
    is_inbound?: boolean;
    /**
     * If the message is a draft, describes the draft mode. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).
     */
    draft_mode?: 'shared' | 'private';
    /**
     * Type of the error when the draft failed to be sent
     */
    error_type?: string;
    /**
     * The current version of the message in Front
     */
    version?: string;
    /**
     * Date at which the message as been sent or received
     */
    created_at?: number;
    /**
     * Subject of the message
     */
    subject?: string;
    /**
     * Preview of the message body
     */
    blurb?: string;
    author?: TeammateResponse;
    recipients?: Array<RecipientResponse>;
    /**
     * Body of the message
     */
    body?: string;
    /**
     * Text version of the body for email messages
     */
    text?: string;
    /**
     * List of files attached to the message
     */
    attachments?: Array<Attachment>;
    signature?: SignatureResponse;
    /**
     * Optional metadata about the message
     */
    metadata?: {
        /**
         * For `intercom` messages only. URL of the Intercom conversation the message is coming from.
         */
        intercom_url?: string;
        /**
         * For `truly-call` messages only. Length of the call in seconds.
         */
        duration?: number;
        /**
         * For `truly-call` messages only. Whether or not the call have been answered.
         */
        have_been_answered?: boolean;
        /**
         * For `tweet` or 'custom' (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.
         */
        external_id?: string;
        /**
         * For `tweet` messages only. URL of the tweet.
         */
        twitter_url?: string;
        /**
         * For `tweet` messages only. Whether or not the tweet is a retweet.
         */
        is_retweet?: boolean;
        /**
         * For `tweet` messages only. Whether or not the tweet have been retweeted.
         */
        have_been_retweeted?: boolean;
        /**
         * For `tweet` messages only. Whether or not the tweet have been favorited.
         */
        have_been_favorited?: boolean;
        /**
         * For `custom` messages only. Custom reference which is used to thread messages.
         */
        thread_ref?: string;
        /**
         * For `custom` messages only. Custom object holding internal information.
         */
        headers?: {
            [key: string]: unknown;
        };
        /**
         * For `front_chat` messages only. Source URL from the chat widget when sending a message.
         */
        chat_visitor_url?: string;
    };
};

export type MessageTemplateFolderResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to resource's owner. Null if the current folder does not have an owner.
             */
            owner?: string | null;
            /**
             * Link to parent folder. Null if the current folder does not have a parent.
             */
            parent_folder?: string | null;
            /**
             * Link to child folders. Null if the current folder does not have children.
             */
            child_folders?: string | null;
            /**
             * Link to message templates contained within this folder or children folders. Null if the current folder does not have any message templates.
             */
            child_answers?: string | null;
        };
    };
    /**
     * Unique identifier of the message template folder
     */
    id: string;
    /**
     * Name of the message template folder
     */
    name: string;
    /**
     * Timestamp at which the message template folder was created.
     */
    created_at?: number;
    /**
     * Timestamp at which the message template folder was updated.
     */
    updated_at?: number;
};

export type MessageTemplateResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to resource's owner
             */
            owner?: string | null;
            /**
             * Link to the parent folder that contains the message template
             */
            parent_folder?: string | null;
        };
    };
    /**
     * Unique identifier of the message template
     */
    id: string;
    /**
     * Name of the message template
     */
    name: string;
    /**
     * Subject of the message template
     */
    subject: string | null;
    /**
     * Body of the message template
     */
    body: string;
    /**
     * List of files attached to the response
     */
    attachments: Array<Attachment>;
    /**
     * Whether or not the template is available in all inboxes.
     */
    is_available_for_all_inboxes: boolean;
    /**
     * List of inboxes the template is available in. Null if there are no restrictions.
     */
    inbox_ids: Array<string> | null;
};

export type OutboundMessage = {
    /**
     * List of the recipient handles who will receive this message
     */
    to: Array<string>;
    /**
     * List of the recipient handles who will receive a copy of this message
     */
    cc?: Array<string>;
    /**
     * List of the recipient handles who will receive a blind copy of this message
     */
    bcc?: Array<string>;
    /**
     * Name used for the sender info of the message
     */
    sender_name?: string;
    /**
     * Subject of the message for email message
     */
    subject?: string;
    /**
     * ID of the teammate on behalf of whom the answer is sent
     */
    author_id?: string;
    /**
     * Body of the message
     */
    body: string;
    /**
     * Text version of the body for email messages
     */
    text?: string;
    options?: {
        /**
         * List of tag IDs to add to the conversation
         */
        tag_ids?: Array<string>;
        /**
         * Archive the conversation right when sending the message
         */
        archive?: boolean;
    };
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB.
     */
    attachments?: Array<Blob | File>;
    /**
     * ID of the signature to attach to this draft. If null, no signature is attached.
     */
    signature_id?: string;
    /**
     * Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included or if author_id is omitted. Default false;
     */
    should_add_default_signature?: boolean;
};

export type OutboundReplyMessage = {
    /**
     * List of the recipient handles who will receive this message
     */
    to?: Array<string>;
    /**
     * List of the recipient handles who will receive a copy of this message
     */
    cc?: Array<string>;
    /**
     * List of the recipient handles who will receive a copy of this message
     */
    bcc?: Array<string>;
    /**
     * Name used for the sender info of the message
     */
    sender_name?: string;
    /**
     * Subject of the message for email message
     */
    subject?: string;
    /**
     * ID of the teammate on behalf of whom the answer is sent
     */
    author_id?: string;
    /**
     * Channel ID the message is sent from
     */
    channel_id?: string;
    /**
     * Body of the message
     */
    body: string;
    /**
     * Text version of the body for email messages
     */
    text?: string;
    /**
     * Body for the quote that the message is referencing. Only available on email channels.
     */
    quote_body?: string;
    options?: {
        /**
         * List of tag IDs to add to the conversation
         */
        tag_ids?: Array<string>;
        /**
         * Archive the conversation right when sending the message. `true` by default
         */
        archive?: boolean;
    };
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
     */
    attachments?: Array<Blob | File>;
    /**
     * ID of the signature to attach to this draft. If null, no signature is attached.
     */
    signature_id?: string;
    /**
     * Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included or if author_id is omitted. Default false;
     */
    should_add_default_signature?: boolean;
};

export type RecipientResponse = {
    _links: {
        related?: {
            /**
             * Link to recipient contact
             */
            contact?: string | null;
        };
    };
    /**
     * Name of the recipient.
     */
    name: string | null;
    /**
     * Handle of the contact. Can be any string used to uniquely identify the contact
     */
    handle: string;
    /**
     * Role of the recipient
     */
    role: 'from' | 'to' | 'cc' | 'bcc' | 'reply-to';
};

export type Reminder = {
    _links: {
        related?: {
            /**
             * Link to conversation owner
             */
            owner?: string;
        };
    };
    /**
     * Timestamp at which the conversation reminder has been created
     */
    created_at?: number;
    /**
     * Timestamp that the conversation reminder has been scheduled for
     */
    scheduled_at?: number;
    /**
     * Timestamp at which the conversation reminder has been updated
     */
    updated_at?: number;
};

export type RemoveContactsFromList = {
    /**
     * List of IDs of the contacts to remove from the requested contact list. Alternatively, you can supply the contact source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    contact_ids: Array<ResourceId>;
};

export type ReplyDraft = CreateDraft & {
    /**
     * ID of the channel from which the draft will be sent. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    channel_id: string;
};

export type ResourceId = string;

export type RoleResponse = {
    _links: {
        related?: {
            /**
             * Link to role owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier of the role
     */
    id: string;
    /**
     * Name of the role
     */
    name: string;
};

export type RuleResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to rule owner
             */
            owner?: string | null;
        };
    };
    /**
     * Unique identifier of the rule
     */
    id: string;
    /**
     * Name of the rule
     */
    name: string;
    /**
     * List of the rule's actions description
     */
    actions: Array<string>;
    /**
     * Whether or not the rule is individual
     */
    is_private: boolean;
};

export type SeenReceiptResponse = {
    _links: {
        /**
         * Link to self
         */
        self?: string;
        related?: {
            /**
             * Link to message associated with the seen record
             */
            message?: string;
        };
    };
    /**
     * Timestamp when message was seen
     */
    first_seen_at: string;
    seen_by: ContactHandle;
};

export type ShiftInterval = {
    /**
     * Start of shift
     */
    start: string;
    /**
     * End of shift
     */
    end: string;
};

export type ShiftIntervals = {
    mon?: ShiftInterval;
    tue?: ShiftInterval;
    wed?: ShiftInterval;
    thu?: ShiftInterval;
    fri?: ShiftInterval;
    sat?: ShiftInterval;
    sun?: ShiftInterval;
};

export type ShiftResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to shift teammates
             */
            teammates?: string;
            /**
             * Link to shift owner
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier of the shift
     */
    id: string;
    /**
     * Name of the shift
     */
    name: string;
    /**
     * Color of the shift
     */
    color: 'black' | 'grey' | 'pink' | 'purple' | 'blue' | 'teal' | 'green' | 'yellow' | 'orange' | 'red';
    /**
     * A timezone name as defined in the IANA tz database
     */
    timezone: string;
    times: ShiftIntervals;
    /**
     * The timestamp when the shift was created.
     */
    created_at?: number;
    /**
     * The timestamp when the shift was updated.
     */
    updated_at?: number;
};

export type SignatureResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to signature's owner (either a team or teammate)
             */
            owner?: string;
        };
    };
    /**
     * Unique identifier of the signature
     */
    id: string;
    /**
     * Name of the signature
     */
    name: string | null;
    /**
     * Body of the signature
     */
    body: string;
    /**
     * Sender info of the signature
     */
    sender_info: string | null;
    /**
     * Whether or not the signature is available in teammate channels.
     */
    is_visible_for_all_teammate_channels: boolean;
    /**
     * Whether the signature is the default signature for the team or teammate.
     */
    is_default: boolean;
    /**
     * Whether the signature is private to the teammate.
     */
    is_private: boolean;
    channel_ids: Array<string> | null;
};

/**
 * A ticket status of a conversation.
 */
export type StatusResponse = {
    _links: {
        /**
         * Link to ticket status
         */
        self?: string;
    };
    /**
     * Unique identifier of the ticket status
     */
    id: string;
    /**
     * The name of the ticket status. Default statuses match the category name. Custom statuses have a unique name.
     */
    name: string;
    /**
     * Category of the ticket status.
     */
    category: 'open' | 'waiting' | 'resolved';
    /**
     * Description of the ticket status
     */
    description: string | null;
    /**
     * Timestamp of ticket status creation
     */
    created_at?: number;
    /**
     * Timestamp of the last ticket status update
     */
    updated_at?: number;
};

export type TagIds = {
    tag_ids: Array<ResourceId>;
};

/**
 * A tag is a label that can be used to classify conversations.
 */
export type TagResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to tag conversations
             */
            conversations?: string;
            /**
             * Link to tag owner
             */
            owner?: string | null;
            /**
             * Link to parent tag
             */
            parent_tag?: string | null;
            /**
             * Link to tag children
             */
            children?: string | null;
        };
    };
    /**
     * Unique identifier of the tag
     */
    id: string;
    /**
     * Name of the tag
     */
    name: string;
    /**
     * Description of the tag
     */
    description: string | null;
    /**
     * Highlight color or emoji of the tag. Null if the tag does not have a highlight.
     */
    highlight: string | null;
    /**
     * Whether or not the tag is individual
     */
    is_private: boolean;
    /**
     * Whether the tag is visible in conversation lists.
     */
    is_visible_in_conversation_lists: boolean;
    /**
     * Timestamp of tag create creation
     */
    created_at?: number;
    /**
     * Timestamp of the last tag update
     */
    updated_at?: number;
};

export type TeamIds = {
    team_ids: Array<ResourceId>;
};

export type TeamPreviewResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique identifier of the team
     */
    id: string;
    /**
     * Name of the team
     */
    name: string;
};

export type TeamResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
    };
    /**
     * Unique identifier of the team
     */
    id: string;
    /**
     * Name of the team
     */
    name: string;
    /**
     * List of the inboxes in the team
     */
    inboxes: Array<InboxResponse>;
    /**
     * List of the teammates that have access to the team
     */
    members: Array<TeammateResponse>;
};

/**
 * A teammate group is a group of teammates in Front.
 */
export type TeammateGroupResponse = {
    _links?: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to list of teammate members
             */
            teammates?: string;
            /**
             * Link to list of associated teams
             */
            teams?: string;
            /**
             * Link to list of inboxes that teammate members can access
             */
            inboxes?: string;
        };
    };
    /**
     * Unique identifier of the teammate group
     */
    id?: string;
    /**
     * The name of the teammate group
     */
    name?: string;
    /**
     * Description of the teammate group
     */
    description?: string;
    /**
     * Is teammate group managed by SCIM or by Front
     */
    is_managed_by_scim?: boolean;
    /**
     * Permissions for the teammate group
     */
    permissions?: {
        /**
         * Permissions for teammate group access to contact lists
         */
        contacts?: {
            /**
             * Level of access for the teammate group to contact lists. Must be one of 'all', 'contact_lists', or 'none'.
             */
            access?: string;
            /**
             * List of contact lists the teammate group is allowed to access. May only be specified if 'access' is set to 'contact_lists'.
             */
            contact_list_ids?: Array<string>;
        };
    };
};

export type TeammateIds = {
    teammate_ids: Array<ResourceId>;
};

/**
 * A teammate is a user in Front.
 */
export type TeammateResponse = {
    _links: {
        /**
         * Link to resource
         */
        self?: string;
        related?: {
            /**
             * Link to teammate's inboxes
             */
            inboxes?: string;
            /**
             * Link to teammate's conversations
             */
            conversations?: string;
            /**
             * Link to the source resource of the bot (e.g. rule)
             */
            botSource?: string;
        };
    };
    /**
     * Unique identifier of the teammate
     */
    id: string;
    /**
     * Email address of the teammate
     */
    email: string;
    /**
     * Username of the teammate (used for "@" mentions)
     */
    username: string;
    /**
     * First name of the teammate
     */
    first_name: string;
    /**
     * Last name of the teammate
     */
    last_name: string;
    /**
     * Whether or not the teammate is an admin in your company
     */
    is_admin: boolean;
    /**
     * Whether or not the teammate is available
     */
    is_available: boolean;
    /**
     * Whether or not the teammate account has been blocked
     */
    is_blocked: boolean;
    /**
     * Type of the teammate, normal teammates are denoted as "user", while visitors are denoted as "visitor".
     * Bot users are denoted by their parent resource type.
     * The following bot types are available:
     * * rule: acting on behalf of a Rule, author of comments and drafts
     * * macro: acting on behalf of a Macro, author of comments and drafts
     * * API: acting on behalf of OAuth clients
     * * integration: acting on behalf of an Integration
     * * CSAT: used for authoring CSAT response comments
     *
     */
    type: 'user' | 'visitor' | 'rule' | 'macro' | 'API' | 'integration' | 'CSAT';
    custom_fields: CustomFieldParameter;
};

export type UpdateChannel = {
    /**
     * Name of the channel
     */
    name?: string;
    /**
     * ID of the inbox to move this channel to. Will also move corresponding conversations.
     */
    inbox_id?: string;
    /**
     * Settings to replace.
     * For custom channels, all settings may be replaced.
     * For all other channels, only `undo_send_time` and `all_teammates_can_reply` may be replaced.
     *
     */
    settings?: {
        /**
         * The time (measured in seconds) that users have to undo a send operation in the channel.
         */
        undo_send_time?: 0 | 5 | 10 | 15 | 30 | 60;
        /**
         * Whether teammates without inbox access can reply on this channel. Only allowed for shared channels.
         */
        all_teammates_can_reply?: boolean;
        /**
         * The webhook URL outbound messages should be sent to. Only allowed for "custom" type channels.
         */
        webhook_url?: string;
    };
};

export type UpdateComment = {
    /**
     * Content of the comment. Can include markdown formatting. Can only be updated if the comment was created using the same token.
     */
    body?: string;
    /**
     * Whether or not the comment is pinned in its conversation.
     */
    is_pinned?: boolean;
};

export type UpdateConversation = {
    /**
     * ID of the teammate to assign the conversation to. Set it to null to unassign.
     */
    assignee_id?: string;
    /**
     * ID of the inbox to move the conversation to.
     */
    inbox_id?: string;
    /**
     * New status of the conversation
     */
    status?: 'archived' | 'open' | 'deleted' | 'spam';
    /**
     * Unique identifier of the status to set the conversation to. Only one of status and status_id should be provided. Ticketing must be enabled for the company to use this field.
     */
    status_id?: string;
    /**
     * List of all the tag IDs replacing the old conversation tags
     */
    tag_ids?: Array<ResourceId>;
    custom_fields?: CustomFieldParameter;
};

export type UpdateConversationAssignee = {
    /**
     * ID of the teammate to assign the conversation to. Set it to null to unassign.
     */
    assignee_id: string;
};

export type UpdateConversationReminders = {
    /**
     * ID of the teammate to create a reminder for. For a private conversation, specify the id of the teammate that owns the conversation. For a shared conversation, use the id of any teammate that has access to the conversation's shared inbox. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    teammate_id: string;
    /**
     * Timestamp to schedule the reminder for. Set to null to cancel.
     */
    scheduled_at: number;
    /**
     * ID of the waiting status to which the conversation will be set. Ticketing must be enabled for the company to use this field. If no status is supplied and ticket is enabled, the default waiting status will be used.
     */
    status_id?: string;
};

export type UpdateLink = {
    /**
     * Name of the link
     */
    name?: string;
};

export type UpdateMessageTemplate = {
    /**
     * Name of the message template
     */
    name?: string;
    /**
     * Subject of the message template
     */
    subject?: string;
    /**
     * Body of the message template. You can supply HTML with inline CSS to structure and style your template.
     */
    body?: string;
    /**
     * ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
     */
    folder_id?: string;
    /**
     * The specific inboxes this template is available in. If null, then it will be available in all inboxes. Array should be non-empty. If unspecified, will retain previous value.
     */
    inbox_ids?: Array<string>;
    /**
     * Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. Specify an empty array to delete all attachments from a message template. If unspecified, it will retain previous value.
     */
    attachments?: Array<Blob | File>;
};

/**
 * A message template folder that is used to store message templates or other folders.
 */
export type UpdateMessageTemplateFolder = {
    /**
     * Name of the message template folder
     */
    name?: string;
    /**
     * ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null.
     */
    parent_folder_id?: string;
};

export type UpdateShift = {
    /**
     * Name of the shift
     */
    name?: string;
    /**
     * Color of the shift
     */
    color?: 'black' | 'grey' | 'pink' | 'purple' | 'blue' | 'teal' | 'green' | 'yellow' | 'orange' | 'red';
    /**
     * A timezone name as defined in the IANA tz database
     */
    timezone?: string;
    times?: ShiftIntervals;
    /**
     * List of all the teammate ids who will be part of this shift. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    teammate_ids?: Array<ResourceId>;
};

/**
 * A signature that can be used to sign messages.
 */
export type UpdateSignature = {
    /**
     * Name of the signature
     */
    name?: string;
    /**
     * Sender info of the signature that will appear in the From line of emails sent.
     */
    sender_info?: string;
    /**
     * Body of the signature
     */
    body?: string;
    /**
     * Whether or not the signature is visible in all individual channels for teammates in the given team. Can only be set for shared signatures.
     */
    is_visible_for_all_teammate_channels?: boolean;
    /**
     * If true, the signature will be set as the default signature for the team or teammate.
     */
    is_default?: boolean;
    /**
     * The specific shared channels this signature if available in. If null, then it will be available in all channels. If unspecified, will retain previous value. Alternatively, you can specify channels using a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    channel_ids?: Array<string>;
};

export type UpdateTag = {
    /**
     * Name of the tag
     */
    name?: string;
    /**
     * Description of the tag
     */
    description?: string;
    /**
     * Highlight color of the tag.
     */
    highlight?: 'grey' | 'pink' | 'red' | 'orange' | 'yellow' | 'green' | 'light-blue' | 'blue' | 'purple';
    /**
     * ID of the parent of this tag. Set to `null` to remove  the parent tag.
     */
    parent_tag_id?: string;
    /**
     * Whether the tag is visible in conversation lists.
     */
    is_visible_in_conversation_lists?: boolean;
};

export type UpdateTeammate = {
    /**
     * New username. It must be unique and can only contains lowercase letters, numbers and underscores.
     */
    username?: string;
    /**
     * New first name
     */
    first_name?: string;
    /**
     * New last name
     */
    last_name?: string;
    /**
     * New availability status
     */
    is_available?: boolean;
    custom_fields?: CustomFieldParameter;
};

export type UpdateTeammateGroup = {
    /**
     * Name of the teammate group
     */
    name?: string;
    /**
     * Description of the teammate group
     */
    description?: string;
    /**
     * Permissions for the teammate group
     */
    permissions?: {
        /**
         * Permissions for accessing contact lists. This only applies if shared contacts permissions are enabled.
         */
        contacts?: {
            /**
             * One of 'all', 'contact_groups', 'contact_lists', or 'none'.
             */
            access: string;
            /**
             * List of contact group ids. Can only be specified if access is set to 'contact_groups'. ⚠️ Deprecated. Use access 'contact_lists' and 'contact_list_ids' instead.
             * @deprecated
             */
            contact_group_ids?: Array<string>;
            /**
             * List of contact list ids. Can only be specified if access is set to 'contact_lists'.
             */
            contact_list_ids?: Array<string>;
        };
    };
};

/**
 * [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties `before`, `after`, `types`, or `inboxes`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of [event types](https://dev.frontapp.com/reference/events). `inboxes` should be a list of inbox IDs.
 */
export type ActivityQuery = string;

/**
 * [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
 */
export type CardQuery = string;

/**
 * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
 */
export type ConversationQuery = string;

/**
 * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `types`, whose value should be a list of link types. Links created via the API have type `web` and links created by application objects have type `app_<uid>`, matching the app UID where the object is configured. There are also types `jira`, `asana`, `monday`, `trello`, and `github`, which correspond to the integrations built by Front.
 */
export type TopicQuery = string;

/**
 * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
 */
export type PageToken = string;

/**
 * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
 */
export type Limit = number;

/**
 * Field used to sort the accounts. Either `created_at` or `updated_at`.
 */
export type SortByAccounts = string;

/**
 * Field used to sort the events. Only supports `created_at`.
 */
export type SortByActivities = string;

/**
 * Field used to sort the contacts. Either `created_at` or `updated_at`.
 */
export type SortByCards = string;

/**
 * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
 */
export type SortByCannedAnswers = string;

/**
 * Field used to sort the message template folders. Either `created_at` or `updated_at`.
 */
export type SortByCannedAnswerFolders = string;

/**
 * Field used to sort the conversations. Only supports `date`.
 */
export type SortByConversations = string;

/**
 * Field used to sort the messages. Only supports `created_at`.
 */
export type SortByConversationMessages = string;

/**
 * Field used to sort the links. Only supports `id`.
 */
export type SortByLinks = string;

/**
 * Field used to sort the tags. Only supports `id`.
 */
export type SortByTags = string;

/**
 * Order by which results should be sorted
 */
export const SortOrder = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

/**
 * Order by which results should be sorted
 */
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];

export type ListAccountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the accounts. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/accounts';
};

export type ListAccountsResponses = {
    /**
     * Array of accounts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<AccountResponse>;
    };
};

export type ListAccountsResponse = ListAccountsResponses[keyof ListAccountsResponses];

export type CreateAccountData = {
    body?: Account;
    path?: never;
    query?: never;
    url: '/accounts';
};

export type CreateAccountResponses = {
    /**
     * An Account
     */
    201: AccountResponse;
};

export type CreateAccountResponse = CreateAccountResponses[keyof CreateAccountResponses];

export type ListAccountCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/accounts/custom_fields';
};

export type ListAccountCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListAccountCustomFieldsResponse = ListAccountCustomFieldsResponses[keyof ListAccountCustomFieldsResponses];

export type DeleteAnAccountData = {
    body?: never;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: never;
    url: '/accounts/{account_id}';
};

export type DeleteAnAccountResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteAnAccountResponse = DeleteAnAccountResponses[keyof DeleteAnAccountResponses];

export type FetchAnAccountData = {
    body?: never;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: never;
    url: '/accounts/{account_id}';
};

export type FetchAnAccountResponses = {
    /**
     * An Account
     */
    200: AccountResponse;
};

export type FetchAnAccountResponse = FetchAnAccountResponses[keyof FetchAnAccountResponses];

export type UpdateAccountData = {
    body?: AccountPatch;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: never;
    url: '/accounts/{account_id}';
};

export type UpdateAccountResponses = {
    /**
     * An Account
     */
    200: AccountResponse;
};

export type UpdateAccountResponse = UpdateAccountResponses[keyof UpdateAccountResponses];

export type RemoveContactFromAccountData = {
    body?: ContactIds;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: never;
    url: '/accounts/{account_id}/contacts';
};

export type RemoveContactFromAccountResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveContactFromAccountResponse = RemoveContactFromAccountResponses[keyof RemoveContactFromAccountResponses];

export type ListAccountContactsData = {
    body?: never;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: {
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Field used to sort the contacts. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/accounts/{account_id}/contacts';
};

export type ListAccountContactsResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListAccountContactsResponse = ListAccountContactsResponses[keyof ListAccountContactsResponses];

export type AddContactToAccountData = {
    body?: ContactIds;
    path: {
        /**
         * The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        account_id: string;
    };
    query?: never;
    url: '/accounts/{account_id}/contacts';
};

export type AddContactToAccountResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddContactToAccountResponse = AddContactToAccountResponses[keyof AddContactToAccountResponses];

export type CreateAnalyticsExportData = {
    body?: AnalyticsExportRequest;
    path?: never;
    query?: never;
    url: '/analytics/exports';
};

export type CreateAnalyticsExportResponses = {
    /**
     * An analytics export.
     */
    201: AnalyticsExportResponse;
};

export type CreateAnalyticsExportResponse = CreateAnalyticsExportResponses[keyof CreateAnalyticsExportResponses];

export type GetAnalyticsExportData = {
    body?: never;
    path: {
        /**
         * The export ID.
         */
        export_id: string;
    };
    query?: never;
    url: '/analytics/exports/{export_id}';
};

export type GetAnalyticsExportResponses = {
    /**
     * An analytics export.
     */
    200: AnalyticsExportResponse;
};

export type GetAnalyticsExportResponse = GetAnalyticsExportResponses[keyof GetAnalyticsExportResponses];

export type CreateAnalyticsReportData = {
    body?: AnalyticsReportRequest;
    path?: never;
    query?: never;
    url: '/analytics/reports';
};

export type CreateAnalyticsReportResponses = {
    /**
     * An analytics report.
     */
    201: AnalyticsReportResponse;
};

export type CreateAnalyticsReportResponse = CreateAnalyticsReportResponses[keyof CreateAnalyticsReportResponses];

export type GetAnalyticsReportData = {
    body?: never;
    path: {
        /**
         * The report UID.
         */
        report_uid: string;
    };
    query?: never;
    url: '/analytics/reports/{report_uid}';
};

export type GetAnalyticsReportResponses = {
    /**
     * An analytics report.
     */
    200: AnalyticsReportResponse;
};

export type GetAnalyticsReportResponse = GetAnalyticsReportResponses[keyof GetAnalyticsReportResponses];

export type TriggerAppEventData = {
    body?: AppEvent;
    path: {
        /**
         * The application UID
         */
        application_uid: string;
    };
    query?: never;
    url: '/applications/{application_uid}/events';
};

export type TriggerAppEventResponses = {
    /**
     * No content
     */
    204: void;
};

export type TriggerAppEventResponse = TriggerAppEventResponses[keyof TriggerAppEventResponses];

export type ListChannelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/channels';
};

export type ListChannelsResponses = {
    /**
     * Array of Channels
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ChannelResponse>;
    };
};

export type ListChannelsResponse = ListChannelsResponses[keyof ListChannelsResponses];

export type GetChannelData = {
    body?: never;
    path: {
        /**
         * The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}';
};

export type GetChannelResponses = {
    /**
     * A channel
     */
    200: ChannelResponse;
};

export type GetChannelResponse = GetChannelResponses[keyof GetChannelResponses];

export type UpdateChannelData = {
    /**
     * Channel details
     */
    body?: UpdateChannel;
    path: {
        /**
         * The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}';
};

export type UpdateChannelResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateChannelResponse = UpdateChannelResponses[keyof UpdateChannelResponses];

export type CreateDraftData = {
    body?: CreateDraft;
    path: {
        /**
         * The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}/drafts';
};

export type CreateDraftResponses = {
    /**
     * A message
     */
    200: MessageResponse;
};

export type CreateDraftResponse = CreateDraftResponses[keyof CreateDraftResponses];

export type ReceiveCustomMessagesData = {
    body?: CustomMessage;
    path: {
        /**
         * The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}/incoming_messages';
};

export type ReceiveCustomMessagesResponses = {
    /**
     * An accepted response acknowledging your request to create a message
     */
    202: {
        /**
         * The status of the incoming message. Should return 'accepted' if successful.
         */
        status?: string;
        /**
         * Message unique identifier. Use the message UID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1) to check whether the [message is created successfully](https://dev.frontapp.com/reference/messages#creating-a-new-message).
         */
        message_uid?: string;
    };
};

export type ReceiveCustomMessagesResponse = ReceiveCustomMessagesResponses[keyof ReceiveCustomMessagesResponses];

export type CreateMessageData = {
    body?: OutboundMessage;
    path: {
        /**
         * The sending channel ID. Alternatively, you can supply the sending channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}/messages';
};

export type CreateMessageResponses = {
    /**
     * An accepted response acknowledging your request to create a message
     */
    202: {
        /**
         * The status of the incoming message. Should return 'accepted' if successful.
         */
        status?: string;
        /**
         * Message unique identifier. Use the message UID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1) to check whether the [message is created successfully](https://dev.frontapp.com/reference/messages#creating-a-new-message).
         */
        message_uid?: string;
    };
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type ValidateChannelData = {
    body?: never;
    path: {
        /**
         * The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        channel_id: string;
    };
    query?: never;
    url: '/channels/{channel_id}/validate';
};

export type ValidateChannelResponses = {
    /**
     * Request accepted
     */
    202: {
        status?: string;
    };
};

export type ValidateChannelResponse = ValidateChannelResponses[keyof ValidateChannelResponses];

export type GetCommentData = {
    body?: never;
    path: {
        /**
         * The Comment ID
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}';
};

export type GetCommentResponses = {
    /**
     * A comment
     */
    200: CommentResponse;
};

export type GetCommentResponse = GetCommentResponses[keyof GetCommentResponses];

export type UpdateCommentData = {
    body?: UpdateComment;
    path: {
        /**
         * The Comment ID
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}/';
};

export type UpdateCommentResponses = {
    /**
     * A comment
     */
    200: CommentResponse;
};

export type UpdateCommentResponse = UpdateCommentResponses[keyof UpdateCommentResponses];

export type DownloadAttachmentForACommentData = {
    body?: never;
    path: {
        /**
         * The Comment ID
         */
        comment_id: string;
        /**
         * The Attachment ID
         */
        attachment_link_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}/download/{attachment_link_id}';
};

export type DownloadAttachmentForACommentResponses = {
    /**
     * An attachment
     */
    200: Attachment;
};

export type DownloadAttachmentForACommentResponse = DownloadAttachmentForACommentResponses[keyof DownloadAttachmentForACommentResponses];

export type ListCommentMentionsData = {
    body?: never;
    path: {
        /**
         * The Comment ID
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}/mentions';
};

export type ListCommentMentionsResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListCommentMentionsResponse = ListCommentMentionsResponses[keyof ListCommentMentionsResponses];

export type AddCommentReplyData = {
    body?: CreateComment;
    path: {
        /**
         * The comment ID to reply to
         */
        comment_id: string;
    };
    query?: never;
    url: '/comments/{comment_id}/replies';
};

export type AddCommentReplyResponses = {
    /**
     * A comment
     */
    201: CommentResponse;
};

export type AddCommentReplyResponse = AddCommentReplyResponses[keyof AddCommentReplyResponses];

export type ListAllCompanyRulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/rules';
};

export type ListAllCompanyRulesResponses = {
    /**
     * Array of Rules
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<RuleResponse>;
    };
};

export type ListAllCompanyRulesResponse = ListAllCompanyRulesResponses[keyof ListAllCompanyRulesResponses];

export type ListCompanyTicketStatusesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/company/statuses';
};

export type ListCompanyTicketStatusesErrors = {
    /**
     * Ticketing is not enabled, therefore, there are no ticket statuses.
     */
    404: unknown;
};

export type ListCompanyTicketStatusesResponses = {
    /**
     * Array of ticket statuses
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<StatusResponse>;
    };
};

export type ListCompanyTicketStatusesResponse = ListCompanyTicketStatusesResponses[keyof ListCompanyTicketStatusesResponses];

export type GetTicketStatusByIdData = {
    body?: never;
    path: {
        /**
         * The ticket status ID
         */
        status_id: string;
    };
    query?: never;
    url: '/company/statuses/{status_id}';
};

export type GetTicketStatusByIdResponses = {
    /**
     * A ticket status
     */
    200: StatusResponse;
};

export type GetTicketStatusByIdResponse = GetTicketStatusByIdResponses[keyof GetTicketStatusByIdResponses];

export type ListCompanyTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the tags. Only supports `id`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/company/tags';
};

export type ListCompanyTagsResponses = {
    /**
     * Array of Tags
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TagResponse>;
    };
};

export type ListCompanyTagsResponse = ListCompanyTagsResponses[keyof ListCompanyTagsResponses];

export type CreateCompanyTagData = {
    /**
     * Tag to create
     */
    body?: CreateTag;
    path?: never;
    query?: never;
    url: '/company/tags';
};

export type CreateCompanyTagResponses = {
    /**
     * A tag
     */
    201: TagResponse;
};

export type CreateCompanyTagResponse = CreateCompanyTagResponses[keyof CreateCompanyTagResponses];

export type ListGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contact_groups';
};

export type ListGroupsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateGroupData = {
    body?: CreateContactList;
    path?: never;
    query?: never;
    url: '/contact_groups';
};

export type CreateGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateGroupResponse = CreateGroupResponses[keyof CreateGroupResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        /**
         * The contact group ID
         */
        contact_group_id: string;
    };
    query?: never;
    url: '/contact_groups/{contact_group_id}';
};

export type DeleteGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type RemoveContactsFromGroupData = {
    body?: RemoveContactsFromList;
    path: {
        /**
         * The contact group ID
         */
        contact_group_id: string;
    };
    query?: never;
    url: '/contact_groups/{contact_group_id}/contacts';
};

export type RemoveContactsFromGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveContactsFromGroupResponse = RemoveContactsFromGroupResponses[keyof RemoveContactsFromGroupResponses];

export type ListContactsInGroupData = {
    body?: never;
    path: {
        /**
         * The contact group ID
         */
        contact_group_id: string;
    };
    query?: {
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
    };
    url: '/contact_groups/{contact_group_id}/contacts';
};

export type ListContactsInGroupResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListContactsInGroupResponse = ListContactsInGroupResponses[keyof ListContactsInGroupResponses];

export type AddContactsToGroupData = {
    body?: AddContactsToList;
    path: {
        /**
         * The contact group ID
         */
        contact_group_id: string;
    };
    query?: never;
    url: '/contact_groups/{contact_group_id}/contacts';
};

export type AddContactsToGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddContactsToGroupResponse = AddContactsToGroupResponses[keyof AddContactsToGroupResponses];

export type ListContactListsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contact_lists';
};

export type ListContactListsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListContactListsResponse = ListContactListsResponses[keyof ListContactListsResponses];

export type CreateContactListData = {
    body?: CreateContactList;
    path?: never;
    query?: never;
    url: '/contact_lists';
};

export type CreateContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateContactListResponse = CreateContactListResponses[keyof CreateContactListResponses];

export type DeleteContactListData = {
    body?: never;
    path: {
        /**
         * The contact list ID
         */
        contact_list_id: string;
    };
    query?: never;
    url: '/contact_lists/{contact_list_id}';
};

export type DeleteContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteContactListResponse = DeleteContactListResponses[keyof DeleteContactListResponses];

export type RemoveContactsFromContactListData = {
    body?: RemoveContactsFromList;
    path: {
        /**
         * The contact list ID
         */
        contact_list_id: string;
    };
    query?: never;
    url: '/contact_lists/{contact_list_id}/contacts';
};

export type RemoveContactsFromContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveContactsFromContactListResponse = RemoveContactsFromContactListResponses[keyof RemoveContactsFromContactListResponses];

export type ListContactsInContactListData = {
    body?: never;
    path: {
        /**
         * The contact list ID
         */
        contact_list_id: string;
    };
    query?: {
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
    };
    url: '/contact_lists/{contact_list_id}/contacts';
};

export type ListContactsInContactListResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListContactsInContactListResponse = ListContactsInContactListResponses[keyof ListContactsInContactListResponses];

export type AddContactsToContactListData = {
    body?: AddContactsToList;
    path: {
        /**
         * The contact list ID
         */
        contact_list_id: string;
    };
    query?: never;
    url: '/contact_lists/{contact_list_id}/contacts';
};

export type AddContactsToContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddContactsToContactListResponse = AddContactsToContactListResponses[keyof AddContactsToContactListResponses];

export type ListContactsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the contacts. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/contacts';
};

export type ListContactsResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListContactsResponse = ListContactsResponses[keyof ListContactsResponses];

export type CreateContactData = {
    body?: CreateContact;
    path?: never;
    query?: never;
    url: '/contacts';
};

export type CreateContactResponses = {
    /**
     * A contact
     */
    201: ContactResponse;
};

export type CreateContactResponse = CreateContactResponses[keyof CreateContactResponses];

export type ListContactCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/contacts/custom_fields';
};

export type ListContactCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListContactCustomFieldsResponse = ListContactCustomFieldsResponses[keyof ListContactCustomFieldsResponses];

export type MergeContactsData = {
    body?: MergeContacts;
    path?: never;
    query?: never;
    url: '/contacts/merge';
};

export type MergeContactsResponses = {
    /**
     * A contact
     */
    200: ContactResponse;
};

export type MergeContactsResponse = MergeContactsResponses[keyof MergeContactsResponses];

export type DeleteAContactData = {
    body?: never;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}';
};

export type DeleteAContactResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteAContactResponse = DeleteAContactResponses[keyof DeleteAContactResponses];

export type GetContactData = {
    body?: never;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}';
};

export type GetContactResponses = {
    /**
     * A contact
     */
    200: ContactResponse;
};

export type GetContactResponse = GetContactResponses[keyof GetContactResponses];

export type UpdateAContactData = {
    body?: Contact;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}';
};

export type UpdateAContactResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateAContactResponse = UpdateAContactResponses[keyof UpdateAContactResponses];

export type ListContactConversationsData = {
    body?: never;
    path: {
        /**
         * The Contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/contacts/{contact_id}/conversations';
};

export type ListContactConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListContactConversationsResponse = ListContactConversationsResponses[keyof ListContactConversationsResponses];

export type DeleteContactHandleData = {
    body?: DeleteContactHandle;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}/handles';
};

export type DeleteContactHandleResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteContactHandleResponse = DeleteContactHandleResponses[keyof DeleteContactHandleResponses];

export type AddContactHandleData = {
    body?: ContactHandle;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}/handles';
};

export type AddContactHandleResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddContactHandleResponse = AddContactHandleResponses[keyof AddContactHandleResponses];

export type ListNotesData = {
    body?: never;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}/notes';
};

export type ListNotesResponses = {
    /**
     * Array of contact notes
     */
    202: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactNoteResponses>;
    };
};

export type ListNotesResponse = ListNotesResponses[keyof ListNotesResponses];

export type AddNoteData = {
    body?: CreateContactNote;
    path: {
        /**
         * The contact ID. Alternatively, you can supply the contact's source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        contact_id: string;
    };
    query?: never;
    url: '/contacts/{contact_id}/notes';
};

export type AddNoteResponses = {
    /**
     * A contact note
     */
    201: ContactNoteResponses;
};

export type AddNoteResponse = AddNoteResponses[keyof AddNoteResponses];

export type ListConversationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the conversations. Only supports `date`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/conversations';
};

export type ListConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListConversationsResponse = ListConversationsResponses[keyof ListConversationsResponses];

export type CreateConversationData = {
    body?: CreateConversation;
    path?: never;
    query?: never;
    url: '/conversations';
};

export type CreateConversationResponses = {
    /**
     * A conversation
     */
    201: ConversationResponse;
};

export type CreateConversationResponse = CreateConversationResponses[keyof CreateConversationResponses];

export type ListConversationCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/conversations/custom_fields';
};

export type ListConversationCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListConversationCustomFieldsResponse = ListConversationCustomFieldsResponses[keyof ListConversationCustomFieldsResponses];

export type SearchConversationsData = {
    body?: never;
    path: {
        /**
         * Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details.
         */
        query: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/conversations/search/{query}';
};

export type SearchConversationsResponses = {
    /**
     * Array of conversation search results
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        /**
         * Total number of matching conversations
         */
        _total?: number;
        _results?: Array<ConversationResponse>;
    };
};

export type SearchConversationsResponse = SearchConversationsResponses[keyof SearchConversationsResponses];

export type GetConversationByIdData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}';
};

export type GetConversationByIdResponses = {
    /**
     * A conversation
     */
    200: ConversationResponse;
};

export type GetConversationByIdResponse = GetConversationByIdResponses[keyof GetConversationByIdResponses];

export type UpdateConversationData = {
    body?: UpdateConversation;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}';
};

export type UpdateConversationErrors = {
    /**
     * Invalid input, such as invalid custom fields
     */
    400: unknown;
};

export type UpdateConversationResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateConversationResponse = UpdateConversationResponses[keyof UpdateConversationResponses];

export type UpdateConversationAssigneeData = {
    body?: UpdateConversationAssignee;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/assignee';
};

export type UpdateConversationAssigneeResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateConversationAssigneeResponse = UpdateConversationAssigneeResponses[keyof UpdateConversationAssigneeResponses];

export type ListConversationCommentsData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/comments';
};

export type ListConversationCommentsResponses = {
    /**
     * Array of Comments
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CommentResponse>;
    };
};

export type ListConversationCommentsResponse = ListConversationCommentsResponses[keyof ListConversationCommentsResponses];

export type AddCommentData = {
    body?: CreateComment;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/comments';
};

export type AddCommentResponses = {
    /**
     * A comment
     */
    201: CommentResponse;
};

export type AddCommentResponse = AddCommentResponses[keyof AddCommentResponses];

export type ListConversationDraftsData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/drafts';
};

export type ListConversationDraftsResponses = {
    /**
     * Array of messages
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageResponse>;
    };
};

export type ListConversationDraftsResponse = ListConversationDraftsResponses[keyof ListConversationDraftsResponses];

export type CreateDraftReplyData = {
    body?: ReplyDraft;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/drafts';
};

export type CreateDraftReplyResponses = {
    /**
     * A message
     */
    200: MessageResponse;
};

export type CreateDraftReplyResponse = CreateDraftReplyResponses[keyof CreateDraftReplyResponses];

export type ListConversationEventsData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/conversations/{conversation_id}/events';
};

export type ListConversationEventsResponses = {
    /**
     * Array of events
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<EventResponse>;
    };
};

export type ListConversationEventsResponse = ListConversationEventsResponses[keyof ListConversationEventsResponses];

export type DeleteConversationFollowersData = {
    body?: {
        /**
         * IDs of the teammate to remove from the followers list. Alternatively, you can supply the teammates as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_ids: Array<string>;
    };
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/followers';
};

export type DeleteConversationFollowersResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteConversationFollowersResponse = DeleteConversationFollowersResponses[keyof DeleteConversationFollowersResponses];

export type ListConversationFollowersData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/followers';
};

export type ListConversationFollowersResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListConversationFollowersResponse = ListConversationFollowersResponses[keyof ListConversationFollowersResponses];

export type AddConversationFollowersData = {
    body?: {
        /**
         * IDs of the teammate to add to the followers list. Alternatively, you can supply the teammates as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_ids: Array<string>;
    };
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/followers';
};

export type AddConversationFollowersResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddConversationFollowersResponse = AddConversationFollowersResponses[keyof AddConversationFollowersResponses];

export type ListConversationInboxesData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/inboxes';
};

export type ListConversationInboxesResponses = {
    /**
     * Array of Inboxes
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<InboxResponse>;
    };
};

export type ListConversationInboxesResponse = ListConversationInboxesResponses[keyof ListConversationInboxesResponses];

export type RemoveConversationLinksData = {
    body?: {
        /**
         * Link IDs to remove.
         */
        link_ids: Array<string>;
    };
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/links';
};

export type RemoveConversationLinksResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveConversationLinksResponse = RemoveConversationLinksResponses[keyof RemoveConversationLinksResponses];

export type AddConversationLinkData = {
    body?: {
        /**
         * Link IDs to add. Either link_ids or link_external_urls must be specified but not both
         */
        link_ids?: Array<string>;
        /**
         * Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both
         */
        link_external_urls?: Array<string>;
    };
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/links';
};

export type AddConversationLinkResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddConversationLinkResponse = AddConversationLinkResponses[keyof AddConversationLinkResponses];

export type ListConversationMessagesData = {
    body?: never;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the messages. Only supports `created_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/conversations/{conversation_id}/messages';
};

export type ListConversationMessagesResponses = {
    /**
     * Array of messages
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageResponse>;
    };
};

export type ListConversationMessagesResponse = ListConversationMessagesResponses[keyof ListConversationMessagesResponses];

export type CreateMessageReplyData = {
    body?: OutboundReplyMessage;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/messages';
};

export type CreateMessageReplyResponses = {
    /**
     * An accepted response acknowledging your request to create a message
     */
    202: {
        /**
         * The status of the incoming message. Should return 'accepted' if successful.
         */
        status?: string;
        /**
         * Message unique identifier. Use the message UID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1) to check whether the [message is created successfully](https://dev.frontapp.com/reference/messages#creating-a-new-message).
         */
        message_uid?: string;
    };
};

export type CreateMessageReplyResponse = CreateMessageReplyResponses[keyof CreateMessageReplyResponses];

export type UpdateConversationRemindersData = {
    body?: UpdateConversationReminders;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/reminders';
};

export type UpdateConversationRemindersResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateConversationRemindersResponse = UpdateConversationRemindersResponses[keyof UpdateConversationRemindersResponses];

export type RemoveConversationTagData = {
    /**
     * Tag IDs to remove
     */
    body?: TagIds;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/tags';
};

export type RemoveConversationTagResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveConversationTagResponse = RemoveConversationTagResponses[keyof RemoveConversationTagResponses];

export type AddConversationTagData = {
    /**
     * Tag IDs to add
     */
    body?: TagIds;
    path: {
        /**
         * The conversation ID
         */
        conversation_id: string;
    };
    query?: never;
    url: '/conversations/{conversation_id}/tags';
};

export type AddConversationTagResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddConversationTagResponse = AddConversationTagResponses[keyof AddConversationTagResponses];

export type ListCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/custom_fields';
};

export type ListCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListCustomFieldsResponse = ListCustomFieldsResponses[keyof ListCustomFieldsResponses];

export type DownloadAttachmentData = {
    body?: never;
    path: {
        /**
         * The Attachment ID
         */
        attachment_link_id: string;
    };
    query?: never;
    url: '/download/{attachment_link_id}';
};

export type DownloadAttachmentResponses = {
    /**
     * An attachment
     */
    200: Attachment;
};

export type DownloadAttachmentResponse = DownloadAttachmentResponses[keyof DownloadAttachmentResponses];

export type DeleteDraftData = {
    body?: DeleteDraft;
    path: {
        /**
         * The draft ID
         */
        draft_id: string;
    };
    query?: never;
    url: '/drafts/{draft_id}';
};

export type DeleteDraftResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteDraftResponse = DeleteDraftResponses[keyof DeleteDraftResponses];

export type EditDraftData = {
    body?: EditDraft;
    path: {
        /**
         * The draft ID
         */
        message_id: string;
    };
    query?: never;
    url: '/drafts/{message_id}/';
};

export type EditDraftResponses = {
    /**
     * A message
     */
    200: MessageResponse;
};

export type EditDraftResponse = EditDraftResponses[keyof EditDraftResponses];

export type ListEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties `before`, `after`, `types`, or `inboxes`. `before` and `after` should be a timestamp in seconds with up to 3 decimal places. `types` should be a list of [event types](https://dev.frontapp.com/reference/events). `inboxes` should be a list of inbox IDs.
         */
        q?: string;
        /**
         * Max number of results per page (max 15)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the events. Only supports `created_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/events';
};

export type ListEventsResponses = {
    /**
     * Array of events
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<EventResponse>;
    };
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * The event ID
         */
        event_id: string;
    };
    query?: never;
    url: '/events/{event_id}';
};

export type GetEventResponses = {
    /**
     * An event
     */
    200: EventResponse;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type ListInboxesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/inboxes';
};

export type ListInboxesResponses = {
    /**
     * Array of Inboxes
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<InboxResponse>;
    };
};

export type ListInboxesResponse = ListInboxesResponses[keyof ListInboxesResponses];

export type CreateInboxData = {
    /**
     * Inbox details
     */
    body?: CreateInbox;
    path?: never;
    query?: never;
    url: '/inboxes';
};

export type CreateInboxResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateInboxResponse = CreateInboxResponses[keyof CreateInboxResponses];

export type ListInboxCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/inboxes/custom_fields';
};

export type ListInboxCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListInboxCustomFieldsResponse = ListInboxCustomFieldsResponses[keyof ListInboxCustomFieldsResponses];

export type GetInboxData = {
    body?: never;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}';
};

export type GetInboxResponses = {
    /**
     * An inbox
     */
    200: InboxResponse;
};

export type GetInboxResponse = GetInboxResponses[keyof GetInboxResponses];

export type ListInboxChannelsData = {
    body?: never;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/channels';
};

export type ListInboxChannelsResponses = {
    /**
     * Array of Channels
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ChannelResponse>;
    };
};

export type ListInboxChannelsResponse = ListInboxChannelsResponses[keyof ListInboxChannelsResponses];

export type CreateAChannelData = {
    /**
     * Channel to create
     */
    body?: CreateChannel;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/channels';
};

export type CreateAChannelResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateAChannelResponse = CreateAChannelResponses[keyof CreateAChannelResponses];

export type ListInboxConversationsData = {
    body?: never;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/inboxes/{inbox_id}/conversations';
};

export type ListInboxConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListInboxConversationsResponse = ListInboxConversationsResponses[keyof ListInboxConversationsResponses];

export type ImportInboxMessageData = {
    body?: ImportMessage;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/imported_messages';
};

export type ImportInboxMessageResponses = {
    /**
     * An accepted response acknowledging your request to create a message
     */
    202: {
        /**
         * The status of the incoming message. Should return 'accepted' if successful.
         */
        status?: string;
        /**
         * Message unique identifier. Use the message UID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1) to check whether the [message is created successfully](https://dev.frontapp.com/reference/messages#creating-a-new-message).
         */
        message_uid?: string;
    };
};

export type ImportInboxMessageResponse = ImportInboxMessageResponses[keyof ImportInboxMessageResponses];

export type RemovesInboxAccessData = {
    /**
     * Teammate IDs to remove. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/teammates';
};

export type RemovesInboxAccessResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemovesInboxAccessResponse = RemovesInboxAccessResponses[keyof RemovesInboxAccessResponses];

export type ListInboxAccessData = {
    body?: never;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/teammates';
};

export type ListInboxAccessResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListInboxAccessResponse = ListInboxAccessResponses[keyof ListInboxAccessResponses];

export type AddInboxAccessData = {
    /**
     * Teammate IDs to add. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Inbox ID
         */
        inbox_id: string;
    };
    query?: never;
    url: '/inboxes/{inbox_id}/teammates';
};

export type AddInboxAccessResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddInboxAccessResponse = AddInboxAccessResponses[keyof AddInboxAccessResponses];

export type DeleteAnArticleData = {
    body?: never;
    path: {
        /**
         * The ID of the article to delete
         */
        article_id: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}';
};

export type DeleteAnArticleResponses = {
    /**
     * A knowledge base article
     */
    200: KnowledgeBaseArticleSlimResponse;
};

export type DeleteAnArticleResponse = DeleteAnArticleResponses[keyof DeleteAnArticleResponses];

export type GetAKnowledgeBaseArticleData = {
    body?: never;
    path: {
        /**
         * The ID of the article to fetch
         */
        article_id: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}';
};

export type GetAKnowledgeBaseArticleResponses = {
    /**
     * A knowledge base article
     */
    200: KnowledgeBaseArticleSlimResponse;
};

export type GetAKnowledgeBaseArticleResponse = GetAKnowledgeBaseArticleResponses[keyof GetAKnowledgeBaseArticleResponses];

export type GetKnowledgeBaseArticleWithContentInDefaultLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the article to fetch
         */
        article_id: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}/content';
};

export type GetKnowledgeBaseArticleWithContentInDefaultLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    200: KnowledgeBaseArticleResponse;
};

export type GetKnowledgeBaseArticleWithContentInDefaultLocaleResponse = GetKnowledgeBaseArticleWithContentInDefaultLocaleResponses[keyof GetKnowledgeBaseArticleWithContentInDefaultLocaleResponses];

export type UpdateArticleContentInDefaultLocaleData = {
    body?: KnowledgeBaseArticlePatch;
    path: {
        /**
         * The ID of the article to update
         */
        article_id: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}/content';
};

export type UpdateArticleContentInDefaultLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    200: KnowledgeBaseArticleResponse;
};

export type UpdateArticleContentInDefaultLocaleResponse = UpdateArticleContentInDefaultLocaleResponses[keyof UpdateArticleContentInDefaultLocaleResponses];

export type DownloadAttachmentFromAnArticleData = {
    body?: never;
    path: {
        /**
         * The ID of the article
         */
        article_id: string;
        /**
         * The ID of the file to download
         */
        attachment_id: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}/download/{attachment_id}';
};

export type DownloadAttachmentFromAnArticleResponses = {
    /**
     * An attachment
     */
    200: Attachment;
};

export type DownloadAttachmentFromAnArticleResponse = DownloadAttachmentFromAnArticleResponses[keyof DownloadAttachmentFromAnArticleResponses];

export type GetKnowledgeBaseArticleWithContentInSpecifiedLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the article to fetch
         */
        article_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}/locales/{locale}/content';
};

export type GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    200: KnowledgeBaseArticleResponse;
};

export type GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponse = GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponses[keyof GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponses];

export type UpdateArticleContentInSpecifiedLocaleData = {
    body?: KnowledgeBaseArticlePatch;
    path: {
        /**
         * The ID of the article to update
         */
        article_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_base_articles/{article_id}/locales/{locale}/content';
};

export type UpdateArticleContentInSpecifiedLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    200: KnowledgeBaseArticleResponse;
};

export type UpdateArticleContentInSpecifiedLocaleResponse = UpdateArticleContentInSpecifiedLocaleResponses[keyof UpdateArticleContentInSpecifiedLocaleResponses];

export type DeleteAKnowledgeBaseCategoryData = {
    body?: never;
    path: {
        /**
         * The ID of the category to delete
         */
        category_id: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}';
};

export type DeleteAKnowledgeBaseCategoryResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteAKnowledgeBaseCategoryResponse = DeleteAKnowledgeBaseCategoryResponses[keyof DeleteAKnowledgeBaseCategoryResponses];

export type GetAKnowledgeBaseCategoryData = {
    body?: never;
    path: {
        /**
         * The ID of the category to fetch
         */
        category_id: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}';
};

export type GetAKnowledgeBaseCategoryResponses = {
    /**
     * A knowledge base category
     */
    200: KnowledgeBaseCategorySlimResponse;
};

export type GetAKnowledgeBaseCategoryResponse = GetAKnowledgeBaseCategoryResponses[keyof GetAKnowledgeBaseCategoryResponses];

export type ListArticlesInACategoryData = {
    body?: never;
    path: {
        /**
         * The ID of the category
         */
        category_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/knowledge_base_categories/{category_id}/articles';
};

export type ListArticlesInACategoryResponses = {
    /**
     * Array of knowledge base articles
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<KnowledgeBaseArticleSlimResponse>;
    };
};

export type ListArticlesInACategoryResponse = ListArticlesInACategoryResponses[keyof ListArticlesInACategoryResponses];

export type GetKnowledgeBaseCategoryContentInDefaultLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the category to fetch
         */
        category_id: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}/content';
};

export type GetKnowledgeBaseCategoryContentInDefaultLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    200: KnowledgeBaseCategoryResponse;
};

export type GetKnowledgeBaseCategoryContentInDefaultLocaleResponse = GetKnowledgeBaseCategoryContentInDefaultLocaleResponses[keyof GetKnowledgeBaseCategoryContentInDefaultLocaleResponses];

export type UpdateKnowledgeBaseCategoryInDefaultLocaleData = {
    body?: KnowledgeBaseCategoryPatch;
    path: {
        /**
         * The ID of the category to update
         */
        category_id: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}/content';
};

export type UpdateKnowledgeBaseCategoryInDefaultLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    200: KnowledgeBaseCategoryResponse;
};

export type UpdateKnowledgeBaseCategoryInDefaultLocaleResponse = UpdateKnowledgeBaseCategoryInDefaultLocaleResponses[keyof UpdateKnowledgeBaseCategoryInDefaultLocaleResponses];

export type GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the category to fetch
         */
        category_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}/locales/{locale}/content';
};

export type GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    200: KnowledgeBaseCategoryResponse;
};

export type GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponse = GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponses[keyof GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponses];

export type UpdateKnowledgeBaseCategoryInSpecifiedLocaleData = {
    body?: KnowledgeBaseCategoryPatch;
    path: {
        /**
         * The ID of the category to update
         */
        category_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_base_categories/{category_id}/locales/{locale}/content';
};

export type UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    200: KnowledgeBaseCategoryResponse;
};

export type UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponse = UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponses[keyof UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponses];

export type ListKnowledgeBasesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/knowledge_bases';
};

export type ListKnowledgeBasesResponses = {
    /**
     * Array of knowledge bases
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<KnowledgeBaseSlimResponse>;
    };
};

export type ListKnowledgeBasesResponse = ListKnowledgeBasesResponses[keyof ListKnowledgeBasesResponses];

export type CreateAKnowledgeBaseData = {
    body?: KnowledgeBaseCreate;
    path?: never;
    query?: never;
    url: '/knowledge_bases';
};

export type CreateAKnowledgeBaseResponses = {
    /**
     * A knowledge base with content
     */
    201: KnowledgeBaseResponse;
};

export type CreateAKnowledgeBaseResponse = CreateAKnowledgeBaseResponses[keyof CreateAKnowledgeBaseResponses];

export type GetAKnowledgeBaseData = {
    body?: never;
    path: {
        /**
         * The ID of the knowledge base to fetch
         */
        knowledge_base_id: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}';
};

export type GetAKnowledgeBaseResponses = {
    /**
     * A knowledge base
     */
    200: KnowledgeBaseSlimResponse;
};

export type GetAKnowledgeBaseResponse = GetAKnowledgeBaseResponses[keyof GetAKnowledgeBaseResponses];

export type ListArticlesInAKnowledgeBaseData = {
    body?: never;
    path: {
        /**
         * The ID of the knowledge base
         */
        knowledge_base_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/knowledge_bases/{knowledge_base_id}/articles';
};

export type ListArticlesInAKnowledgeBaseResponses = {
    /**
     * Array of knowledge base articles
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<KnowledgeBaseArticleSlimResponse>;
    };
};

export type ListArticlesInAKnowledgeBaseResponse = ListArticlesInAKnowledgeBaseResponses[keyof ListArticlesInAKnowledgeBaseResponses];

export type CreateArticleInAKnowledgeBaseInDefaultLocaleData = {
    body?: KnowledgeBaseArticleCreate;
    path: {
        /**
         * The ID of the knowledge base to create the article in
         */
        knowledge_base_id: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/articles';
};

export type CreateArticleInAKnowledgeBaseInDefaultLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    201: KnowledgeBaseArticleResponse;
};

export type CreateArticleInAKnowledgeBaseInDefaultLocaleResponse = CreateArticleInAKnowledgeBaseInDefaultLocaleResponses[keyof CreateArticleInAKnowledgeBaseInDefaultLocaleResponses];

export type ListCategoriesInAKnowledgeBaseData = {
    body?: never;
    path: {
        /**
         * The ID of the knowledge base
         */
        knowledge_base_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/knowledge_bases/{knowledge_base_id}/categories';
};

export type ListCategoriesInAKnowledgeBaseResponses = {
    /**
     * Array of knowledge base categories
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<KnowledgeBaseCategorySlimResponse>;
    };
};

export type ListCategoriesInAKnowledgeBaseResponse = ListCategoriesInAKnowledgeBaseResponses[keyof ListCategoriesInAKnowledgeBaseResponses];

export type CreateKnowledgeBaseCategoryInDefaultLocaleData = {
    body?: KnowledgeBaseCategoryCreate;
    path: {
        /**
         * The ID of the knowledge base to create the category in
         */
        knowledge_base_id: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/categories';
};

export type CreateKnowledgeBaseCategoryInDefaultLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    201: KnowledgeBaseCategoryResponse;
};

export type CreateKnowledgeBaseCategoryInDefaultLocaleResponse = CreateKnowledgeBaseCategoryInDefaultLocaleResponses[keyof CreateKnowledgeBaseCategoryInDefaultLocaleResponses];

export type GetAKnowledgeBaseWithContentInDefaultLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the knowledge base to fetch
         */
        knowledge_base_id: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/content';
};

export type GetAKnowledgeBaseWithContentInDefaultLocaleResponses = {
    /**
     * A knowledge base with content
     */
    200: KnowledgeBaseResponse;
};

export type GetAKnowledgeBaseWithContentInDefaultLocaleResponse = GetAKnowledgeBaseWithContentInDefaultLocaleResponses[keyof GetAKnowledgeBaseWithContentInDefaultLocaleResponses];

export type UpdateKnowledgeBaseInDefaultLocaleData = {
    body?: KnowledgeBasePatch;
    path: {
        /**
         * The ID of the knowledge base to update
         */
        knowledge_base_id: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/content';
};

export type UpdateKnowledgeBaseInDefaultLocaleResponses = {
    /**
     * A knowledge base with content
     */
    200: KnowledgeBaseResponse;
};

export type UpdateKnowledgeBaseInDefaultLocaleResponse = UpdateKnowledgeBaseInDefaultLocaleResponses[keyof UpdateKnowledgeBaseInDefaultLocaleResponses];

export type CreateArticleInAKnowledgeBaseInSpecifiedLocaleData = {
    body?: KnowledgeBaseArticleCreate;
    path: {
        /**
         * The ID of the knowledge base to create the article in
         */
        knowledge_base_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article's content
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles';
};

export type CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponses = {
    /**
     * A knowledge base article with content
     */
    201: KnowledgeBaseArticleResponse;
};

export type CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponse = CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponses[keyof CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponses];

export type CreateKnowledgeBaseCategoryInSpecifiedLocaleData = {
    body?: KnowledgeBaseCategoryCreate;
    path: {
        /**
         * The ID of the knowledge base to create the category in
         */
        knowledge_base_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category's content
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories';
};

export type CreateKnowledgeBaseCategoryInSpecifiedLocaleResponses = {
    /**
     * A knowledge base category with content
     */
    201: KnowledgeBaseCategoryResponse;
};

export type CreateKnowledgeBaseCategoryInSpecifiedLocaleResponse = CreateKnowledgeBaseCategoryInSpecifiedLocaleResponses[keyof CreateKnowledgeBaseCategoryInSpecifiedLocaleResponses];

export type GetAKnowledgeBaseWithContentInSpecifiedLocaleData = {
    body?: never;
    path: {
        /**
         * The ID of the knowledge base to fetch
         */
        knowledge_base_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content';
};

export type GetAKnowledgeBaseWithContentInSpecifiedLocaleResponses = {
    /**
     * A knowledge base with content
     */
    200: KnowledgeBaseResponse;
};

export type GetAKnowledgeBaseWithContentInSpecifiedLocaleResponse = GetAKnowledgeBaseWithContentInSpecifiedLocaleResponses[keyof GetAKnowledgeBaseWithContentInSpecifiedLocaleResponses];

export type UpdateKnowledgeBaseInSpecifiedLocaleData = {
    body?: KnowledgeBasePatch;
    path: {
        /**
         * The ID of the knowledge base to update
         */
        knowledge_base_id: string;
        /**
         * The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content
         */
        locale: string;
    };
    query?: never;
    url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content';
};

export type UpdateKnowledgeBaseInSpecifiedLocaleResponses = {
    /**
     * A knowledge base with content
     */
    200: KnowledgeBaseResponse;
};

export type UpdateKnowledgeBaseInSpecifiedLocaleResponse = UpdateKnowledgeBaseInSpecifiedLocaleResponses[keyof UpdateKnowledgeBaseInSpecifiedLocaleResponses];

export type ListLinksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `types`, whose value should be a list of link types. Links created via the API have type `web` and links created by application objects have type `app_<uid>`, matching the app UID where the object is configured. There are also types `jira`, `asana`, `monday`, `trello`, and `github`, which correspond to the integrations built by Front.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the links. Only supports `id`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/links';
};

export type ListLinksResponses = {
    /**
     * Array of Links
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<LinkResponse>;
    };
};

export type ListLinksResponse = ListLinksResponses[keyof ListLinksResponses];

export type CreateLinkData = {
    /**
     * Link to create
     */
    body?: CreateLink;
    path?: never;
    query?: never;
    url: '/links';
};

export type CreateLinkResponses = {
    /**
     * A link
     */
    201: LinkResponse;
};

export type CreateLinkResponse = CreateLinkResponses[keyof CreateLinkResponses];

export type ListLinkCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/links/custom_fields';
};

export type ListLinkCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListLinkCustomFieldsResponse = ListLinkCustomFieldsResponses[keyof ListLinkCustomFieldsResponses];

export type GetLinkData = {
    body?: never;
    path: {
        /**
         * The link ID
         */
        link_id: string;
    };
    query?: never;
    url: '/links/{link_id}';
};

export type GetLinkResponses = {
    /**
     * A link
     */
    200: LinkResponse;
};

export type GetLinkResponse = GetLinkResponses[keyof GetLinkResponses];

export type UpdateALinkData = {
    /**
     * Link fields to update
     */
    body?: UpdateLink;
    path: {
        /**
         * The link ID
         */
        link_id: string;
    };
    query?: never;
    url: '/links/{link_id}';
};

export type UpdateALinkResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateALinkResponse = UpdateALinkResponses[keyof UpdateALinkResponses];

export type ListLinkConversationsData = {
    body?: never;
    path: {
        /**
         * The Link ID
         */
        link_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the conversations. Only supports `date`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/links/{link_id}/conversations';
};

export type ListLinkConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListLinkConversationsResponse = ListLinkConversationsResponses[keyof ListLinkConversationsResponses];

export type ApiTokenDetailsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type ApiTokenDetailsResponses = {
    /**
     * API Token details
     */
    200: IdentityResponse;
};

export type ApiTokenDetailsResponse = ApiTokenDetailsResponses[keyof ApiTokenDetailsResponses];

export type ListFoldersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Field used to sort the message template folders. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/message_template_folders';
};

export type ListFoldersResponses = {
    /**
     * Array of message template folders
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateFolderResponse>;
    };
};

export type ListFoldersResponse = ListFoldersResponses[keyof ListFoldersResponses];

export type CreateFolderData = {
    /**
     * Message template folder to create
     */
    body?: CreateMessageTemplateFolder;
    path?: never;
    query?: never;
    url: '/message_template_folders';
};

export type CreateFolderResponses = {
    /**
     * A message template folder
     */
    201: MessageTemplateFolderResponse;
};

export type CreateFolderResponse = CreateFolderResponses[keyof CreateFolderResponses];

export type DeleteFolderData = {
    body?: never;
    path: {
        /**
         * The message template folder id
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}';
};

export type DeleteFolderResponses = {
    /**
     * A message template folder accepted for deletion
     */
    202: {
        status?: string;
        /**
         * id of the message template to be deleted
         */
        message_template_folder_id?: string;
    };
};

export type DeleteFolderResponse = DeleteFolderResponses[keyof DeleteFolderResponses];

export type GetFolderData = {
    body?: never;
    path: {
        /**
         * The message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}';
};

export type GetFolderResponses = {
    /**
     * A message template folder
     */
    200: MessageTemplateFolderResponse;
};

export type GetFolderResponse = GetFolderResponses[keyof GetFolderResponses];

export type UpdateFolderData = {
    /**
     * Message template folder to update
     */
    body?: UpdateMessageTemplateFolder;
    path: {
        /**
         * The message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}';
};

export type UpdateFolderResponses = {
    /**
     * A message template folder
     */
    200: MessageTemplateFolderResponse;
};

export type UpdateFolderResponse = UpdateFolderResponses[keyof UpdateFolderResponses];

export type GetChildFoldersData = {
    body?: never;
    path: {
        /**
         * The message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}/message_template_folders';
};

export type GetChildFoldersResponses = {
    /**
     * Array of message template folders
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateFolderResponse>;
    };
};

export type GetChildFoldersResponse = GetChildFoldersResponses[keyof GetChildFoldersResponses];

export type CreateChildFolderData = {
    /**
     * Message template folder to create
     */
    body?: CreateMessageTemplateFolderAsChild;
    path: {
        /**
         * The parent message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}/message_template_folders';
};

export type CreateChildFolderResponses = {
    /**
     * A message template folder
     */
    201: MessageTemplateFolderResponse;
};

export type CreateChildFolderResponse = CreateChildFolderResponses[keyof CreateChildFolderResponses];

export type GetChildTemplatesData = {
    body?: never;
    path: {
        /**
         * The message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}/message_templates';
};

export type GetChildTemplatesResponses = {
    /**
     * Array of message template folders
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateFolderResponse>;
    };
};

export type GetChildTemplatesResponse = GetChildTemplatesResponses[keyof GetChildTemplatesResponses];

export type CreateChildTemplateData = {
    /**
     * Message template to create
     */
    body?: CreateMessageTemplateAsChild;
    path: {
        /**
         * The parent message template folder ID
         */
        message_template_folder_id: string;
    };
    query?: never;
    url: '/message_template_folders/{message_template_folder_id}/message_templates';
};

export type CreateChildTemplateResponses = {
    /**
     * A message template
     */
    201: MessageTemplateResponse;
};

export type CreateChildTemplateResponse = CreateChildTemplateResponses[keyof CreateChildTemplateResponses];

export type ListMessageTemplatesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/message_templates';
};

export type ListMessageTemplatesResponses = {
    /**
     * Array of message templates
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateResponse>;
    };
};

export type ListMessageTemplatesResponse = ListMessageTemplatesResponses[keyof ListMessageTemplatesResponses];

export type CreateMessageTemplateData = {
    /**
     * Message template to create
     */
    body?: CreateSharedMessageTemplate;
    path?: never;
    query?: never;
    url: '/message_templates';
};

export type CreateMessageTemplateResponses = {
    /**
     * A message template
     */
    201: MessageTemplateResponse;
};

export type CreateMessageTemplateResponse = CreateMessageTemplateResponses[keyof CreateMessageTemplateResponses];

export type DeleteMessageTemplateData = {
    body?: never;
    path: {
        /**
         * The message template ID
         */
        message_template_id: string;
    };
    query?: never;
    url: '/message_templates/{message_template_id}';
};

export type DeleteMessageTemplateResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteMessageTemplateResponse = DeleteMessageTemplateResponses[keyof DeleteMessageTemplateResponses];

export type GetMessageTemplateData = {
    body?: never;
    path: {
        /**
         * The message template ID
         */
        message_template_id: string;
    };
    query?: never;
    url: '/message_templates/{message_template_id}';
};

export type GetMessageTemplateResponses = {
    /**
     * A message template
     */
    200: MessageTemplateResponse;
};

export type GetMessageTemplateResponse = GetMessageTemplateResponses[keyof GetMessageTemplateResponses];

export type UpdateMessageTemplateData = {
    /**
     * Message template to update
     */
    body?: UpdateMessageTemplate;
    path: {
        /**
         * The message template ID
         */
        message_template_id: string;
    };
    query?: never;
    url: '/message_templates/{message_template_id}';
};

export type UpdateMessageTemplateResponses = {
    /**
     * A message template
     */
    200: MessageTemplateResponse;
};

export type UpdateMessageTemplateResponse = UpdateMessageTemplateResponses[keyof UpdateMessageTemplateResponses];

export type DownloadAttachmentForAMessageTemplateData = {
    body?: never;
    path: {
        /**
         * The Message Template ID
         */
        message_template_id: string;
        /**
         * The Attachment ID
         */
        attachment_link_id: string;
    };
    query?: never;
    url: '/message_templates/{message_template_id}/download/{attachment_link_id}';
};

export type DownloadAttachmentForAMessageTemplateResponses = {
    /**
     * An attachment
     */
    200: Attachment;
};

export type DownloadAttachmentForAMessageTemplateResponse = DownloadAttachmentForAMessageTemplateResponses[keyof DownloadAttachmentForAMessageTemplateResponses];

export type GetMessageData = {
    body?: never;
    path: {
        /**
         * The message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/messages/{message_id}';
};

export type GetMessageResponses = {
    /**
     * A message
     */
    200: MessageResponse;
};

export type GetMessageResponse = GetMessageResponses[keyof GetMessageResponses];

export type DownloadAttachmentForAMessageData = {
    body?: never;
    path: {
        /**
         * The Message ID
         */
        message_id: string;
        /**
         * The Attachment ID
         */
        attachment_link_id: string;
    };
    query?: never;
    url: '/messages/{message_id}/download/{attachment_link_id}';
};

export type DownloadAttachmentForAMessageResponses = {
    /**
     * An attachment
     */
    200: Attachment;
};

export type DownloadAttachmentForAMessageResponse = DownloadAttachmentForAMessageResponses[keyof DownloadAttachmentForAMessageResponses];

export type GetMessageSeenStatusData = {
    body?: never;
    path: {
        /**
         * The message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/messages/{message_id}/seen';
};

export type GetMessageSeenStatusResponses = {
    /**
     * Array of seen receipts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<SeenReceiptResponse>;
    };
};

export type GetMessageSeenStatusResponse = GetMessageSeenStatusResponses[keyof GetMessageSeenStatusResponses];

export type MarkMessageSeenData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        /**
         * The message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/messages/{message_id}/seen';
};

export type MarkMessageSeenResponses = {
    /**
     * No content
     */
    204: void;
};

export type MarkMessageSeenResponse = MarkMessageSeenResponses[keyof MarkMessageSeenResponses];

export type ListRulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/rules';
};

export type ListRulesResponses = {
    /**
     * Array of Rules
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<RuleResponse>;
    };
};

export type ListRulesResponse = ListRulesResponses[keyof ListRulesResponses];

export type GetRuleData = {
    body?: never;
    path: {
        /**
         * The Rule ID
         */
        rule_id: string;
    };
    query?: never;
    url: '/rules/{rule_id}';
};

export type GetRuleResponses = {
    /**
     * A rule
     */
    200: RuleResponse;
};

export type GetRuleResponse = GetRuleResponses[keyof GetRuleResponses];

export type ListShiftsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/shifts';
};

export type ListShiftsResponses = {
    /**
     * Array of Shifts
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ShiftResponse>;
    };
};

export type ListShiftsResponse = ListShiftsResponses[keyof ListShiftsResponses];

export type CreateShiftData = {
    /**
     * Shift to create details
     */
    body?: CreateShift;
    path?: never;
    query?: never;
    url: '/shifts';
};

export type CreateShiftResponses = {
    /**
     * A shift
     */
    201: ShiftResponse;
};

export type CreateShiftResponse = CreateShiftResponses[keyof CreateShiftResponses];

export type GetShiftData = {
    body?: never;
    path: {
        /**
         * The Shift ID
         */
        shift_id: string;
    };
    query?: never;
    url: '/shifts/{shift_id}';
};

export type GetShiftResponses = {
    /**
     * A shift
     */
    200: ShiftResponse;
};

export type GetShiftResponse = GetShiftResponses[keyof GetShiftResponses];

export type UpdateShiftData = {
    /**
     * Updated Shift Body
     */
    body?: UpdateShift;
    path: {
        /**
         * The Shift ID
         */
        shift_id: string;
    };
    query?: never;
    url: '/shifts/{shift_id}';
};

export type UpdateShiftResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateShiftResponse = UpdateShiftResponses[keyof UpdateShiftResponses];

export type RemoveTeammatesFromShiftData = {
    /**
     * Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Shift ID
         */
        shift_id: string;
    };
    query?: never;
    url: '/shifts/{shift_id}/teammates';
};

export type RemoveTeammatesFromShiftResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveTeammatesFromShiftResponse = RemoveTeammatesFromShiftResponses[keyof RemoveTeammatesFromShiftResponses];

export type ListShiftsTeammatesData = {
    body?: never;
    path: {
        /**
         * The Shift ID
         */
        shift_id: string;
    };
    query?: never;
    url: '/shifts/{shift_id}/teammates';
};

export type ListShiftsTeammatesResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListShiftsTeammatesResponse = ListShiftsTeammatesResponses[keyof ListShiftsTeammatesResponses];

export type AddTeammatesToShiftData = {
    /**
     * Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Shift ID
         */
        shift_id: string;
    };
    query?: never;
    url: '/shifts/{shift_id}/teammates';
};

export type AddTeammatesToShiftResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddTeammatesToShiftResponse = AddTeammatesToShiftResponses[keyof AddTeammatesToShiftResponses];

export type DeleteSignatureData = {
    body?: never;
    path: {
        /**
         * The signature ID
         */
        signature_id: string;
    };
    query?: never;
    url: '/signatures/{signature_id}';
};

export type DeleteSignatureResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteSignatureResponse = DeleteSignatureResponses[keyof DeleteSignatureResponses];

export type GetSignaturesData = {
    body?: never;
    path: {
        /**
         * The signature ID
         */
        signature_id: string;
    };
    query?: never;
    url: '/signatures/{signature_id}';
};

export type GetSignaturesResponses = {
    /**
     * A signature
     */
    200: SignatureResponse;
};

export type GetSignaturesResponse = GetSignaturesResponses[keyof GetSignaturesResponses];

export type UpdateSignatureData = {
    /**
     * Signature to update
     */
    body?: UpdateSignature;
    path: {
        /**
         * The signature ID
         */
        signature_id: string;
    };
    query?: never;
    url: '/signatures/{signature_id}';
};

export type UpdateSignatureResponses = {
    /**
     * A signature
     */
    200: SignatureResponse;
};

export type UpdateSignatureResponse = UpdateSignatureResponses[keyof UpdateSignatureResponses];

export type ListTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the tags. Only supports `id`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/tags';
};

export type ListTagsResponses = {
    /**
     * Array of Tags
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TagResponse>;
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    /**
     * Tag to create
     */
    body?: CreateTag;
    path?: never;
    query?: never;
    url: '/tags';
};

export type CreateTagResponses = {
    /**
     * A tag
     */
    201: TagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * The ID of the tag to delete
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type DeleteTagResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
    body?: never;
    path: {
        /**
         * The tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type GetTagResponses = {
    /**
     * A tag
     */
    200: TagResponse;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateATagData = {
    /**
     * Child Tag to update
     */
    body?: UpdateTag;
    path: {
        /**
         * The tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}';
};

export type UpdateATagResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateATagResponse = UpdateATagResponses[keyof UpdateATagResponses];

export type ListTagChildrenData = {
    body?: never;
    path: {
        /**
         * The tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}/children';
};

export type ListTagChildrenResponses = {
    /**
     * Array of Tags
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TagResponse>;
    };
};

export type ListTagChildrenResponse = ListTagChildrenResponses[keyof ListTagChildrenResponses];

export type CreateChildTagData = {
    /**
     * Child Tag to create
     */
    body?: CreateTag;
    path: {
        /**
         * The tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/tags/{tag_id}/children';
};

export type CreateChildTagResponses = {
    /**
     * A tag
     */
    201: TagResponse;
};

export type CreateChildTagResponse = CreateChildTagResponses[keyof CreateChildTagResponses];

export type ListTaggedConversationsData = {
    body?: never;
    path: {
        /**
         * The ID of the tag
         */
        tag_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/tags/{tag_id}/conversations';
};

export type ListTaggedConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListTaggedConversationsResponse = ListTaggedConversationsResponses[keyof ListTaggedConversationsResponses];

export type ListCompanyTeammateGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teammate_groups';
};

export type ListCompanyTeammateGroupsResponses = {
    /**
     * Array of teammate groups
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateGroupResponse>;
    };
};

export type ListCompanyTeammateGroupsResponse = ListCompanyTeammateGroupsResponses[keyof ListCompanyTeammateGroupsResponses];

export type CreateCompanyTeammateGroupData = {
    body?: CreateTeammateGroup;
    path?: never;
    query?: never;
    url: '/teammate_groups';
};

export type CreateCompanyTeammateGroupResponses = {
    /**
     * A teammate group
     */
    201: TeammateGroupResponse;
};

export type CreateCompanyTeammateGroupResponse = CreateCompanyTeammateGroupResponses[keyof CreateCompanyTeammateGroupResponses];

export type DeleteCompanyTeammateGroupData = {
    body?: never;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}';
};

export type DeleteCompanyTeammateGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type DeleteCompanyTeammateGroupResponse = DeleteCompanyTeammateGroupResponses[keyof DeleteCompanyTeammateGroupResponses];

export type GetCompanyTeammateGroupData = {
    body?: never;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}';
};

export type GetCompanyTeammateGroupResponses = {
    /**
     * A teammate group
     */
    200: TeammateGroupResponse;
};

export type GetCompanyTeammateGroupResponse = GetCompanyTeammateGroupResponses[keyof GetCompanyTeammateGroupResponses];

export type UpdateACompanyTeammateGroupData = {
    body?: UpdateTeammateGroup;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}';
};

export type UpdateACompanyTeammateGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateACompanyTeammateGroupResponse = UpdateACompanyTeammateGroupResponses[keyof UpdateACompanyTeammateGroupResponses];

export type RemoveCompanyTeammateGroupTeamInboxesData = {
    /**
     * Inbox IDs to remove
     */
    body?: InboxIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/inboxes';
};

export type RemoveCompanyTeammateGroupTeamInboxesResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveCompanyTeammateGroupTeamInboxesResponse = RemoveCompanyTeammateGroupTeamInboxesResponses[keyof RemoveCompanyTeammateGroupTeamInboxesResponses];

export type ListCompanyTeammateGroupTeamInboxesData = {
    body?: never;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/inboxes';
};

export type ListCompanyTeammateGroupTeamInboxesResponses = {
    /**
     * Array of Inboxes
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<InboxResponse>;
    };
};

export type ListCompanyTeammateGroupTeamInboxesResponse = ListCompanyTeammateGroupTeamInboxesResponses[keyof ListCompanyTeammateGroupTeamInboxesResponses];

export type AddCompanyTeammateGroupTeamInboxesData = {
    /**
     * Inbox IDs to add
     */
    body?: InboxIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/inboxes';
};

export type AddCompanyTeammateGroupTeamInboxesResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddCompanyTeammateGroupTeamInboxesResponse = AddCompanyTeammateGroupTeamInboxesResponses[keyof AddCompanyTeammateGroupTeamInboxesResponses];

export type RemoveCompanyTeammateGroupTeammatesData = {
    /**
     * Teammate IDs to remove. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teammates';
};

export type RemoveCompanyTeammateGroupTeammatesResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveCompanyTeammateGroupTeammatesResponse = RemoveCompanyTeammateGroupTeammatesResponses[keyof RemoveCompanyTeammateGroupTeammatesResponses];

export type ListCompanyTeammateGroupTeammatesData = {
    body?: never;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teammates';
};

export type ListCompanyTeammateGroupTeammatesResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListCompanyTeammateGroupTeammatesResponse = ListCompanyTeammateGroupTeammatesResponses[keyof ListCompanyTeammateGroupTeammatesResponses];

export type AddCompanyTeammateGroupTeammatesData = {
    /**
     * Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teammates';
};

export type AddCompanyTeammateGroupTeammatesResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddCompanyTeammateGroupTeammatesResponse = AddCompanyTeammateGroupTeammatesResponses[keyof AddCompanyTeammateGroupTeammatesResponses];

export type RemoveCompanyTeammateGroupTeamsData = {
    /**
     * Team IDs to remove.
     */
    body?: TeamIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teams';
};

export type RemoveCompanyTeammateGroupTeamsResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveCompanyTeammateGroupTeamsResponse = RemoveCompanyTeammateGroupTeamsResponses[keyof RemoveCompanyTeammateGroupTeamsResponses];

export type ListCompanyTeammateGroupTeamsData = {
    body?: never;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teams';
};

export type ListCompanyTeammateGroupTeamsResponses = {
    /**
     * Array of teams
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeamPreviewResponse>;
    };
};

export type ListCompanyTeammateGroupTeamsResponse = ListCompanyTeammateGroupTeamsResponses[keyof ListCompanyTeammateGroupTeamsResponses];

export type AddCompanyTeammateGroupTeamsData = {
    /**
     * Team IDs to add
     */
    body?: TeamIds;
    path: {
        /**
         * The teammate group ID.
         */
        teammate_group_id: string;
    };
    query?: never;
    url: '/teammate_groups/{teammate_group_id}/teams';
};

export type AddCompanyTeammateGroupTeamsResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddCompanyTeammateGroupTeamsResponse = AddCompanyTeammateGroupTeamsResponses[keyof AddCompanyTeammateGroupTeamsResponses];

export type ListTeammatesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teammates';
};

export type ListTeammatesResponses = {
    /**
     * Array of teammates
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeammateResponse>;
    };
};

export type ListTeammatesResponse = ListTeammatesResponses[keyof ListTeammatesResponses];

export type ListTeammateCustomFieldsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teammates/custom_fields';
};

export type ListTeammateCustomFieldsResponses = {
    /**
     * Array of Custom Fields
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<CustomFieldResponse>;
    };
};

export type ListTeammateCustomFieldsResponse = ListTeammateCustomFieldsResponses[keyof ListTeammateCustomFieldsResponses];

export type GetTeammateData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}';
};

export type GetTeammateResponses = {
    /**
     * A teammate
     */
    200: TeammateResponse;
};

export type GetTeammateResponse = GetTeammateResponses[keyof GetTeammateResponses];

export type UpdateTeammateData = {
    body?: UpdateTeammate;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}';
};

export type UpdateTeammateResponses = {
    /**
     * No content
     */
    204: void;
};

export type UpdateTeammateResponse = UpdateTeammateResponses[keyof UpdateTeammateResponses];

export type ListTeammateChannelsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/channels';
};

export type ListTeammateChannelsResponses = {
    /**
     * Array of Channels
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ChannelResponse>;
    };
};

export type ListTeammateChannelsResponse = ListTeammateChannelsResponses[keyof ListTeammateChannelsResponses];

export type ListTeammateGroupsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/contact_groups';
};

export type ListTeammateGroupsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListTeammateGroupsResponse = ListTeammateGroupsResponses[keyof ListTeammateGroupsResponses];

export type CreateTeammateGroupData = {
    body?: CreateContactList;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/contact_groups';
};

export type CreateTeammateGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateTeammateGroupResponse = CreateTeammateGroupResponses[keyof CreateTeammateGroupResponses];

export type ListTeammateContactListsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/contact_lists';
};

export type ListTeammateContactListsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListTeammateContactListsResponse = ListTeammateContactListsResponses[keyof ListTeammateContactListsResponses];

export type CreateTeammateContactListData = {
    body?: CreateContactList;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/contact_lists';
};

export type CreateTeammateContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateTeammateContactListResponse = CreateTeammateContactListResponses[keyof CreateTeammateContactListResponses];

export type ListTeammateContactsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the contacts. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teammates/{teammate_id}/contacts';
};

export type ListTeammateContactsResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListTeammateContactsResponse = ListTeammateContactsResponses[keyof ListTeammateContactsResponses];

export type CreateTeammateContactData = {
    body?: CreateContact;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/contacts';
};

export type CreateTeammateContactResponses = {
    /**
     * A contact
     */
    201: ContactResponse;
};

export type CreateTeammateContactResponse = CreateTeammateContactResponses[keyof CreateTeammateContactResponses];

export type ListAssignedConversationsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property `statuses`, whose value should be a list of conversation statuses (`assigned`, `unassigned`, `archived`, or `trashed`). If ticketing is enabled, this endpoint accepts either `status_categories` (`open`, `waiting`, `resolved`) or `status_ids` as an alternative.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
    };
    url: '/teammates/{teammate_id}/conversations';
};

export type ListAssignedConversationsResponses = {
    /**
     * Array of conversations
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ConversationResponse>;
    };
};

export type ListAssignedConversationsResponse = ListAssignedConversationsResponses[keyof ListAssignedConversationsResponses];

export type ListTeammateInboxesData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/inboxes';
};

export type ListTeammateInboxesResponses = {
    /**
     * Array of Inboxes
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<InboxResponse>;
    };
};

export type ListTeammateInboxesResponse = ListTeammateInboxesResponses[keyof ListTeammateInboxesResponses];

export type ListTeammateFoldersData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: {
        /**
         * Field used to sort the message template folders. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teammates/{teammate_id}/message_template_folders';
};

export type ListTeammateFoldersResponses = {
    /**
     * Array of message template folders
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateFolderResponse>;
    };
};

export type ListTeammateFoldersResponse = ListTeammateFoldersResponses[keyof ListTeammateFoldersResponses];

export type CreateTeammateFolderData = {
    /**
     * Message template folder to create
     */
    body?: CreateMessageTemplateFolder;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/message_template_folders';
};

export type CreateTeammateFolderResponses = {
    /**
     * A message template folder
     */
    201: MessageTemplateFolderResponse;
};

export type CreateTeammateFolderResponse = CreateTeammateFolderResponses[keyof CreateTeammateFolderResponses];

export type ListTeammateMessageTemplatesData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: {
        /**
         * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teammates/{teammate_id}/message_templates';
};

export type ListTeammateMessageTemplatesResponses = {
    /**
     * Array of message templates
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateResponse>;
    };
};

export type ListTeammateMessageTemplatesResponse = ListTeammateMessageTemplatesResponses[keyof ListTeammateMessageTemplatesResponses];

export type CreateTeammateMessageTemplateData = {
    /**
     * Message template to create
     */
    body?: CreatePrivateMessageTemplate;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/message_templates';
};

export type CreateTeammateMessageTemplateResponses = {
    /**
     * A message template
     */
    201: MessageTemplateResponse;
};

export type CreateTeammateMessageTemplateResponse = CreateTeammateMessageTemplateResponses[keyof CreateTeammateMessageTemplateResponses];

export type ListTeammateRulesData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/rules';
};

export type ListTeammateRulesResponses = {
    /**
     * Array of Rules
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<RuleResponse>;
    };
};

export type ListTeammateRulesResponse = ListTeammateRulesResponses[keyof ListTeammateRulesResponses];

export type ListTeammateShiftsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/shifts';
};

export type ListTeammateShiftsResponses = {
    /**
     * Array of Shifts
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ShiftResponse>;
    };
};

export type ListTeammateShiftsResponse = ListTeammateShiftsResponses[keyof ListTeammateShiftsResponses];

export type ListTeammateSignaturesData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/signatures';
};

export type ListTeammateSignaturesResponses = {
    /**
     * Array of signatures
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<SignatureResponse>;
    };
};

export type ListTeammateSignaturesResponse = ListTeammateSignaturesResponses[keyof ListTeammateSignaturesResponses];

export type CreateTeammateSignatureData = {
    /**
     * Signature to create
     */
    body?: CreatePrivateSignature;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/signatures';
};

export type CreateTeammateSignatureResponses = {
    /**
     * A signature
     */
    201: SignatureResponse;
};

export type CreateTeammateSignatureResponse = CreateTeammateSignatureResponses[keyof CreateTeammateSignatureResponses];

export type ListTeammateTagsData = {
    body?: never;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the tags. Only supports `id`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teammates/{teammate_id}/tags';
};

export type ListTeammateTagsResponses = {
    /**
     * Array of Tags
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TagResponse>;
    };
};

export type ListTeammateTagsResponse = ListTeammateTagsResponses[keyof ListTeammateTagsResponses];

export type CreateTeammateTagData = {
    /**
     * Tag to create
     */
    body?: CreateTag;
    path: {
        /**
         * The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
         */
        teammate_id: string;
    };
    query?: never;
    url: '/teammates/{teammate_id}/tags';
};

export type CreateTeammateTagResponses = {
    /**
     * A tag
     */
    201: TagResponse;
};

export type CreateTeammateTagResponse = CreateTeammateTagResponses[keyof CreateTeammateTagResponses];

export type ListTeamsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/teams';
};

export type ListTeamsResponses = {
    /**
     * Array of teams
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TeamPreviewResponse>;
    };
};

export type ListTeamsResponse = ListTeamsResponses[keyof ListTeamsResponses];

export type GetTeamData = {
    body?: never;
    path: {
        /**
         * The Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}';
};

export type GetTeamResponses = {
    /**
     * A team
     */
    200: TeamResponse;
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type ListTeamChannelsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/channels';
};

export type ListTeamChannelsResponses = {
    /**
     * Array of Channels
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ChannelResponse>;
    };
};

export type ListTeamChannelsResponse = ListTeamChannelsResponses[keyof ListTeamChannelsResponses];

export type ListTeamGroupsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/contact_groups';
};

export type ListTeamGroupsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListTeamGroupsResponse = ListTeamGroupsResponses[keyof ListTeamGroupsResponses];

export type CreateTeamGroupData = {
    body?: CreateContactList;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/contact_groups';
};

export type CreateTeamGroupResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateTeamGroupResponse = CreateTeamGroupResponses[keyof CreateTeamGroupResponses];

export type ListTeamContactListsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/contact_lists';
};

export type ListTeamContactListsResponses = {
    /**
     * Array of contact lists
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactListResponses>;
    };
};

export type ListTeamContactListsResponse = ListTeamContactListsResponses[keyof ListTeamContactListsResponses];

export type CreateTeamContactListData = {
    body?: CreateContactList;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/contact_lists';
};

export type CreateTeamContactListResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateTeamContactListResponse = CreateTeamContactListResponses[keyof CreateTeamContactListResponses];

export type ListTeamContactsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: {
        /**
         * [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties `updated_after` and `updated_before`, whose value should be a timestamp in seconds with up to 3 decimal places.
         */
        q?: string;
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the contacts. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teams/{team_id}/contacts';
};

export type ListTeamContactsResponses = {
    /**
     * Array of contacts
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ContactResponse>;
    };
};

export type ListTeamContactsResponse = ListTeamContactsResponses[keyof ListTeamContactsResponses];

export type CreateTeamContactData = {
    body?: CreateContact;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/contacts';
};

export type CreateTeamContactResponses = {
    /**
     * A contact
     */
    201: ContactResponse;
};

export type CreateTeamContactResponse = CreateTeamContactResponses[keyof CreateTeamContactResponses];

export type ListTeamInboxesData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/inboxes';
};

export type ListTeamInboxesResponses = {
    /**
     * Array of Inboxes
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<InboxResponse>;
    };
};

export type ListTeamInboxesResponse = ListTeamInboxesResponses[keyof ListTeamInboxesResponses];

export type CreateTeamInboxData = {
    /**
     * Inbox details
     */
    body?: CreateInbox;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/inboxes';
};

export type CreateTeamInboxResponses = {
    /**
     * No content
     */
    204: void;
};

export type CreateTeamInboxResponse = CreateTeamInboxResponses[keyof CreateTeamInboxResponses];

export type ListTeamFoldersData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: {
        /**
         * Field used to sort the message template folders. Either `created_at` or `updated_at`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teams/{team_id}/message_template_folders';
};

export type ListTeamFoldersResponses = {
    /**
     * Array of message template folders
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateFolderResponse>;
    };
};

export type ListTeamFoldersResponse = ListTeamFoldersResponses[keyof ListTeamFoldersResponses];

export type CreateTeamFolderData = {
    /**
     * Message template folder to create
     */
    body?: CreateMessageTemplateFolder;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/message_template_folders';
};

export type CreateTeamFolderResponses = {
    /**
     * A message template folder
     */
    201: MessageTemplateFolderResponse;
};

export type CreateTeamFolderResponse = CreateTeamFolderResponses[keyof CreateTeamFolderResponses];

export type ListTeamMessageTemplatesData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: {
        /**
         * Field used to sort the message templates. Either `created_at`, `updated_at`, or `sort_order`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teams/{team_id}/message_templates';
};

export type ListTeamMessageTemplatesResponses = {
    /**
     * Array of message templates
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<MessageTemplateResponse>;
    };
};

export type ListTeamMessageTemplatesResponse = ListTeamMessageTemplatesResponses[keyof ListTeamMessageTemplatesResponses];

export type CreateTeamMessageTemplateData = {
    /**
     * Message template to create
     */
    body?: CreateSharedMessageTemplate;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/message_templates';
};

export type CreateTeamMessageTemplateResponses = {
    /**
     * A message template
     */
    201: MessageTemplateResponse;
};

export type CreateTeamMessageTemplateResponse = CreateTeamMessageTemplateResponses[keyof CreateTeamMessageTemplateResponses];

export type ListTeamRulesData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/rules';
};

export type ListTeamRulesResponses = {
    /**
     * Array of Rules
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<RuleResponse>;
    };
};

export type ListTeamRulesResponse = ListTeamRulesResponses[keyof ListTeamRulesResponses];

export type ListTeamShiftsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/shifts';
};

export type ListTeamShiftsResponses = {
    /**
     * Array of Shifts
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<ShiftResponse>;
    };
};

export type ListTeamShiftsResponse = ListTeamShiftsResponses[keyof ListTeamShiftsResponses];

export type CreateTeamShiftData = {
    /**
     * Shift to create details
     */
    body?: CreateShift;
    path: {
        /**
         * The Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/shifts';
};

export type CreateTeamShiftResponses = {
    /**
     * A shift
     */
    201: ShiftResponse;
};

export type CreateTeamShiftResponse = CreateTeamShiftResponses[keyof CreateTeamShiftResponses];

export type ListTeamSignaturesData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/signatures';
};

export type ListTeamSignaturesResponses = {
    /**
     * Array of signatures
     */
    200: {
        _pagination?: {
            /**
             * Link to next [page of results](https://dev.frontapp.com/docs/pagination)
             */
            next?: string | null;
        };
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<SignatureResponse>;
    };
};

export type ListTeamSignaturesResponse = ListTeamSignaturesResponses[keyof ListTeamSignaturesResponses];

export type CreateTeamSignatureData = {
    /**
     * Signature to create
     */
    body?: CreateSharedSignature;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/signatures';
};

export type CreateTeamSignatureResponses = {
    /**
     * A signature
     */
    201: SignatureResponse;
};

export type CreateTeamSignatureResponse = CreateTeamSignatureResponses[keyof CreateTeamSignatureResponses];

export type ListTeamTagsData = {
    body?: never;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: {
        /**
         * Max number of results per [page](https://dev.frontapp.com/docs/pagination)
         */
        limit?: number;
        /**
         * Token to use to request the [next page](https://dev.frontapp.com/docs/pagination)
         */
        page_token?: string;
        /**
         * Field used to sort the tags. Only supports `id`.
         */
        sort_by?: string;
        /**
         * Order by which results should be sorted
         */
        sort_order?: 'asc' | 'desc';
    };
    url: '/teams/{team_id}/tags';
};

export type ListTeamTagsResponses = {
    /**
     * Array of Tags
     */
    200: {
        _links?: {
            /**
             * Link to resource
             */
            self?: string;
        };
        _results?: Array<TagResponse>;
    };
};

export type ListTeamTagsResponse = ListTeamTagsResponses[keyof ListTeamTagsResponses];

export type CreateTeamTagData = {
    /**
     * Tag to create
     */
    body?: CreateTag;
    path: {
        /**
         * The team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/tags';
};

export type CreateTeamTagResponses = {
    /**
     * A tag
     */
    201: TagResponse;
};

export type CreateTeamTagResponse = CreateTeamTagResponses[keyof CreateTeamTagResponses];

export type RemoveTeammatesFromTeamData = {
    /**
     * Teammate IDs to remove from the team. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/teammates';
};

export type RemoveTeammatesFromTeamResponses = {
    /**
     * No content
     */
    204: void;
};

export type RemoveTeammatesFromTeamResponse = RemoveTeammatesFromTeamResponses[keyof RemoveTeammatesFromTeamResponses];

export type AddTeammatesToTeamData = {
    /**
     * Teammate IDs to add. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1).
     */
    body?: TeammateIds;
    path: {
        /**
         * The Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/teams/{team_id}/teammates';
};

export type AddTeammatesToTeamResponses = {
    /**
     * No content
     */
    204: void;
};

export type AddTeammatesToTeamResponse = AddTeammatesToTeamResponses[keyof AddTeammatesToTeamResponses];

export type ClientOptions = {
    baseUrl: 'https://api2.frontapp.com' | (string & {});
};