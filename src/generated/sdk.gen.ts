// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListAccountsData, ListAccountsResponses, CreateAccountData, CreateAccountResponses, ListAccountCustomFieldsData, ListAccountCustomFieldsResponses, DeleteAnAccountData, DeleteAnAccountResponses, FetchAnAccountData, FetchAnAccountResponses, UpdateAccountData, UpdateAccountResponses, RemoveContactFromAccountData, RemoveContactFromAccountResponses, ListAccountContactsData, ListAccountContactsResponses, AddContactToAccountData, AddContactToAccountResponses, CreateAnalyticsExportData, CreateAnalyticsExportResponses, GetAnalyticsExportData, GetAnalyticsExportResponses, CreateAnalyticsReportData, CreateAnalyticsReportResponses, GetAnalyticsReportData, GetAnalyticsReportResponses, TriggerAppEventData, TriggerAppEventResponses, ListChannelsData, ListChannelsResponses, GetChannelData, GetChannelResponses, UpdateChannelData, UpdateChannelResponses, CreateDraftData, CreateDraftResponses, ReceiveCustomMessagesData, ReceiveCustomMessagesResponses, CreateMessageData, CreateMessageResponses, ValidateChannelData, ValidateChannelResponses, GetCommentData, GetCommentResponses, UpdateCommentData, UpdateCommentResponses, DownloadAttachmentForACommentData, DownloadAttachmentForACommentResponses, ListCommentMentionsData, ListCommentMentionsResponses, AddCommentReplyData, AddCommentReplyResponses, ListAllCompanyRulesData, ListAllCompanyRulesResponses, ListCompanyTicketStatusesData, ListCompanyTicketStatusesResponses, ListCompanyTicketStatusesErrors, GetTicketStatusByIdData, GetTicketStatusByIdResponses, ListCompanyTagsData, ListCompanyTagsResponses, CreateCompanyTagData, CreateCompanyTagResponses, ListGroupsData, ListGroupsResponses, CreateGroupData, CreateGroupResponses, DeleteGroupData, DeleteGroupResponses, RemoveContactsFromGroupData, RemoveContactsFromGroupResponses, ListContactsInGroupData, ListContactsInGroupResponses, AddContactsToGroupData, AddContactsToGroupResponses, ListContactListsData, ListContactListsResponses, CreateContactListData, CreateContactListResponses, DeleteContactListData, DeleteContactListResponses, RemoveContactsFromContactListData, RemoveContactsFromContactListResponses, ListContactsInContactListData, ListContactsInContactListResponses, AddContactsToContactListData, AddContactsToContactListResponses, ListContactsData, ListContactsResponses, CreateContactData, CreateContactResponses, ListContactCustomFieldsData, ListContactCustomFieldsResponses, MergeContactsData, MergeContactsResponses, DeleteAContactData, DeleteAContactResponses, GetContactData, GetContactResponses, UpdateAContactData, UpdateAContactResponses, ListContactConversationsData, ListContactConversationsResponses, DeleteContactHandleData, DeleteContactHandleResponses, AddContactHandleData, AddContactHandleResponses, ListNotesData, ListNotesResponses, AddNoteData, AddNoteResponses, ListConversationsData, ListConversationsResponses, CreateConversationData, CreateConversationResponses, ListConversationCustomFieldsData, ListConversationCustomFieldsResponses, SearchConversationsData, SearchConversationsResponses, GetConversationByIdData, GetConversationByIdResponses, UpdateConversationData, UpdateConversationResponses, UpdateConversationErrors, UpdateConversationAssigneeData, UpdateConversationAssigneeResponses, ListConversationCommentsData, ListConversationCommentsResponses, AddCommentData, AddCommentResponses, ListConversationDraftsData, ListConversationDraftsResponses, CreateDraftReplyData, CreateDraftReplyResponses, ListConversationEventsData, ListConversationEventsResponses, DeleteConversationFollowersData, DeleteConversationFollowersResponses, ListConversationFollowersData, ListConversationFollowersResponses, AddConversationFollowersData, AddConversationFollowersResponses, ListConversationInboxesData, ListConversationInboxesResponses, RemoveConversationLinksData, RemoveConversationLinksResponses, AddConversationLinkData, AddConversationLinkResponses, ListConversationMessagesData, ListConversationMessagesResponses, CreateMessageReplyData, CreateMessageReplyResponses, UpdateConversationRemindersData, UpdateConversationRemindersResponses, RemoveConversationTagData, RemoveConversationTagResponses, AddConversationTagData, AddConversationTagResponses, ListCustomFieldsData, ListCustomFieldsResponses, DownloadAttachmentData, DownloadAttachmentResponses, DeleteDraftData, DeleteDraftResponses, EditDraftData, EditDraftResponses, ListEventsData, ListEventsResponses, GetEventData, GetEventResponses, ListInboxesData, ListInboxesResponses, CreateInboxData, CreateInboxResponses, ListInboxCustomFieldsData, ListInboxCustomFieldsResponses, GetInboxData, GetInboxResponses, ListInboxChannelsData, ListInboxChannelsResponses, CreateAChannelData, CreateAChannelResponses, ListInboxConversationsData, ListInboxConversationsResponses, ImportInboxMessageData, ImportInboxMessageResponses, RemovesInboxAccessData, RemovesInboxAccessResponses, ListInboxAccessData, ListInboxAccessResponses, AddInboxAccessData, AddInboxAccessResponses, DeleteAnArticleData, DeleteAnArticleResponses, GetAKnowledgeBaseArticleData, GetAKnowledgeBaseArticleResponses, GetKnowledgeBaseArticleWithContentInDefaultLocaleData, GetKnowledgeBaseArticleWithContentInDefaultLocaleResponses, UpdateArticleContentInDefaultLocaleData, UpdateArticleContentInDefaultLocaleResponses, DownloadAttachmentFromAnArticleData, DownloadAttachmentFromAnArticleResponses, GetKnowledgeBaseArticleWithContentInSpecifiedLocaleData, GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponses, UpdateArticleContentInSpecifiedLocaleData, UpdateArticleContentInSpecifiedLocaleResponses, DeleteAKnowledgeBaseCategoryData, DeleteAKnowledgeBaseCategoryResponses, GetAKnowledgeBaseCategoryData, GetAKnowledgeBaseCategoryResponses, ListArticlesInACategoryData, ListArticlesInACategoryResponses, GetKnowledgeBaseCategoryContentInDefaultLocaleData, GetKnowledgeBaseCategoryContentInDefaultLocaleResponses, UpdateKnowledgeBaseCategoryInDefaultLocaleData, UpdateKnowledgeBaseCategoryInDefaultLocaleResponses, GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleData, GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponses, UpdateKnowledgeBaseCategoryInSpecifiedLocaleData, UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponses, ListKnowledgeBasesData, ListKnowledgeBasesResponses, CreateAKnowledgeBaseData, CreateAKnowledgeBaseResponses, GetAKnowledgeBaseData, GetAKnowledgeBaseResponses, ListArticlesInAKnowledgeBaseData, ListArticlesInAKnowledgeBaseResponses, CreateArticleInAKnowledgeBaseInDefaultLocaleData, CreateArticleInAKnowledgeBaseInDefaultLocaleResponses, ListCategoriesInAKnowledgeBaseData, ListCategoriesInAKnowledgeBaseResponses, CreateKnowledgeBaseCategoryInDefaultLocaleData, CreateKnowledgeBaseCategoryInDefaultLocaleResponses, GetAKnowledgeBaseWithContentInDefaultLocaleData, GetAKnowledgeBaseWithContentInDefaultLocaleResponses, UpdateKnowledgeBaseInDefaultLocaleData, UpdateKnowledgeBaseInDefaultLocaleResponses, CreateArticleInAKnowledgeBaseInSpecifiedLocaleData, CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponses, CreateKnowledgeBaseCategoryInSpecifiedLocaleData, CreateKnowledgeBaseCategoryInSpecifiedLocaleResponses, GetAKnowledgeBaseWithContentInSpecifiedLocaleData, GetAKnowledgeBaseWithContentInSpecifiedLocaleResponses, UpdateKnowledgeBaseInSpecifiedLocaleData, UpdateKnowledgeBaseInSpecifiedLocaleResponses, ListLinksData, ListLinksResponses, CreateLinkData, CreateLinkResponses, ListLinkCustomFieldsData, ListLinkCustomFieldsResponses, GetLinkData, GetLinkResponses, UpdateALinkData, UpdateALinkResponses, ListLinkConversationsData, ListLinkConversationsResponses, ApiTokenDetailsData, ApiTokenDetailsResponses, ListFoldersData, ListFoldersResponses, CreateFolderData, CreateFolderResponses, DeleteFolderData, DeleteFolderResponses, GetFolderData, GetFolderResponses, UpdateFolderData, UpdateFolderResponses, GetChildFoldersData, GetChildFoldersResponses, CreateChildFolderData, CreateChildFolderResponses, GetChildTemplatesData, GetChildTemplatesResponses, CreateChildTemplateData, CreateChildTemplateResponses, ListMessageTemplatesData, ListMessageTemplatesResponses, CreateMessageTemplateData, CreateMessageTemplateResponses, DeleteMessageTemplateData, DeleteMessageTemplateResponses, GetMessageTemplateData, GetMessageTemplateResponses, UpdateMessageTemplateData, UpdateMessageTemplateResponses, DownloadAttachmentForAMessageTemplateData, DownloadAttachmentForAMessageTemplateResponses, GetMessageData, GetMessageResponses, DownloadAttachmentForAMessageData, DownloadAttachmentForAMessageResponses, GetMessageSeenStatusData, GetMessageSeenStatusResponses, MarkMessageSeenData, MarkMessageSeenResponses, ListRulesData, ListRulesResponses, GetRuleData, GetRuleResponses, ListShiftsData, ListShiftsResponses, CreateShiftData, CreateShiftResponses, GetShiftData, GetShiftResponses, UpdateShiftData, UpdateShiftResponses, RemoveTeammatesFromShiftData, RemoveTeammatesFromShiftResponses, ListShiftsTeammatesData, ListShiftsTeammatesResponses, AddTeammatesToShiftData, AddTeammatesToShiftResponses, DeleteSignatureData, DeleteSignatureResponses, GetSignaturesData, GetSignaturesResponses, UpdateSignatureData, UpdateSignatureResponses, ListTagsData, ListTagsResponses, CreateTagData, CreateTagResponses, DeleteTagData, DeleteTagResponses, GetTagData, GetTagResponses, UpdateATagData, UpdateATagResponses, ListTagChildrenData, ListTagChildrenResponses, CreateChildTagData, CreateChildTagResponses, ListTaggedConversationsData, ListTaggedConversationsResponses, ListCompanyTeammateGroupsData, ListCompanyTeammateGroupsResponses, CreateCompanyTeammateGroupData, CreateCompanyTeammateGroupResponses, DeleteCompanyTeammateGroupData, DeleteCompanyTeammateGroupResponses, GetCompanyTeammateGroupData, GetCompanyTeammateGroupResponses, UpdateACompanyTeammateGroupData, UpdateACompanyTeammateGroupResponses, RemoveCompanyTeammateGroupTeamInboxesData, RemoveCompanyTeammateGroupTeamInboxesResponses, ListCompanyTeammateGroupTeamInboxesData, ListCompanyTeammateGroupTeamInboxesResponses, AddCompanyTeammateGroupTeamInboxesData, AddCompanyTeammateGroupTeamInboxesResponses, RemoveCompanyTeammateGroupTeammatesData, RemoveCompanyTeammateGroupTeammatesResponses, ListCompanyTeammateGroupTeammatesData, ListCompanyTeammateGroupTeammatesResponses, AddCompanyTeammateGroupTeammatesData, AddCompanyTeammateGroupTeammatesResponses, RemoveCompanyTeammateGroupTeamsData, RemoveCompanyTeammateGroupTeamsResponses, ListCompanyTeammateGroupTeamsData, ListCompanyTeammateGroupTeamsResponses, AddCompanyTeammateGroupTeamsData, AddCompanyTeammateGroupTeamsResponses, ListTeammatesData, ListTeammatesResponses, ListTeammateCustomFieldsData, ListTeammateCustomFieldsResponses, GetTeammateData, GetTeammateResponses, UpdateTeammateData, UpdateTeammateResponses, ListTeammateChannelsData, ListTeammateChannelsResponses, ListTeammateGroupsData, ListTeammateGroupsResponses, CreateTeammateGroupData, CreateTeammateGroupResponses, ListTeammateContactListsData, ListTeammateContactListsResponses, CreateTeammateContactListData, CreateTeammateContactListResponses, ListTeammateContactsData, ListTeammateContactsResponses, CreateTeammateContactData, CreateTeammateContactResponses, ListAssignedConversationsData, ListAssignedConversationsResponses, ListTeammateInboxesData, ListTeammateInboxesResponses, ListTeammateFoldersData, ListTeammateFoldersResponses, CreateTeammateFolderData, CreateTeammateFolderResponses, ListTeammateMessageTemplatesData, ListTeammateMessageTemplatesResponses, CreateTeammateMessageTemplateData, CreateTeammateMessageTemplateResponses, ListTeammateRulesData, ListTeammateRulesResponses, ListTeammateShiftsData, ListTeammateShiftsResponses, ListTeammateSignaturesData, ListTeammateSignaturesResponses, CreateTeammateSignatureData, CreateTeammateSignatureResponses, ListTeammateTagsData, ListTeammateTagsResponses, CreateTeammateTagData, CreateTeammateTagResponses, ListTeamsData, ListTeamsResponses, GetTeamData, GetTeamResponses, ListTeamChannelsData, ListTeamChannelsResponses, ListTeamGroupsData, ListTeamGroupsResponses, CreateTeamGroupData, CreateTeamGroupResponses, ListTeamContactListsData, ListTeamContactListsResponses, CreateTeamContactListData, CreateTeamContactListResponses, ListTeamContactsData, ListTeamContactsResponses, CreateTeamContactData, CreateTeamContactResponses, ListTeamInboxesData, ListTeamInboxesResponses, CreateTeamInboxData, CreateTeamInboxResponses, ListTeamFoldersData, ListTeamFoldersResponses, CreateTeamFolderData, CreateTeamFolderResponses, ListTeamMessageTemplatesData, ListTeamMessageTemplatesResponses, CreateTeamMessageTemplateData, CreateTeamMessageTemplateResponses, ListTeamRulesData, ListTeamRulesResponses, ListTeamShiftsData, ListTeamShiftsResponses, CreateTeamShiftData, CreateTeamShiftResponses, ListTeamSignaturesData, ListTeamSignaturesResponses, CreateTeamSignatureData, CreateTeamSignatureResponses, ListTeamTagsData, ListTeamTagsResponses, CreateTeamTagData, CreateTeamTagResponses, RemoveTeammatesFromTeamData, RemoveTeammatesFromTeamResponses, AddTeammatesToTeamData, AddTeammatesToTeamResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Accounts
 * List the accounts of the company.
 */
export const listAccounts = <ThrowOnError extends boolean = false>(options?: Options<ListAccountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAccountsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts',
        ...options
    });
};

/**
 * Create account
 * Create a new account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options?: Options<CreateAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Account's custom fields
 * Lists the custom fields that can be attached to an Account.
 */
export const listAccountCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListAccountCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAccountCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/custom_fields',
        ...options
    });
};

/**
 * Delete an account
 * Deletes an account
 */
export const deleteAnAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAnAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAnAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}',
        ...options
    });
};

/**
 * Fetch an account
 * Fetches an account
 */
export const fetchAnAccount = <ThrowOnError extends boolean = false>(options: Options<FetchAnAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FetchAnAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}',
        ...options
    });
};

/**
 * Update account
 * Updates an account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove contact from Account
 * Removes a list of contacts from an Account
 */
export const removeContactFromAccount = <ThrowOnError extends boolean = false>(options: Options<RemoveContactFromAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveContactFromAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List account contacts
 * Lists the contacts associated with an Account
 */
export const listAccountContacts = <ThrowOnError extends boolean = false>(options: Options<ListAccountContactsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAccountContactsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}/contacts',
        ...options
    });
};

/**
 * Add contact to Account
 * Adds a list of contacts to an Account
 */
export const addContactToAccount = <ThrowOnError extends boolean = false>(options: Options<AddContactToAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddContactToAccountResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/accounts/{account_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new analytics export
 * Create a new analytics export of messages or events (activities) over a specific time span.
 * The export will be executed asynchronously. The response will include a link that can be used to retrieve the export status & result. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
 *
 */
export const createAnalyticsExport = <ThrowOnError extends boolean = false>(options?: Options<CreateAnalyticsExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAnalyticsExportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analytics/exports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetch an analytics export
 * Fetch an analytics exports. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
 */
export const getAnalyticsExport = <ThrowOnError extends boolean = false>(options: Options<GetAnalyticsExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAnalyticsExportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analytics/exports/{export_id}',
        ...options
    });
};

/**
 * Create a new analytics report
 * Create a new analytics report for a set of metrics over a specific time span. Different filters (e.g. Inbox v Tag v Teammates) will be joined with AND logic, but the IDs within a filter will be joined with OR logic (e.g. Inbox A or Inbox B, Tag A or Tag B).
 * The report will be executed asynchronously. The response will include a link that can be used to retrieve the
 * report status & result. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
 *
 */
export const createAnalyticsReport = <ThrowOnError extends boolean = false>(options?: Options<CreateAnalyticsReportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAnalyticsReportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analytics/reports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetch an analytics report
 * Fetch an analytics report. Refer to the [Analytics](https://dev.frontapp.com/reference/analytics) topic for details about specific metrics.
 */
export const getAnalyticsReport = <ThrowOnError extends boolean = false>(options: Options<GetAnalyticsReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAnalyticsReportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analytics/reports/{report_uid}',
        ...options
    });
};

/**
 * Trigger application event
 * Triggers an event on behalf of an application. These events can trigger Front workflows, like rules.
 * For more information, see the [developer docs](https://dev.frontapp.com/docs/application-triggers#/).
 *
 */
export const triggerAppEvent = <ThrowOnError extends boolean = false>(options: Options<TriggerAppEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TriggerAppEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/applications/{application_uid}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List channels
 * List the channels of the company.
 */
export const listChannels = <ThrowOnError extends boolean = false>(options?: Options<ListChannelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListChannelsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels',
        ...options
    });
};

/**
 * Get channel
 * Fetch a channel.
 */
export const getChannel = <ThrowOnError extends boolean = false>(options: Options<GetChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}',
        ...options
    });
};

/**
 * Update Channel
 * Update a channel.
 */
export const updateChannel = <ThrowOnError extends boolean = false>(options: Options<UpdateChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create draft
 * Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
 */
export const createDraft = <ThrowOnError extends boolean = false>(options: Options<CreateDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}/drafts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Receive custom messages
 * Receive a custom message in Front. This endpoint is available for custom channels **ONLY**.
 */
export const receiveCustomMessages = <ThrowOnError extends boolean = false>(options: Options<ReceiveCustomMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReceiveCustomMessagesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}/incoming_messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create message
 * Send a new message from a channel. This is one of the ways to create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation). The new conversation will support both messages and comments (discussions).
 */
export const createMessage = <ThrowOnError extends boolean = false>(options: Options<CreateMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Validate channel
 * Asynchronously validate an SMTP channel (this endpoint is irrelevant to other channel types). When you create an SMTP channel via the API, [create a channel](https://dev.frontapp.com/reference/post_inboxes-inbox-id-channels) with type smtp and the send_as set to the needed email address. You then [configure the email provider](https://help.front.com/en/articles/2081), after which you use this endpoint to asynchronously validate the SMTP settings.
 */
export const validateChannel = <ThrowOnError extends boolean = false>(options: Options<ValidateChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidateChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/{channel_id}/validate',
        ...options
    });
};

/**
 * Get comment
 * Fetches a comment.
 */
export const getComment = <ThrowOnError extends boolean = false>(options: Options<GetCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}',
        ...options
    });
};

/**
 * Update comment
 * Update a comment in a [conversation](https://dev.frontapp.com/reference/conversations).
 */
export const updateComment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download attachment for a comment
 * Download an attachment file for a given comment ID
 */
export const downloadAttachmentForAComment = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentForACommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentForACommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/download/{attachment_link_id}',
        ...options
    });
};

/**
 * List comment mentions
 * List the teammates mentioned in a comment.
 */
export const listCommentMentions = <ThrowOnError extends boolean = false>(options: Options<ListCommentMentionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCommentMentionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/mentions',
        ...options
    });
};

/**
 * Add comment reply
 * Add a reply to a comment on a [conversation](https://dev.frontapp.com/reference/conversations). Comment replies visually indicate which comment is being responded to, helping users follow the conversation.
 */
export const addCommentReply = <ThrowOnError extends boolean = false>(options: Options<AddCommentReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCommentReplyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/{comment_id}/replies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all company rules
 * List the company rules.
 */
export const listAllCompanyRules = <ThrowOnError extends boolean = false>(options?: Options<ListAllCompanyRulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllCompanyRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/company/rules',
        ...options
    });
};

/**
 * List company ticket statuses
 * List the ticket statuses available for your company.
 */
export const listCompanyTicketStatuses = <ThrowOnError extends boolean = false>(options?: Options<ListCompanyTicketStatusesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCompanyTicketStatusesResponses, ListCompanyTicketStatusesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/company/statuses',
        ...options
    });
};

/**
 * Get ticket status
 * Fetch a ticket status.
 */
export const getTicketStatusById = <ThrowOnError extends boolean = false>(options: Options<GetTicketStatusByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketStatusByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/company/statuses/{status_id}',
        ...options
    });
};

/**
 * List company tags
 * List the company tags.
 */
export const listCompanyTags = <ThrowOnError extends boolean = false>(options?: Options<ListCompanyTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCompanyTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/company/tags',
        ...options
    });
};

/**
 * Create company tag
 * Create a company tag.
 */
export const createCompanyTag = <ThrowOnError extends boolean = false>(options?: Options<CreateCompanyTagData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCompanyTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/company/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List groups
 * List the contact groups.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `GET /contact_lists`.
 *
 * @deprecated
 */
export const listGroups = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups',
        ...options
    });
};

/**
 * Create group
 * Create a new contact group in the default team (workspace).
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `POST /contact_lists`.
 *
 * @deprecated
 */
export const createGroup = <ThrowOnError extends boolean = false>(options?: Options<CreateGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete group
 * Delete a contact group.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `DELETE /contact_lists/{contact_list_id}`.
 *
 * @deprecated
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups/{contact_group_id}',
        ...options
    });
};

/**
 * Remove contacts from group
 * Remove contacts from the requested group.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `DELETE /contact_lists/{contact_list_id}/contacts`.
 *
 */
export const removeContactsFromGroup = <ThrowOnError extends boolean = false>(options: Options<RemoveContactsFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveContactsFromGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups/{contact_group_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contacts in group
 * List the contacts belonging to the requested group.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `GET /contact_lists/{contact_list_id}/contacts`.
 *
 * @deprecated
 */
export const listContactsInGroup = <ThrowOnError extends boolean = false>(options: Options<ListContactsInGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContactsInGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups/{contact_group_id}/contacts',
        ...options
    });
};

/**
 * Add contacts to group
 * Add contacts to the requested group.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `POST /contact_lists/{contact_list_id}/contacts`.
 *
 * @deprecated
 */
export const addContactsToGroup = <ThrowOnError extends boolean = false>(options: Options<AddContactsToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddContactsToGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_groups/{contact_group_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contact lists
 * List contact lists.
 */
export const listContactLists = <ThrowOnError extends boolean = false>(options?: Options<ListContactListsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListContactListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists',
        ...options
    });
};

/**
 * Create contact list
 * Create a new contact list in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team contact list](https://dev.frontapp.com/reference/create-team-contact-list) endpoint instead.
 */
export const createContactList = <ThrowOnError extends boolean = false>(options?: Options<CreateContactListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete contact list
 * Delete a contact lists.
 */
export const deleteContactList = <ThrowOnError extends boolean = false>(options: Options<DeleteContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists/{contact_list_id}',
        ...options
    });
};

/**
 * Remove contacts from contact list
 * Remove contacts from the requested contact list.
 */
export const removeContactsFromContactList = <ThrowOnError extends boolean = false>(options: Options<RemoveContactsFromContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveContactsFromContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists/{contact_list_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contacts in contact list
 * List the contacts belonging to the requested contact list.
 */
export const listContactsInContactList = <ThrowOnError extends boolean = false>(options: Options<ListContactsInContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContactsInContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists/{contact_list_id}/contacts',
        ...options
    });
};

/**
 * Add contacts to contact list
 * Add contacts to the requested contact list.
 */
export const addContactsToContactList = <ThrowOnError extends boolean = false>(options: Options<AddContactsToContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddContactsToContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contact_lists/{contact_list_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contacts
 * List the contacts of the company.
 */
export const listContacts = <ThrowOnError extends boolean = false>(options?: Options<ListContactsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListContactsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts',
        ...options
    });
};

/**
 * Create contact
 * Create a new contact at the company level.
 */
export const createContact = <ThrowOnError extends boolean = false>(options?: Options<CreateContactData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Contact's custom fields
 * Lists the custom fields that can be attached to a Contact.
 */
export const listContactCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListContactCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListContactCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/custom_fields',
        ...options
    });
};

/**
 * Merge contacts
 * Merges the contacts specified into a single contact, deleting the merged-in contacts.
 * If a target contact ID is supplied, the other contacts will be merged into that one.
 * Otherwise, some contact in the contact ID list will be treated as the target contact.
 * Merge conflicts will be resolved in the following ways:
 * * name will prioritize manually-updated and non-private contact names
 * * descriptions will be concatenated and separated by newlines in order from
 * oldest to newest with the (optional) target contact's description first
 * * all handles, groups, links, and notes will be preserved
 * * other conflicts will use the most recently updated contact's value
 *
 */
export const mergeContacts = <ThrowOnError extends boolean = false>(options?: Options<MergeContactsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MergeContactsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a contact
 * Delete a contact.
 */
export const deleteAContact = <ThrowOnError extends boolean = false>(options: Options<DeleteAContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}',
        ...options
    });
};

/**
 * Get contact
 * Fetch a contact.
 */
export const getContact = <ThrowOnError extends boolean = false>(options: Options<GetContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}',
        ...options
    });
};

/**
 * Update a contact
 * Updates a contact.
 */
export const updateAContact = <ThrowOnError extends boolean = false>(options: Options<UpdateAContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List contact conversations
 * List the conversations for a contact in reverse chronological order (newest first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 *
 */
export const listContactConversations = <ThrowOnError extends boolean = false>(options: Options<ListContactConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContactConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}/conversations',
        ...options
    });
};

/**
 * Delete contact handle
 * Remove a handle from a contact.
 */
export const deleteContactHandle = <ThrowOnError extends boolean = false>(options: Options<DeleteContactHandleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContactHandleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}/handles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add contact handle
 * Adds a new handle to a contact.
 */
export const addContactHandle = <ThrowOnError extends boolean = false>(options: Options<AddContactHandleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddContactHandleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}/handles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List notes
 * List the notes added to a contact.
 */
export const listNotes = <ThrowOnError extends boolean = false>(options: Options<ListNotesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListNotesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}/notes',
        ...options
    });
};

/**
 * Add note
 * Create a new note on a contact.
 */
export const addNote = <ThrowOnError extends boolean = false>(options: Options<AddNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNoteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/contacts/{contact_id}/notes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversations
 * List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 *
 */
export const listConversations = <ThrowOnError extends boolean = false>(options?: Options<ListConversationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations',
        ...options
    });
};

/**
 * Create discussion conversation
 * Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
 */
export const createConversation = <ThrowOnError extends boolean = false>(options?: Options<CreateConversationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateConversationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Conversation's custom fields
 * Lists the custom fields that can be attached to a Conversation.
 */
export const listConversationCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListConversationCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListConversationCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/custom_fields',
        ...options
    });
};

/**
 * Search conversations
 * Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity.
 * See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples.
 * **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company's rate limit.
 *
 */
export const searchConversations = <ThrowOnError extends boolean = false>(options: Options<SearchConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/search/{query}',
        ...options
    });
};

/**
 * Get conversation
 * Fetch a conversation.
 *
 */
export const getConversationById = <ThrowOnError extends boolean = false>(options: Options<GetConversationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetConversationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}',
        ...options
    });
};

/**
 * Update conversation
 * Update a conversation.
 */
export const updateConversation = <ThrowOnError extends boolean = false>(options: Options<UpdateConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateConversationResponses, UpdateConversationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update conversation assignee
 * Assign or unassign a conversation.
 */
export const updateConversationAssignee = <ThrowOnError extends boolean = false>(options: Options<UpdateConversationAssigneeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateConversationAssigneeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/assignee',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation comments
 * List the comments in a conversation in reverse chronological order (newest first).
 */
export const listConversationComments = <ThrowOnError extends boolean = false>(options: Options<ListConversationCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/comments',
        ...options
    });
};

/**
 * Add comment
 * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
 */
export const addComment = <ThrowOnError extends boolean = false>(options: Options<AddCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation drafts
 * List the drafts in a conversation.
 */
export const listConversationDrafts = <ThrowOnError extends boolean = false>(options: Options<ListConversationDraftsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationDraftsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/drafts',
        ...options
    });
};

/**
 * Create draft reply
 * Create a new draft as a reply to the last message in the conversation.
 */
export const createDraftReply = <ThrowOnError extends boolean = false>(options: Options<CreateDraftReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDraftReplyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/drafts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation events
 * List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company's [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
 */
export const listConversationEvents = <ThrowOnError extends boolean = false>(options: Options<ListConversationEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/events',
        ...options
    });
};

/**
 * Delete conversation followers
 * Removes teammates from the list of followers of a conversation.
 */
export const deleteConversationFollowers = <ThrowOnError extends boolean = false>(options: Options<DeleteConversationFollowersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteConversationFollowersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/followers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation followers
 * List the teammates following a conversation.
 */
export const listConversationFollowers = <ThrowOnError extends boolean = false>(options: Options<ListConversationFollowersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationFollowersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/followers',
        ...options
    });
};

/**
 * Add conversation followers
 * Adds teammates to the list of followers of a conversation.
 */
export const addConversationFollowers = <ThrowOnError extends boolean = false>(options: Options<AddConversationFollowersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddConversationFollowersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/followers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation inboxes
 * List the inboxes in which a conversation is listed.
 */
export const listConversationInboxes = <ThrowOnError extends boolean = false>(options: Options<ListConversationInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/inboxes',
        ...options
    });
};

/**
 * Remove conversation links
 * Removes one or more links to a conversation.
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const removeConversationLinks = <ThrowOnError extends boolean = false>(options: Options<RemoveConversationLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveConversationLinksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add conversation link
 * Adds one or more links to a conversation
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const addConversationLink = <ThrowOnError extends boolean = false>(options: Options<AddConversationLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddConversationLinkResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List conversation messages
 * List the messages in a conversation in reverse chronological order (newest first).
 */
export const listConversationMessages = <ThrowOnError extends boolean = false>(options: Options<ListConversationMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConversationMessagesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/messages',
        ...options
    });
};

/**
 * Create message reply
 * Reply to a conversation by sending a message and appending it to the conversation.
 */
export const createMessageReply = <ThrowOnError extends boolean = false>(options: Options<CreateMessageReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageReplyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update conversation reminders
 * Snooze or unsnooze a conversation for the provided user.
 * For private conversations, reminders can only be created and edited through the API for teammates that own the conversation.
 * For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to.
 *
 */
export const updateConversationReminders = <ThrowOnError extends boolean = false>(options: Options<UpdateConversationRemindersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateConversationRemindersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/reminders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove conversation tag
 * Removes one or more tags to a conversation
 */
export const removeConversationTag = <ThrowOnError extends boolean = false>(options: Options<RemoveConversationTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveConversationTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add conversation tag
 * Adds one or more tags to a conversation
 */
export const addConversationTag = <ThrowOnError extends boolean = false>(options: Options<AddConversationTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddConversationTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/conversations/{conversation_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Contact's custom fields
 * Lists the custom fields that can be attached to a Contact.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the fully compatible `GET /contacts/custom_fields` endpoint instead.
 *
 * @deprecated
 */
export const listCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/custom_fields',
        ...options
    });
};

/**
 * Download attachment
 * Download an attachment file.
 */
export const downloadAttachment = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/download/{attachment_link_id}',
        ...options
    });
};

/**
 * Delete draft
 * Delete a draft message.
 */
export const deleteDraft = <ThrowOnError extends boolean = false>(options: Options<DeleteDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/drafts/{draft_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Edit draft
 * Edit a draft message.
 */
export const editDraft = <ThrowOnError extends boolean = false>(options: Options<EditDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/drafts/{message_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List events
 * Lists all the detailed events which occurred in the inboxes of the company ordered in reverse chronological order (newest first).
 * Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering.
 *
 */
export const listEvents = <ThrowOnError extends boolean = false>(options?: Options<ListEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events',
        ...options
    });
};

/**
 * Get event
 * Fetch an event.
 * Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering.
 *
 */
export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/events/{event_id}',
        ...options
    });
};

/**
 * List inboxes
 * List the inboxes of the company.
 */
export const listInboxes = <ThrowOnError extends boolean = false>(options?: Options<ListInboxesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes',
        ...options
    });
};

/**
 * Create inbox
 * Create an inbox in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team inbox](https://dev.frontapp.com/reference/create-team-inbox) endpoint instead.
 */
export const createInbox = <ThrowOnError extends boolean = false>(options?: Options<CreateInboxData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateInboxResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Inbox's custom fields
 * Lists the custom fields that can be attached to an Inbox.
 */
export const listInboxCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListInboxCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListInboxCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/custom_fields',
        ...options
    });
};

/**
 * Get inbox
 * Fetch an inbox.
 */
export const getInbox = <ThrowOnError extends boolean = false>(options: Options<GetInboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetInboxResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}',
        ...options
    });
};

/**
 * List inbox channels
 * List the channels in an inbox.
 */
export const listInboxChannels = <ThrowOnError extends boolean = false>(options: Options<ListInboxChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListInboxChannelsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/channels',
        ...options
    });
};

/**
 * Create a channel
 * Create a channel in an inbox.
 */
export const createAChannel = <ThrowOnError extends boolean = false>(options: Options<CreateAChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAChannelResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/channels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List inbox conversations
 * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 *
 */
export const listInboxConversations = <ThrowOnError extends boolean = false>(options: Options<ListInboxConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListInboxConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/conversations',
        ...options
    });
};

/**
 * Import message
 * Import a new message in an inbox. **Only use this endpoint to import historical, non-active conversations**. Do not use it to create messages for new conversations.
 */
export const importInboxMessage = <ThrowOnError extends boolean = false>(options: Options<ImportInboxMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportInboxMessageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/imported_messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Removes inbox access
 * Remove access of one or more teammates from an inbox.
 */
export const removesInboxAccess = <ThrowOnError extends boolean = false>(options: Options<RemovesInboxAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemovesInboxAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List inbox access
 * List the teammates with access to an inbox.
 */
export const listInboxAccess = <ThrowOnError extends boolean = false>(options: Options<ListInboxAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListInboxAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/teammates',
        ...options
    });
};

/**
 * Add inbox access
 * Give access to one or more teammates to an inbox.
 */
export const addInboxAccess = <ThrowOnError extends boolean = false>(options: Options<AddInboxAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddInboxAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inboxes/{inbox_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an article
 * Deletes an article and all its content and translations.
 */
export const deleteAnArticle = <ThrowOnError extends boolean = false>(options: Options<DeleteAnArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAnArticleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}',
        ...options
    });
};

/**
 * Get a knowledge base article
 * Fetches a knowledge base article.
 */
export const getAKnowledgeBaseArticle = <ThrowOnError extends boolean = false>(options: Options<GetAKnowledgeBaseArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAKnowledgeBaseArticleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}',
        ...options
    });
};

/**
 * Get knowledge base article with content in default locale
 * Fetches a knowledge base article with content in the default locale.
 */
export const getKnowledgeBaseArticleWithContentInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeBaseArticleWithContentInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeBaseArticleWithContentInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}/content',
        ...options
    });
};

/**
 * Update article content in default locale.
 * Updates an article's content in the default locale
 */
export const updateArticleContentInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateArticleContentInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateArticleContentInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download attachment from an article
 * Downloads the attachment from an article.
 */
export const downloadAttachmentFromAnArticle = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentFromAnArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentFromAnArticleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}/download/{attachment_id}',
        ...options
    });
};

/**
 * Get knowledge base article with content in specified locale
 * Fetches a knowledge base article with content for a given locale.
 */
export const getKnowledgeBaseArticleWithContentInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeBaseArticleWithContentInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeBaseArticleWithContentInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}/locales/{locale}/content',
        ...options
    });
};

/**
 * Update article content in specified locale
 * Updates an article's content for a given locale.
 */
export const updateArticleContentInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateArticleContentInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateArticleContentInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_articles/{article_id}/locales/{locale}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a knowledge base category
 * Deletes a knowledge base category.
 *
 * > ⚠️ Warning
 * >
 * > When a category is deleted, all articles in the category are also deleted.
 *
 */
export const deleteAKnowledgeBaseCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteAKnowledgeBaseCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAKnowledgeBaseCategoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}',
        ...options
    });
};

/**
 * Get a knowledge base category
 * Fetches a knowledge base category.
 */
export const getAKnowledgeBaseCategory = <ThrowOnError extends boolean = false>(options: Options<GetAKnowledgeBaseCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAKnowledgeBaseCategoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}',
        ...options
    });
};

/**
 * List articles in a category
 * List articles in a category.
 */
export const listArticlesInACategory = <ThrowOnError extends boolean = false>(options: Options<ListArticlesInACategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListArticlesInACategoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}/articles',
        ...options
    });
};

/**
 * Get knowledge base category content in default locale
 * Fetches a knowledge base category with content in the default locale.
 */
export const getKnowledgeBaseCategoryContentInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeBaseCategoryContentInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeBaseCategoryContentInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}/content',
        ...options
    });
};

/**
 * Update knowledge base category in default locale
 * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.
 */
export const updateKnowledgeBaseCategoryInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateKnowledgeBaseCategoryInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateKnowledgeBaseCategoryInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get knowledge base category with content in specified locale
 * Fetches a knowledge base category with content for a given locale.
 */
export const getKnowledgeBaseCategoryWithContentInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgeBaseCategoryWithContentInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}/locales/{locale}/content',
        ...options
    });
};

/**
 * Update knowledge base category in specified locale
 * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.
 */
export const updateKnowledgeBaseCategoryInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateKnowledgeBaseCategoryInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateKnowledgeBaseCategoryInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_base_categories/{category_id}/locales/{locale}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List knowledge bases
 * List the knowledge bases of the company.
 */
export const listKnowledgeBases = <ThrowOnError extends boolean = false>(options?: Options<ListKnowledgeBasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListKnowledgeBasesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases',
        ...options
    });
};

/**
 * Create a knowledge base
 * Creates a knowledge base.
 */
export const createAKnowledgeBase = <ThrowOnError extends boolean = false>(options?: Options<CreateAKnowledgeBaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAKnowledgeBaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a knowledge base
 * Fetches a knowledge base.
 */
export const getAKnowledgeBase = <ThrowOnError extends boolean = false>(options: Options<GetAKnowledgeBaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAKnowledgeBaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}',
        ...options
    });
};

/**
 * List articles in a knowledge base
 * List articles in a knowledge base
 */
export const listArticlesInAKnowledgeBase = <ThrowOnError extends boolean = false>(options: Options<ListArticlesInAKnowledgeBaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListArticlesInAKnowledgeBaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/articles',
        ...options
    });
};

/**
 * Create article in a knowledge base in default locale
 * Creates an article in a knowledge base in the default locale.
 */
export const createArticleInAKnowledgeBaseInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<CreateArticleInAKnowledgeBaseInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleInAKnowledgeBaseInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/articles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List categories in a knowledge base
 * List categories in a knowledge base.
 */
export const listCategoriesInAKnowledgeBase = <ThrowOnError extends boolean = false>(options: Options<ListCategoriesInAKnowledgeBaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCategoriesInAKnowledgeBaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/categories',
        ...options
    });
};

/**
 * Create knowledge base category in default locale
 * Creates a knowledge base category in the default locale.
 */
export const createKnowledgeBaseCategoryInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<CreateKnowledgeBaseCategoryInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateKnowledgeBaseCategoryInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a knowledge base with content in default locale
 * Fetches a knowledge base with its content in the default locale.
 */
export const getAKnowledgeBaseWithContentInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<GetAKnowledgeBaseWithContentInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAKnowledgeBaseWithContentInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/content',
        ...options
    });
};

/**
 * Update knowledge base in default locale
 * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.
 */
export const updateKnowledgeBaseInDefaultLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateKnowledgeBaseInDefaultLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateKnowledgeBaseInDefaultLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create article in a knowledge base in specified locale
 * Create an article for a given locale in a knowledge base.
 */
export const createArticleInAKnowledgeBaseInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<CreateArticleInAKnowledgeBaseInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArticleInAKnowledgeBaseInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create knowledge base category in specified locale
 * Creates a knowledge base category for a given locale.
 */
export const createKnowledgeBaseCategoryInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<CreateKnowledgeBaseCategoryInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateKnowledgeBaseCategoryInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a knowledge base with content in specified locale
 * Fetches a knowledge base with its content for a given locale.
 */
export const getAKnowledgeBaseWithContentInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<GetAKnowledgeBaseWithContentInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAKnowledgeBaseWithContentInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content',
        ...options
    });
};

/**
 * Update knowledge base in specified locale
 * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.
 */
export const updateKnowledgeBaseInSpecifiedLocale = <ThrowOnError extends boolean = false>(options: Options<UpdateKnowledgeBaseInSpecifiedLocaleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateKnowledgeBaseInSpecifiedLocaleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledge_bases/{knowledge_base_id}/locales/{locale}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List links
 * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
 * These links include application objects; for more details, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const listLinks = <ThrowOnError extends boolean = false>(options?: Options<ListLinksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLinksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links',
        ...options
    });
};

/**
 * Create link
 * Create a link. You must supply either `pattern` or `external_url` in the request, but not both (`pattern` is for application objects while `external_url` is for standard links). If `pattern` is provided, the API call updates the application objects matching the exact pattern. Keep in mind this endpoint only creates or updates an existing link from an application object. It does not create new application objects. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
 */
export const createLink = <ThrowOnError extends boolean = false>(options?: Options<CreateLinkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateLinkResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Link's custom fields
 * Lists the custom fields that can be attached to a Link.
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const listLinkCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListLinkCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLinkCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links/custom_fields',
        ...options
    });
};

/**
 * Get link
 * Fetch a link.
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const getLink = <ThrowOnError extends boolean = false>(options: Options<GetLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links/{link_id}',
        ...options
    });
};

/**
 * Update a link
 * Update a link.
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const updateALink = <ThrowOnError extends boolean = false>(options: Options<UpdateALinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateALinkResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links/{link_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List link conversations
 * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 * For more information on links, see the [Links](https://dev.frontapp.com/reference/links) topic.
 *
 */
export const listLinkConversations = <ThrowOnError extends boolean = false>(options: Options<ListLinkConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLinkConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/links/{link_id}/conversations',
        ...options
    });
};

/**
 * API Token details
 * Fetch the details of the API token.
 */
export const apiTokenDetails = <ThrowOnError extends boolean = false>(options?: Options<ApiTokenDetailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApiTokenDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/me',
        ...options
    });
};

/**
 * List folders
 * List the message template folders.
 */
export const listFolders = <ThrowOnError extends boolean = false>(options?: Options<ListFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFoldersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders',
        ...options
    });
};

/**
 * Create folder
 * Create a new message template folder in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team folder](https://dev.frontapp.com/reference/create-team-folder) endpoint instead.
 */
export const createFolder = <ThrowOnError extends boolean = false>(options?: Options<CreateFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete folder
 * Delete a message template folder and child folders/templates
 */
export const deleteFolder = <ThrowOnError extends boolean = false>(options: Options<DeleteFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}',
        ...options
    });
};

/**
 * Get folder
 * Fetch a message template folder.
 */
export const getFolder = <ThrowOnError extends boolean = false>(options: Options<GetFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}',
        ...options
    });
};

/**
 * Update folder
 * Update message template folder
 */
export const updateFolder = <ThrowOnError extends boolean = false>(options: Options<UpdateFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get child folders
 * Fetch the child message templates folders of a message template folder.
 */
export const getChildFolders = <ThrowOnError extends boolean = false>(options: Options<GetChildFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChildFoldersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}/message_template_folders',
        ...options
    });
};

/**
 * Create child folder
 * Create a new message template folder as a child of the given folder
 */
export const createChildFolder = <ThrowOnError extends boolean = false>(options: Options<CreateChildFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChildFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}/message_template_folders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get child templates
 * Fetch the child message templates of a message template folder.
 */
export const getChildTemplates = <ThrowOnError extends boolean = false>(options: Options<GetChildTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChildTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}/message_templates',
        ...options
    });
};

/**
 * Create child template
 * Create a new message template as a child of the given folder
 */
export const createChildTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateChildTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChildTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_template_folders/{message_template_folder_id}/message_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List message templates
 * List the message templates.
 */
export const listMessageTemplates = <ThrowOnError extends boolean = false>(options?: Options<ListMessageTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMessageTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates',
        ...options
    });
};

/**
 * Create message template
 * Create a new message template in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team message template](https://dev.frontapp.com/reference/create-team-message-template) endpoint instead.
 */
export const createMessageTemplate = <ThrowOnError extends boolean = false>(options?: Options<CreateMessageTemplateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete message template
 * Delete a message template
 */
export const deleteMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates/{message_template_id}',
        ...options
    });
};

/**
 * Get message template
 * Fetch a message template.
 */
export const getMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<GetMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates/{message_template_id}',
        ...options
    });
};

/**
 * Update message template
 * Update message template
 */
export const updateMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<UpdateMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates/{message_template_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download attachment for a message template
 * Download an attachment file for a given message template ID
 */
export const downloadAttachmentForAMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentForAMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentForAMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message_templates/{message_template_id}/download/{attachment_link_id}',
        ...options
    });
};

/**
 * Get message
 * Fetch a message.
 *
 * > ℹ️ The HTTP Header `Accept` can be used to request the message in a different format.
 * > By default, Front will return the documented JSON response. By requesting `message/rfc822`, the response will contain the message in the EML format (for email messages only).
 *
 */
export const getMessage = <ThrowOnError extends boolean = false>(options: Options<GetMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/messages/{message_id}',
        ...options
    });
};

/**
 * Download attachment for a message
 * Download an attachment file for a given message id. Should be used by partner channels.
 */
export const downloadAttachmentForAMessage = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentForAMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentForAMessageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/messages/{message_id}/download/{attachment_link_id}',
        ...options
    });
};

/**
 * Get message seen status
 * Get the seen receipts for the given message. If no seen-by information is available, there will be a single entry for the first time the message was seen by any recipient. If seen-by information is available, there will be an entry for each recipient who has seen the message.
 */
export const getMessageSeenStatus = <ThrowOnError extends boolean = false>(options: Options<GetMessageSeenStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageSeenStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/messages/{message_id}/seen',
        ...options
    });
};

/**
 * Mark message seen
 * Mark an outbound message from Front as seen. Note, the message seen route should only be called in response to an actual end-user's message-seen action. In accordance with this behavior, the route is rate limited to 10 requests per message per hour.
 */
export const markMessageSeen = <ThrowOnError extends boolean = false>(options: Options<MarkMessageSeenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarkMessageSeenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/messages/{message_id}/seen',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List rules
 * List the rules of the company.
 */
export const listRules = <ThrowOnError extends boolean = false>(options?: Options<ListRulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rules',
        ...options
    });
};

/**
 * Get rule
 * Fetch a rule.
 */
export const getRule = <ThrowOnError extends boolean = false>(options: Options<GetRuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRuleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rules/{rule_id}',
        ...options
    });
};

/**
 * List Shifts
 * List the shifts.
 */
export const listShifts = <ThrowOnError extends boolean = false>(options?: Options<ListShiftsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListShiftsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts',
        ...options
    });
};

/**
 * Create shift
 * Create a shift in the oldest active workspace that the token has access to. If you need to specify the workspace, we recommend using the [Create team shift](https://dev.frontapp.com/reference/create-team-shift) endpoint instead.
 */
export const createShift = <ThrowOnError extends boolean = false>(options?: Options<CreateShiftData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get shift
 * Fetch a shift.
 */
export const getShift = <ThrowOnError extends boolean = false>(options: Options<GetShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts/{shift_id}',
        ...options
    });
};

/**
 * Update shift
 * Update a shift.
 */
export const updateShift = <ThrowOnError extends boolean = false>(options: Options<UpdateShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts/{shift_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove teammates from shift
 * Remove teammates from a shift.
 */
export const removeTeammatesFromShift = <ThrowOnError extends boolean = false>(options: Options<RemoveTeammatesFromShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTeammatesFromShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts/{shift_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List shift's teammates
 * List the teammates assigned to a shift.
 */
export const listShiftsTeammates = <ThrowOnError extends boolean = false>(options: Options<ListShiftsTeammatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListShiftsTeammatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts/{shift_id}/teammates',
        ...options
    });
};

/**
 * Add teammates to shift
 * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
 */
export const addTeammatesToShift = <ThrowOnError extends boolean = false>(options: Options<AddTeammatesToShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTeammatesToShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/shifts/{shift_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete signature
 * Delete signature
 */
export const deleteSignature = <ThrowOnError extends boolean = false>(options: Options<DeleteSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSignatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/signatures/{signature_id}',
        ...options
    });
};

/**
 * Get signatures
 * Get the given signature.
 */
export const getSignatures = <ThrowOnError extends boolean = false>(options: Options<GetSignaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSignaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/signatures/{signature_id}',
        ...options
    });
};

/**
 * Update signature
 * Update signature
 */
export const updateSignature = <ThrowOnError extends boolean = false>(options: Options<UpdateSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateSignatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/signatures/{signature_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List tags
 * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
 */
export const listTags = <ThrowOnError extends boolean = false>(options?: Options<ListTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags',
        ...options
    });
};

/**
 * Create tag
 * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
 */
export const createTag = <ThrowOnError extends boolean = false>(options?: Options<CreateTagData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete tag
 * Delete a tag.
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options
    });
};

/**
 * Get tag
 * Fetch a tag.
 */
export const getTag = <ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options
    });
};

/**
 * Update a tag
 * Update a tag.
 */
export const updateATag = <ThrowOnError extends boolean = false>(options: Options<UpdateATagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateATagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List tag children
 * List the children of a specific tag.
 */
export const listTagChildren = <ThrowOnError extends boolean = false>(options: Options<ListTagChildrenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTagChildrenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}/children',
        ...options
    });
};

/**
 * Create child tag
 * Creates a child tag.
 */
export const createChildTag = <ThrowOnError extends boolean = false>(options: Options<CreateChildTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChildTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}/children',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List tagged conversations
 * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 *
 */
export const listTaggedConversations = <ThrowOnError extends boolean = false>(options: Options<ListTaggedConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTaggedConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/tags/{tag_id}/conversations',
        ...options
    });
};

/**
 * List teammate groups
 * List the teammate groups in the company.
 */
export const listCompanyTeammateGroups = <ThrowOnError extends boolean = false>(options?: Options<ListCompanyTeammateGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCompanyTeammateGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups',
        ...options
    });
};

/**
 * Create teammate group
 * Create a new teammate group.
 */
export const createCompanyTeammateGroup = <ThrowOnError extends boolean = false>(options?: Options<CreateCompanyTeammateGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCompanyTeammateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete teammate group
 * Deletes a teammate group. Note - You cannot delete a teammate group that is managed by SCIM.
 */
export const deleteCompanyTeammateGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteCompanyTeammateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCompanyTeammateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}',
        ...options
    });
};

/**
 * Get teammate group
 * Fetch a teammate group.
 */
export const getCompanyTeammateGroup = <ThrowOnError extends boolean = false>(options: Options<GetCompanyTeammateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCompanyTeammateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}',
        ...options
    });
};

/**
 * Update a teammate group
 * Updates a teammate group. Note - You cannot modify a teammate group that is managed by SCIM.
 */
export const updateACompanyTeammateGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateACompanyTeammateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateACompanyTeammateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove teammate group team inboxes
 * Unlinks non-public inboxes from the teammate group.
 */
export const removeCompanyTeammateGroupTeamInboxes = <ThrowOnError extends boolean = false>(options: Options<RemoveCompanyTeammateGroupTeamInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCompanyTeammateGroupTeamInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/inboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate group team inboxes
 * List inboxes that the teammate group has access to via its associated teams.
 */
export const listCompanyTeammateGroupTeamInboxes = <ThrowOnError extends boolean = false>(options: Options<ListCompanyTeammateGroupTeamInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCompanyTeammateGroupTeamInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/inboxes',
        ...options
    });
};

/**
 * Add teammate group team inboxes
 * Links non-public inboxes to the teammate group. The inbox must be part of a team that has been added to the teammate group.
 */
export const addCompanyTeammateGroupTeamInboxes = <ThrowOnError extends boolean = false>(options: Options<AddCompanyTeammateGroupTeamInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCompanyTeammateGroupTeamInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/inboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove teammate group teammates
 * Remove teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
 */
export const removeCompanyTeammateGroupTeammates = <ThrowOnError extends boolean = false>(options: Options<RemoveCompanyTeammateGroupTeammatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCompanyTeammateGroupTeammatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate group teammates
 * List teammate group teammates.
 */
export const listCompanyTeammateGroupTeammates = <ThrowOnError extends boolean = false>(options: Options<ListCompanyTeammateGroupTeammatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCompanyTeammateGroupTeammatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teammates',
        ...options
    });
};

/**
 * Add teammate group teammates
 * Add teammate group teammates. Note - You cannot modify a teammate group that is managed by SCIM.
 */
export const addCompanyTeammateGroupTeammates = <ThrowOnError extends boolean = false>(options: Options<AddCompanyTeammateGroupTeammatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCompanyTeammateGroupTeammatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove teammate group teams
 * Remove teams from the teammate group. Unlinks to any associated team inboxes.
 */
export const removeCompanyTeammateGroupTeams = <ThrowOnError extends boolean = false>(options: Options<RemoveCompanyTeammateGroupTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCompanyTeammateGroupTeamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate group teams
 * List teams added to the teammate group. Any teams added to the teammate group will automatically link public inboxes.
 */
export const listCompanyTeammateGroupTeams = <ThrowOnError extends boolean = false>(options: Options<ListCompanyTeammateGroupTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCompanyTeammateGroupTeamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teams',
        ...options
    });
};

/**
 * Add teammate group teams
 * Adds teams to the teammate group. Any teams added to the teammate group will automatically link public inboxes. Non-public inboxes can be added to the teammate group separately.
 */
export const addCompanyTeammateGroupTeams = <ThrowOnError extends boolean = false>(options: Options<AddCompanyTeammateGroupTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCompanyTeammateGroupTeamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammate_groups/{teammate_group_id}/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammates
 * List the teammates in the company.
 */
export const listTeammates = <ThrowOnError extends boolean = false>(options?: Options<ListTeammatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeammatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates',
        ...options
    });
};

/**
 * List Teammate's custom fields
 * Lists the custom fields that can be attached to a Teammate.
 */
export const listTeammateCustomFields = <ThrowOnError extends boolean = false>(options?: Options<ListTeammateCustomFieldsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeammateCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/custom_fields',
        ...options
    });
};

/**
 * Get teammate
 * Fetch a teammate.
 */
export const getTeammate = <ThrowOnError extends boolean = false>(options: Options<GetTeammateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeammateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}',
        ...options
    });
};

/**
 * Update teammate
 * Update a teammate.
 */
export const updateTeammate = <ThrowOnError extends boolean = false>(options: Options<UpdateTeammateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTeammateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate channels
 * List the channels of a teammate.
 */
export const listTeammateChannels = <ThrowOnError extends boolean = false>(options: Options<ListTeammateChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateChannelsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/channels',
        ...options
    });
};

/**
 * List teammate groups
 * List the contact groups belonging to the requested teammate.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `GET /teammates/{teammate_id}/contact_lists`.
 *
 * @deprecated
 */
export const listTeammateGroups = <ThrowOnError extends boolean = false>(options: Options<ListTeammateGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contact_groups',
        ...options
    });
};

/**
 * Create teammate group
 * Create a new contact group for the requested teammate.
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `POST /teammates/{teammate_id}/contact_lists`.
 *
 * @deprecated
 */
export const createTeammateGroup = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contact_groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate contact lists
 * List the contact lists belonging to the requested teammate.
 */
export const listTeammateContactLists = <ThrowOnError extends boolean = false>(options: Options<ListTeammateContactListsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateContactListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contact_lists',
        ...options
    });
};

/**
 * Create teammate contact list
 * Create a new contact list for the requested teammate.
 */
export const createTeammateContactList = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contact_lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate contacts
 * List the contacts of a teammate.
 */
export const listTeammateContacts = <ThrowOnError extends boolean = false>(options: Options<ListTeammateContactsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateContactsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contacts',
        ...options
    });
};

/**
 * Create teammate contact
 * Create a contact for a teammate.
 */
export const createTeammateContact = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List assigned conversations
 * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations).
 *
 */
export const listAssignedConversations = <ThrowOnError extends boolean = false>(options: Options<ListAssignedConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignedConversationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/conversations',
        ...options
    });
};

/**
 * List teammate inboxes
 * Returns list of inboxes the teammate has access to.
 * @deprecated
 */
export const listTeammateInboxes = <ThrowOnError extends boolean = false>(options: Options<ListTeammateInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/inboxes',
        ...options
    });
};

/**
 * List teammate folders
 * List the message template folders belonging to the requested teammate.
 */
export const listTeammateFolders = <ThrowOnError extends boolean = false>(options: Options<ListTeammateFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateFoldersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/message_template_folders',
        ...options
    });
};

/**
 * Create teammate folder
 * Create a new message template folder belonging to the requested teammate.
 */
export const createTeammateFolder = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/message_template_folders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate message templates
 * List the message templates belonging to the requested teammate.
 */
export const listTeammateMessageTemplates = <ThrowOnError extends boolean = false>(options: Options<ListTeammateMessageTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateMessageTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/message_templates',
        ...options
    });
};

/**
 * Create teammate message template
 * Create a new message template for the given teammate
 */
export const createTeammateMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/message_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate rules
 * List the rules of a teammate.
 */
export const listTeammateRules = <ThrowOnError extends boolean = false>(options: Options<ListTeammateRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/rules',
        ...options
    });
};

/**
 * List Teammate Shifts
 * Lists all the shifts for the teammate.
 */
export const listTeammateShifts = <ThrowOnError extends boolean = false>(options: Options<ListTeammateShiftsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateShiftsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/shifts',
        ...options
    });
};

/**
 * List teammate signatures
 * List the signatures belonging to the given teammate.
 */
export const listTeammateSignatures = <ThrowOnError extends boolean = false>(options: Options<ListTeammateSignaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateSignaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/signatures',
        ...options
    });
};

/**
 * Create teammate signature
 * Create a new signature for the given teammate
 */
export const createTeammateSignature = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateSignatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/signatures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teammate tags
 * List the tags for a teammate.
 */
export const listTeammateTags = <ThrowOnError extends boolean = false>(options: Options<ListTeammateTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeammateTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/tags',
        ...options
    });
};

/**
 * Create teammate tag
 * Create a tag for a teammate.
 */
export const createTeammateTag = <ThrowOnError extends boolean = false>(options: Options<CreateTeammateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeammateTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teammates/{teammate_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teams
 * List the teams (workspaces) in the company.
 */
export const listTeams = <ThrowOnError extends boolean = false>(options?: Options<ListTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams',
        ...options
    });
};

/**
 * Get team
 * Fetch a team (workspace).
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}',
        ...options
    });
};

/**
 * List team channels
 * List the channels of a team (workspace).
 */
export const listTeamChannels = <ThrowOnError extends boolean = false>(options: Options<ListTeamChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamChannelsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/channels',
        ...options
    });
};

/**
 * List team groups
 * List contact groups belonging to the requested team (workspace).
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `GET /teams/{team_id}/contact_lists`.
 *
 * @deprecated
 */
export const listTeamGroups = <ThrowOnError extends boolean = false>(options: Options<ListTeamGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contact_groups',
        ...options
    });
};

/**
 * Create team group
 * Create a new contact group for the requested team (workspace).
 *
 * > ⚠️ Deprecated endpoint
 * >
 * > This endpoint has been deprecated. Please use the compatible contact list endpoints instead.
 * > - `POST /teams/{team_id}/contact_lists`.
 *
 * @deprecated
 */
export const createTeamGroup = <ThrowOnError extends boolean = false>(options: Options<CreateTeamGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamGroupResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contact_groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team contact lists
 * List contact lists belonging to the requested team (workspace).
 */
export const listTeamContactLists = <ThrowOnError extends boolean = false>(options: Options<ListTeamContactListsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamContactListsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contact_lists',
        ...options
    });
};

/**
 * Create team contact list
 * Create a new contact list for the requested team (workspace).
 */
export const createTeamContactList = <ThrowOnError extends boolean = false>(options: Options<CreateTeamContactListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamContactListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contact_lists',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team contacts
 * List the contacts of a team (workspace).
 */
export const listTeamContacts = <ThrowOnError extends boolean = false>(options: Options<ListTeamContactsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamContactsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contacts',
        ...options
    });
};

/**
 * Create team contact
 * Create a contact for a team (workspace).
 */
export const createTeamContact = <ThrowOnError extends boolean = false>(options: Options<CreateTeamContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamContactResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/contacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team inboxes
 * List the inboxes belonging to a team (workspace).
 */
export const listTeamInboxes = <ThrowOnError extends boolean = false>(options: Options<ListTeamInboxesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamInboxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/inboxes',
        ...options
    });
};

/**
 * Create team inbox
 * Create an inbox for a team (workspace).
 */
export const createTeamInbox = <ThrowOnError extends boolean = false>(options: Options<CreateTeamInboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamInboxResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/inboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team folders
 * List the message template folders belonging to the requested team (workspace).
 */
export const listTeamFolders = <ThrowOnError extends boolean = false>(options: Options<ListTeamFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamFoldersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/message_template_folders',
        ...options
    });
};

/**
 * Create team folder
 * Create a new message template folder belonging to the requested team (workspace).
 */
export const createTeamFolder = <ThrowOnError extends boolean = false>(options: Options<CreateTeamFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamFolderResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/message_template_folders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team message templates
 * List the message templates belonging to the requested team (workspace).
 */
export const listTeamMessageTemplates = <ThrowOnError extends boolean = false>(options: Options<ListTeamMessageTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamMessageTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/message_templates',
        ...options
    });
};

/**
 * Create team message template
 * Create a new message template for the given team (workspace).
 */
export const createTeamMessageTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateTeamMessageTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamMessageTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/message_templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team rules
 * List the rules of a team (workspace).
 */
export const listTeamRules = <ThrowOnError extends boolean = false>(options: Options<ListTeamRulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamRulesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/rules',
        ...options
    });
};

/**
 * List team Shifts
 * List the shifts for a team (workspace).
 */
export const listTeamShifts = <ThrowOnError extends boolean = false>(options: Options<ListTeamShiftsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamShiftsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/shifts',
        ...options
    });
};

/**
 * Create team shift
 * Create a shift for a team (workspace).
 */
export const createTeamShift = <ThrowOnError extends boolean = false>(options: Options<CreateTeamShiftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamShiftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/shifts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team signatures
 * List the signatures belonging to the given team (workspace).
 */
export const listTeamSignatures = <ThrowOnError extends boolean = false>(options: Options<ListTeamSignaturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamSignaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/signatures',
        ...options
    });
};

/**
 * Create team signature
 * Create a new signature for the given team (workspace).
 */
export const createTeamSignature = <ThrowOnError extends boolean = false>(options: Options<CreateTeamSignatureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamSignatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/signatures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team tags
 * List the tags for a team (workspace).
 */
export const listTeamTags = <ThrowOnError extends boolean = false>(options: Options<ListTeamTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/tags',
        ...options
    });
};

/**
 * Create team tag
 * Create a tag for a team (workspace).
 */
export const createTeamTag = <ThrowOnError extends boolean = false>(options: Options<CreateTeamTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamTagResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove teammates from team
 * Remove one or more teammates from a team (workspace).
 */
export const removeTeammatesFromTeam = <ThrowOnError extends boolean = false>(options: Options<RemoveTeammatesFromTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTeammatesFromTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add teammates to team
 * Add one or more teammates to a team (workspace).
 */
export const addTeammatesToTeam = <ThrowOnError extends boolean = false>(options: Options<AddTeammatesToTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTeammatesToTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/teams/{team_id}/teammates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};